<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/25/hello-world/</url>
    <content><![CDATA[<p>Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3个人常用通信方式总结</title>
    <url>/2021/12/06/vue3%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><ul>
<li><p>Vue3 子组件可以通过 props 接受父组件的传值</p>
</li>
<li><p>在 setup() 中可以通过 <code>props.value</code> 来访问父组件传值</p>
</li>
<li><p>父组件传值举例</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>子组件接受并使用父组件传递值</p>
<span id="more"></span>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	&#123;&#123; fatherValue &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">"ChildComponent"</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                type<span class="token operator">:</span> String<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span> <span class="token parameter">props</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> fatherValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            fatherValue <span class="token operator">=</span> props<span class="token punctuation">.</span>value
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> fatherValue <span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                fatherValue
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h2></li>
<li><p>通过 refs ，父组件可以直接获取子组件实例，并向子组件传值</p>
</li>
<li><p>父组件举例</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childRef<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sendValue()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        Change Child Value
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">"ChildComponent"</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                type<span class="token operator">:</span> String<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span> <span class="token parameter">props</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> <span class="token function-variable function">sendValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"childRef"</span><span class="token punctuation">,</span> childRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 调用子组件方法</span>
                childRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">acceptValue</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                fatherValue
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>子组件举例</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	Son: &#123;&#123; valueRef &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">"ChildComponent"</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            value<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                type<span class="token operator">:</span> String<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">""</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span> <span class="token parameter">props</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> valueRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> <span class="token function-variable function">acceptValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            	valueRef<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                valueRef<span class="token punctuation">,</span>
                acceptValue
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="emits"><a href="#emits" class="headerlink" title="emits"></a>emits</h2><ul>
<li><p>子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数</p>
</li>
<li><p>父亲组件举例</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	&lt;child-component :add-child="addChildMethod()"
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        name<span class="token operator">:</span> <span class="token string">"FatherComponent"</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span> <span class="token parameter">props</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> <span class="token function-variable function">addChildMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// mehtod</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                addChildMethod
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>子组件举例</p>
  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>addChild<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- some --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack入门-loader</title>
    <url>/2021/12/05/webpack%E5%85%A5%E9%97%A8-loader/</url>
    <content><![CDATA[<h2 id="loader-基础"><a href="#loader-基础" class="headerlink" title="loader 基础"></a>loader 基础</h2><ul>
<li><p>将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件</p>
</li>
<li><p>在 module.rule 配置，必须包含 test 和 use 属性</p>
<ul>
<li><code>test</code>： 标识出应该被对应的 loader 进行转换的某个或某些文件</li>
<li><code>use</code>：进行转换时，应该使用哪个 loader<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	rules<span class="token operator">:</span> <span class="token punctuation">[</span>
	  <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'css-loader'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	  <span class="token punctuation">&#123;</span> test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token string">'ts-loader'</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>使用 loader 的三种方式</p>
<ul>
<li>配置（推荐）：在 webpack.config.js 中配置</li>
<li>内联：在每个 import 语句中显式指定 loader<br>  <code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></li>
<li>CLI：在 shell 命令中指定它们<br>  <code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code></li>
</ul>
</li>
<li><p>loader 特性</p>
<ul>
<li>loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader</li>
<li>loader 可同步也可异步</li>
<li>loader 可以在 Node.js 环境运行</li>
<li>loader 能够接受查询参数</li>
<li>loader 可以使用 <code>opotions</code> 对象进行配置</li>
<li>可以将普通 npm 模块导出一个 loader</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack入门-入口与出口</title>
    <url>/2021/12/02/webpack%E5%85%A5%E9%97%A8-%E5%85%A5%E5%8F%A3%E4%B8%8E%E5%87%BA%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="入口及基础配置"><a href="#入口及基础配置" class="headerlink" title="入口及基础配置"></a>入口及基础配置</h2><ul>
<li>webpack 该用哪个模块作为构建依赖图的开始</li>
<li>在 <code>entry</code> 配置入口，可以指定一个或多个入口  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  entry<span class="token operator">:</span> <span class="token string">'./path/to/my/entry/file.js'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<span id="more"></span></li>
<li>单页面场景配置<ul>
<li>将应用入口和第三方库分离</li>
<li>可以使用 <code>CommonsChunkPlugin</code>  从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，<code>__webpack_require__()</code> 调用<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	app<span class="token operator">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>
	vendors<span class="token operator">:</span> <span class="token string">'./src/vendors.js'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>多页面场景配置<ul>
<li>不同页面入口分开配置，进入新页面时独立加载 html 和对应引用</li>
<li>可以使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	pageOne<span class="token operator">:</span> <span class="token string">'./src/pageOne/index.js'</span><span class="token punctuation">,</span>
	pageTwo<span class="token operator">:</span> <span class="token string">'./src/pageTwo/index.js'</span><span class="token punctuation">,</span>
	pageThree<span class="token operator">:</span> <span class="token string">'./src/pageThree/index.js'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="出口及基础配置"><a href="#出口及基础配置" class="headerlink" title="出口及基础配置"></a>出口及基础配置</h2><ul>
<li><p>webpack 输出 bundles 的目录及命名方式配置，默认为  <code>./dist</code></p>
</li>
<li><p><strong>可以指定多个入口，但只能有一个出口（output）</strong></p>
</li>
<li><p>在 <code>output</code> 字段配置：输出为一个对象，输出路径和文件名</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	filename<span class="token operator">:</span> <span class="token string">'my-first-webpack.bundle.js'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>对于多文件入口，使用占位符保持文件名正确</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	app<span class="token operator">:</span> <span class="token string">'./src/app.js'</span><span class="token punctuation">,</span>
	search<span class="token operator">:</span> <span class="token string">'./src/search.js'</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
	filename<span class="token operator">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>
	path<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/dist'</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 留空，并且在入口起点设置 <code>__webpack_public_path__</code></p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath

<span class="token comment">// 剩余的应用程序入口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2021年总结</title>
    <url>/2021/12/22/%E6%88%91%E7%9A%842021%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>
<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>
<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>
<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>
<h2 id="关于个人成长"><a href="#关于个人成长" class="headerlink" title="关于个人成长"></a>关于个人成长</h2><h3 id="番茄钟学习记录"><a href="#番茄钟学习记录" class="headerlink" title="番茄钟学习记录"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>
<p><img src="https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png"><br>每周的番茄钟学习记录</p>
<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>
<h3 id="从折腾工具到关注产出"><a href="#从折腾工具到关注产出" class="headerlink" title="从折腾工具到关注产出"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>
<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>
<h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><h3 id="极简主义和焦虑"><a href="#极简主义和焦虑" class="headerlink" title="极简主义和焦虑"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>
<ol>
<li><strong>如无必要，勿增实体</strong></li>
<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>
</ol>
<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>
<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>
<h2 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>
]]></content>
      <categories>
        <category>无限进步</category>
      </categories>
      <tags>
        <tag>复盘与总结</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数组方法总结</title>
    <url>/2021/12/23/JS-%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="数组基础操作"><a href="#数组基础操作" class="headerlink" title="数组基础操作"></a>数组基础操作</h2><ul>
<li>创建数组的方式有两种<ul>
<li><code>new Array()</code></li>
<li><code>[]</code></li>
</ul>
</li>
<li>添加数组<ul>
<li>尾部添加：<code>array.push(item)</code></li>
<li>头部添加：<code>array.unshift(item)</code></li>
<li>直接添加：<code>array[index] = item</code></li>
<li>指定索引位置添加：<code>array.splice(index, 0, item)</code></li>
</ul>
</li>
<li>删除数组<ul>
<li>尾部删除：<code>array.pop(item)</code></li>
<li>头部删除：<code>array.shift(item)</code></li>
<li>指定索引位置删除：<code>array.splice(index, 1)</code></li>
</ul>
</li>
<li>修改数组<ul>
<li>直接通过索引修改：<code>array[index] = item</code></li>
<li>修改指定位置的某一个元素：<code>array.splice(index, 1, item)</code></li>
</ul>
</li>
<li>获取数组长度：<code>array.length</code> （最大的数字索引值 + 1）</li>
</ul>
<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><h3 id="分割与组合方法"><a href="#分割与组合方法" class="headerlink" title="分割与组合方法"></a>分割与组合方法</h3><ul>
<li><p>splice() 方法</p>
<ul>
<li><code>array.splice(index [, deleteCount, item1, item2])</code> 从索引 <code>index</code> 的位置开始删除 <code>deleteCount</code> 个元素，并在当前位置插入 <code>item1, item2</code> 元素，最后返回被处理后的元素数组</li>
<li>常用应用场景<ul>
<li><code>array.splice(index, 1)</code> 从索引位置删除一个元素</li>
<li><code>array.splice(index, 0, item)</code> 在索引位置添加一个元素</li>
</ul>
</li>
</ul>
</li>
<li><p>slice() 方法</p>
<ul>
<li><code>array.slice([start], [end])</code> 创建<strong>一个新数组</strong>，将索引从 <code>start</code> 到 <code>end</code> 的元素复制到新的数组，可以传入负</li>
<li>常用应用场景<ul>
<li><code>array.slice()</code> 获取一个新的数组副本（不影响原数组）</li>
</ul>
</li>
</ul>
</li>
<li><p>concat() 方法</p>
<ul>
<li><code>array.concat(arg1, arg2...)</code> 创建<strong>一个新数组</strong>，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值</li>
</ul>
</li>
</ul>
<h3 id="循环数组方法"><a href="#循环数组方法" class="headerlink" title="循环数组方法"></a>循环数组方法</h3><ul>
<li><p><code>for (let i = 0; i &lt; array.length; i++)</code> 速度最快，可以兼容旧版浏览器</p>
</li>
<li><p><code>for (let item of array)</code> 只能获取数组 item</p>
</li>
<li><p><code>for (let key in array)</code> 不建议使用此方法循环数组</p>
<ul>
<li><code>for in</code> 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢</li>
<li><code>for in</code> 会循环数组的所有属性，在处理“类数组”是没有必要的</li>
</ul>
</li>
<li><p>forEach() 方法</p>
<ul>
<li><code>array.forEach((item, index, array) =&gt; &#123;&#125;)</code> 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组</li>
<li>注意 <strong>forEach 没有返回值</strong></li>
</ul>
</li>
</ul>
<h3 id="查找数组方法"><a href="#查找数组方法" class="headerlink" title="查找数组方法"></a>查找数组方法</h3><ul>
<li><p>indexOf() / lastIndexOf() 方法</p>
<ul>
<li><code>array.indexOf(item, from)</code> 从索引 from 开始查找 item，如果没有找到则返回 -1</li>
<li><code>array.lastIndexOf(item, from)</code> 从索引 from 开始查找 item，查找方向为<strong>从右至左</strong>,如果没有找到则返回 -1</li>
</ul>
</li>
<li><p>includes() 方法</p>
<ul>
<li><code>array.indludes(item, from)</code> 从索引 from 开始查找 item，如果没有找到则<strong>返回 false</strong></li>
<li>检查是否包含某个元素<strong>优先使用 includes()</strong></li>
<li>注：includes() 能够正确识别 NAN</li>
</ul>
</li>
<li><p>find() / findIndex() 方法</p>
<ul>
<li>如果返回为 true，则返回 item 并<strong>停止迭代</strong></li>
<li>如果返回为 false，则返回 undefined</li>
<li>使用场景<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>findIndex() 方法返回的是 index ，其余和 find() 方法没有区别</li>
</ul>
</li>
<li><p>filter() 方法</p>
<ul>
<li>返回<strong>所有匹配元素组成的数组</strong><ul>
<li>如果返回为 true，则 item 被放到结果数据，迭代继续直到完成</li>
<li>如果什么都没有找到则返回空数组</li>
</ul>
</li>
<li>使用示例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 返回结果为数组</span>
<span class="token keyword">let</span> results <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	item<span class="token punctuation">.</span>id <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="转换数组方法"><a href="#转换数组方法" class="headerlink" title="转换数组方法"></a>转换数组方法</h3><ul>
<li><p>map() 方法</p>
<ul>
<li>对每个元素都调用函数，<strong>返回一个新的数组</strong></li>
<li>使用示例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>sort() 方法</p>
<ul>
<li>对当前数组进行排序（<strong>没有生成新数组</strong>）</li>
<li>默认使用字符串排序，如果是<strong>数字排序需要指定参考函数</strong></li>
<li>返回为负数，按照升序排列（<strong>负数表示小于</strong>）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>返回为正数，按照降序排列（上述例子相反，<strong>正数表示大于</strong>）</li>
</ul>
</li>
<li><p>reverse() 方法</p>
<ul>
<li>颠倒元素顺序</li>
</ul>
</li>
<li><p>split() / join() 方法</p>
<ul>
<li><code>array.split(delim, [length])</code> 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度</li>
<li><code>array.join(delim)</code> 使用分隔符 delim 将数组组成字符串</li>
</ul>
</li>
<li><p>reduce() / reduceRight() 方法</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>initial<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>参数含义<ul>
<li>accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代</li>
<li>item、index、array：数组元素、索引、数组本身</li>
</ul>
</li>
<li>使用示例：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> curent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+</span> current<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// result = 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议<strong>始终指定初始值</strong></li>
<li><code>array.reduceRight()</code> 的遍历方向为从右至左，其余和 reduce 相同</li>
</ul>
</li>
<li><p>some() / every() 方法</p>
<ul>
<li><code>array.some(fn)</code> 类似于 <code>||</code> ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代</li>
<li><code>array.every(fn)</code> 类似于 <code>&amp;&amp;</code> ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false</li>
</ul>
</li>
<li><p>fill() 方法</p>
<ul>
<li><code>array.fill(value, start, end)</code>  从索引 start 到 end，用重复的 value 填充数组</li>
</ul>
</li>
</ul>
<h3 id="判断数组方法"><a href="#判断数组方法" class="headerlink" title="判断数组方法"></a>判断数组方法</h3><ul>
<li><p><code>Object.prototype.toString.call()</code></p>
<ul>
<li>每一个继承 Object 对象都有 toString 方法，<strong>如果 toString 方法没有被重写的话，会返回 <code>[Object type]</code></strong>, type 是对象的类型</li>
<li>常用于判断浏览器内置对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// "[object Array]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// "[object Number]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"wujie"</span><span class="token punctuation">)</span> <span class="token comment">// "[object String]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// "[object null]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// "[object undefined]"</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// "[object Function]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p><code>instanceof</code></p>
<ul>
<li>内部机制是通过判断对象的原型链能否找到类型的 prototype</li>
<li>如果能够找到 Array 原型，则判断为数组 <code>instanceof Array</code></li>
<li><code>instanceof</code> 只能判断对象类型，<strong>不能判断原始类型</strong>，并且所有对象类型 <code>instanceof Object</code> 都是 <code>true</code></li>
</ul>
</li>
<li><p><code>Array.isArray()</code></p>
<ul>
<li>优于 <code>instancof</code>，<strong>因为 <code>Array.isArray</code> 可以检测出 iframs</strong></li>
<li>可以通过 <code>Object.prototype.toString.call()</code> 实现 isArray() 方法  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Array<span class="token punctuation">.</span><span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Array]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数组方法注意事项"><a href="#数组方法注意事项" class="headerlink" title="数组方法注意事项"></a>数组方法注意事项</h3></li>
</ul>
</li>
<li><p><code>sort</code>、<code>reverse</code>、<code>splice</code> 方法修改的是数组本身</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 继承实现方式整理</title>
    <url>/2021/12/24/JS-%E7%BB%A7%E6%89%BF%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><ul>
<li>将子类的原型对象指向父类的实例</li>
<li>优点：继承了父类的模板，又继承了父类的原型对象</li>
<li>缺点：<ul>
<li>无法实现多继承(因为已经指定了原型对象了)</li>
<li>父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</li>
<li>创建子类时，无法向父类构造函数传参数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		name<span class="token operator">:</span> <span class="token string">"Parent"</span><span class="token punctuation">,</span>
		age<span class="token operator">:</span> <span class="token number">18</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将子类的原型对象指向父类的实例</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>info<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"M"</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'Parent', age: 18, gender: 'M' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><ul>
<li>在子类构造函数内部使用 <code>apply</code> 或 <code>call</code> 来调用父类构造函数，复制父类的实例属性给子类</li>
<li>优点：<ul>
<li>解决了原型链继承中子类实例共享父类引用对象的问题，实现<strong>多继承</strong></li>
<li>创建子类实例时，可以向父类传递参数</li>
</ul>
</li>
<li>缺点：<ul>
<li>构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token punctuation">,</span>
    hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"football"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 继承父类属性</span>
  <span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 继承父类方法</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"wujie1"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>info<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"soccer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"wujie2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><ul>
<li>使用<strong>原型链继承</strong>保证子类继承父类<strong>原型</strong>的属性和方法</li>
<li>使用<strong>构造继承</strong>保证子类继承父类<strong>实例</strong>的属性和方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		name<span class="token punctuation">,</span>
		hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"football"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 继承父类属性</span>
	<span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 继承父类方法</span>
<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"wujie1"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child1<span class="token punctuation">.</span>info<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"soccer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"wujie2"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><ul>
<li>通过拷贝对象引用方式实现，但可能导致对象被修改<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> <span class="token string">"parent"</span><span class="token punctuation">,</span>
	hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"football"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"child"</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"soccer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// child</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'football', 'basketball', 'soccer' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><ul>
<li>通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	name<span class="token operator">:</span> <span class="token string">"parent"</span><span class="token punctuation">,</span>
	hobby<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"football"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>
	clone<span class="token punctuation">.</span><span class="token function-variable function">getHobby</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"child"</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"soccer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// child</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'football', 'basketball', 'soccer' ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'football', 'basketball', 'soccer' ]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h2><ul>
<li>将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解</li>
<li>优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"parent"</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"football"</span><span class="token punctuation">,</span> <span class="token string">"basketball"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getHobby</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hobby<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>friend <span class="token operator">=</span> <span class="token string">"child friends"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
	child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">clone</span><span class="token punctuation">(</span>Parent<span class="token punctuation">,</span> Child<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Child</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getFriend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>friend<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getHobby</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'football', 'basketball' ]</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getFriend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// child friend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h2><ul>
<li>通过 <code>extends</code>、<code>super</code> 实现<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数据类型基础梳理</title>
    <url>/2021/12/28/JS-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%9F%BA%E7%A1%80%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h2 id="JS-的数据类型基础"><a href="#JS-的数据类型基础" class="headerlink" title="JS 的数据类型基础"></a>JS 的数据类型基础</h2><ul>
<li><p>JS 中数据类型分为两大类：基础数据类型，引用数据类型</p>
</li>
<li><p>基础数据类型有 7 种，分别为：</p>
<ul>
<li>Number 类型</li>
<li>String 类型</li>
<li>Boolean 类型</li>
<li>Null：“无” “空” “不存在”</li>
<li>Undefined：已被声明但未被赋值</li>
<li>Symbol：用于对象唯一标识符</li>
<li>BigInt 类型：表示大于或小于 2^53-1 的数字</li>
</ul>
</li>
<li><p>引用数据类型： Object 为引用数据类型，还有其他子类型，如：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code></p>
</li>
<li><p>基础数据类型存储在<strong>栈内存</strong>，被引用或者拷贝的时候，会创建一个完全相等的变量</p>
</li>
<li><p>引用类型存储在<strong>堆内存</strong>，存储的是地址，多个引用指向同一个地址</p>
</li>
</ul>
<h2 id="JS-数据类型判断方式"><a href="#JS-数据类型判断方式" class="headerlink" title="JS 数据类型判断方式"></a>JS 数据类型判断方式</h2><ul>
<li><p>typeof 判断数据类型</p>
<ul>
<li>typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）</li>
<li><code>typeof null</code> 结果是 object 是 JS 早期错误，为兼容而保留</li>
<li><code>typeof alert</code> alert 在 JS 中是一个函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "undefined"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "number"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">10n</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "bigint"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"wujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "string"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "symbol"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Math<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"  (1)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object"  (2)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "function"  (3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>instanceof 判断数据类型</p>
<ul>
<li>通过判断对象原型链上的对象类型，来推断新对象的数据类型</li>
<li>适用于判断引用数据类型，但不适合基础数据类型判断</li>
<li>实现 instanceof 封装代码示例<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 先使用 typef 判断，如果不是引用数据类型则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> left <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,</span>
    <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 没有找到相同原型对象则返回 false</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 找到相同的原型对象才返回 true</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> right<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> Number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>Object.prototype.toString 方法</p>
<ul>
<li>对象的原型方法，可以统一返回格式为 <code>[object Xxx]</code> 的字符串（注意 Xxx 第一个字母大写）</li>
<li>对于 Object 对象，可以直接调用，其他对象需要通过 call 调用<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object String]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Boolean]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Null]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Undefined]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">wujiel</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object RegExp]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Date]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>全局通用的类型判断方法：可以通过 <code>typeof</code> +<code> Object.prototype.string.call()</code> 来实现</p>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>

  <span class="token comment">// 基础类型直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> type<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 引用类型 toString 判断,通过正则表达式过滤结果</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span>
    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\[object (\S+)]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$1"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="JS-数据类型转换"><a href="#JS-数据类型转换" class="headerlink" title="JS 数据类型转换"></a>JS 数据类型转换</h2><ul>
<li>JS 的数据类型转换分为：强制类型转换，隐式类型转换</li>
</ul>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul>
<li><p>通过 <code>Number() parseInt() parseFloat() toString() String Boolean()</code> 方法实现的数据转换</p>
</li>
<li><p><code>Number()</code> 类型转换规则</p>
<ul>
<li>数字，返回自身</li>
<li>Boolean，false 转换为 0，true 转换为 1</li>
<li>null 转换为 0</li>
<li>undefined 转换为 NaN</li>
<li>Symbol 抛出异常</li>
<li>对象，使用 <code>Object</code> 转换规则</li>
<li>字符串<ul>
<li>如果只包含数字，转换为十进制数字</li>
<li>如果包含有效浮点格式转化为浮点数</li>
<li>空字符串转换为 0</li>
<li>以上三种之外的转换为 NaN</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Boolean()</code> 类型装转换规则</p>
<ul>
<li>除了 undefined、null、false、”” 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true</li>
</ul>
</li>
</ul>
<h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><ul>
<li><p>逻辑运算操作符（&amp;&amp; || !），运算符（+ - * /），关系操作符（&gt; &lt; &gt;= &lt;=），相等运算符（<code>==</code>），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换</p>
</li>
<li><p><code>==</code> 隐式转换规则</p>
<ul>
<li>如果类型相同，无须转换</li>
<li>如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false</li>
<li>如果其中一个是 Symbol 类型，那么返回 false</li>
<li>两个如果为 string 和 number 类型，那么就会将 string 转换为 number</li>
<li>如果一个操作值是 boolean，那么转换 boolean 为 number</li>
<li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）</li>
</ul>
</li>
<li><p><code>+</code> 隐式转换规则</p>
<ul>
<li>其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接</li>
<li>其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算</li>
<li>其中一个是字符串、一个是数字，则按照字符串规则进行拼接</li>
<li>示例代码<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1&#123;&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1[object, object]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="Object-隐式转换规则"><a href="#Object-隐式转换规则" class="headerlink" title="Object 隐式转换规则"></a>Object 隐式转换规则</h3><ul>
<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>
<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>
<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>
<li>以上三种没有转换成功则报错</li>
<li>示例代码<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 优先调用 Symbol.toPrimitive 方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1[object Object] 调用 toString 方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11,2,,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 什么是类数组</title>
    <url>/2022/01/08/JS-%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="对象是类数组常见情况"><a href="#对象是类数组常见情况" class="headerlink" title="对象是类数组常见情况"></a>对象是类数组常见情况</h2><ul>
<li><p>对象是类数组的情况</p>
<ul>
<li>函数参数对象 arguments</li>
<li>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</li>
<li>用 <code>querySelector</code> 获得的 NodeList</li>
</ul>
</li>
<li><p>函数参数对象 arguments 特点</p>
<ul>
<li><code>Object.prototype.toString.call</code> 返回 <code>[object arguments]</code>，代表不是数组</li>
<li>具有 length 属性</li>
<li>callee 属性：获取当前的函数</li>
</ul>
</li>
<li><p>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</p>
<ul>
<li><code>Object.prototype.toString.call</code> 返回 <code>[object HTMLFormElement]</code>，代表不是数组</li>
<li>HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类</li>
<li>DOM 更新时会实时更新</li>
</ul>
</li>
<li><p>用 <code>querySelector</code> 获得的 NodeList</p>
<ul>
<li><code>Object.prototype.toString.call</code> 返回 <code>[object NodeList]</code>，代表不是数组</li>
<li>实时更新</li>
</ul>
</li>
</ul>
<h2 id="类数组应用场景"><a href="#类数组应用场景" class="headerlink" title="类数组应用场景"></a>类数组应用场景</h2><ul>
<li>遍历函数参数</li>
<li>定义链接字符串函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">myConcat</span><span class="token punctuation">(</span><span class="token parameter">separa</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>separa<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myConcat</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>函数间传递参数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 通过 apply 方法传递函数参数</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="类数组转化为数组的方式"><a href="#类数组转化为数组的方式" class="headerlink" title="类数组转化为数组的方式"></a>类数组转化为数组的方式</h2><ul>
<li>借用数组方法转化为数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token number">0</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>
	<span class="token number">1</span><span class="token operator">:</span> <span class="token string">"script"</span><span class="token punctuation">,</span>
	length<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 借用 push 方法</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token string">"wujie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; '0': 'java', '1': 'script', '2': 'wujie', length: 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>借用 ES6 展开运算符或 <code>Array.from</code> 转化为数组<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果</span>
	<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> sum <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>你不知道的 JS 学习笔记：作用域和闭包</title>
    <url>/2022/02/04/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h2 id="第一章：作用域是什么"><a href="#第一章：作用域是什么" class="headerlink" title="第一章：作用域是什么"></a>第一章：作用域是什么</h2><h3 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h3><ul>
<li>编译过程<ul>
<li>分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元<ul>
<li>比如： <code>let a = 2;</code> 被分解为：<code>let、a、=、2、；</code> 5 个词法单元</li>
<li>分词：无状态解析规则，词法分析：有状态解析规则</li>
</ul>
</li>
<li>解析 / 语法分析：词法单元 -&gt; 抽象语法树（Abstract Syntax Tree，AST）</li>
<li>代码生成：AST -&gt; 可执行代码</li>
</ul>
</li>
<li>JS 代码在执行前都需要编译</li>
</ul>
<h3 id="1-2-理解作用域"><a href="#1-2-理解作用域" class="headerlink" title="1.2 理解作用域"></a>1.2 理解作用域</h3><ul>
<li>编译过程重要参与对象<ul>
<li>引擎：负责 JS 编译和执行过程</li>
<li>编译器：负责编译过程</li>
<li>作用域：<strong>收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限</strong></li>
</ul>
</li>
<li>变量赋值的两个操作<ul>
<li>在当前作用域中声明一个变量（如果之前存在则忽略）</li>
<li>运行时引擎在作用域中查找该变量，找到了就赋值</li>
</ul>
</li>
<li>编译器基础术语<ul>
<li>赋值操作使用 LHS，获取目标变量的值使用 RHS<ul>
<li>LHS：从左侧查找，即：查找某个容器本身<ul>
<li>比如：<code>a = 2</code>，需要找到为 = 2 赋值的目标</li>
</ul>
</li>
<li>RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）<ul>
<li>比如：<code>console.log(a);</code>，这里 a 没有被赋值，但需要找到 a 对应的 value</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-3-作用域嵌套"><a href="#1-3-作用域嵌套" class="headerlink" title="1.3 作用域嵌套"></a>1.3 作用域嵌套</h3><ul>
<li>在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止</li>
</ul>
<h3 id="1-4-异常"><a href="#1-4-异常" class="headerlink" title="1.4 异常"></a>1.4 异常</h3><ul>
<li>如果在 RHS 在任何作用域都找不到，会抛出 <code>ReferenceError</code> 异常</li>
<li>非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量</li>
<li><strong>严格模式禁止自动隐式或自动创建全局变量</strong></li>
<li>如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 <code>TypeError</code> 异常</li>
<li><code>ReferenceError</code> 说明作用域判断异常，<code>TypeError</code> 说明作用域判断成功但对值的操作失败了</li>
</ul>
<h2 id="第二章：词法作用域"><a href="#第二章：词法作用域" class="headerlink" title="第二章：词法作用域"></a>第二章：词法作用域</h2><h3 id="2-1-词法阶段"><a href="#2-1-词法阶段" class="headerlink" title="2.1 词法阶段"></a>2.1 词法阶段</h3><ul>
<li>词法作用域由变量和块作用于写在哪里决定</li>
<li>作用域查找会在匹配第一个标识符时停止</li>
</ul>
<h3 id="2-2-欺骗词法"><a href="#2-2-欺骗词法" class="headerlink" title="2.2 欺骗词法"></a>2.2 欺骗词法</h3><ul>
<li>欺骗词法作用域会导致性能下降</li>
<li><code>eval([str]) </code>函数：<ul>
<li>通常被用来执行动态创建的代码</li>
<li>字符串作为参数，内容视未好行书写时就存在于程序中的位置</li>
<li>可以修改词法作用域</li>
</ul>
</li>
<li>with 关键字<ul>
<li>重复引用同一个对象中多个属性的快捷方式</li>
<li>将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域</li>
<li>非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
b<span class="token operator">:</span> <span class="token number">2</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>with 根据传递的对象凭空创建了一个全新的词法作用域</li>
</ul>
</li>
</ul>
<h3 id="2-3-性能"><a href="#2-3-性能" class="headerlink" title="2.3 性能"></a>2.3 性能</h3><ul>
<li>JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的</li>
</ul>
<h2 id="第三章：函数作用域和块作用域"><a href="#第三章：函数作用域和块作用域" class="headerlink" title="第三章：函数作用域和块作用域"></a>第三章：函数作用域和块作用域</h2><h3 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h3><ul>
<li>函数的全部变量在函数内部都可以被访问，从外部则无法访问</li>
</ul>
<h3 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h3><ul>
<li>最小特权原则：软件设计中，应该<strong>最小限度</strong>的暴露必要的内容，比如内部函数或者内部类</li>
<li>隐藏作用域的变量和函数可以避免同名标识符的冲突<ul>
<li>避免全局变量的使用</li>
<li>全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性</li>
<li>模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中</li>
</ul>
</li>
</ul>
<h3 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h3><ul>
<li>函数表达式<ul>
<li>声明函数的 function 不在第一个位置<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

 <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域</li>
</ul>
</li>
<li>匿名函数：省略函数名称  <pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>具名函数：声明函数名称</li>
<li>立即执行函数表达式（IIFE，Immediately Invoked Function Expression）<ul>
<li>函数表达式末尾加上一个  <code>()</code> 让函数立即执行</li>
<li>可以当作函数调用并传递参数<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

 <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> global<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="3-4-块作用域"><a href="#3-4-块作用域" class="headerlink" title="3.4 块作用域"></a>3.4 块作用域</h3><ul>
<li>使用 var 申明变量会属于外部作用域</li>
<li>try … catch 的 catch 部分会创建块作用域</li>
<li>let 关键字<ul>
<li>将变量绑定到所在的作用域中，外部变量无法访问</li>
<li>let 声明的代码在 let 之前无法被访问<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>const 关键字<ul>
<li>可以创建块作用域变量，但值是固定的</li>
</ul>
</li>
</ul>
<h2 id="第四章：提升"><a href="#第四章：提升" class="headerlink" title="第四章：提升"></a>第四章：提升</h2><ul>
<li><code>var a = 2;</code> ，<code>var 2</code> 属于编译阶段任务，<code>a = 2</code> 属于解释阶段任务</li>
<li>提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端</li>
<li>var 的变量声明会被提升</li>
<li>函数的声明会被提升，<strong>函数表达式的声明不会被提升</strong><ul>
<li>因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError</li>
</ul>
</li>
</ul>
<h2 id="第五章：作用域闭包"><a href="#第五章：作用域闭包" class="headerlink" title="第五章：作用域闭包"></a>第五章：作用域闭包</h2><ul>
<li>当函数可以记住并访问所在的词法作用域时，就产生了<strong>闭包</strong>，即使函数是在当前词法作用域之外执行  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递</li>
<li><strong>在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包</strong></li>
<li><strong>函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包</strong></li>
<li>闭包使得函数可以继续访问定义时对词法作用域</li>
</ul>
</li>
<li>闭包应用示例：setTimeout  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">"hello message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用</li>
</ul>
</li>
<li>循环和闭包<ul>
<li>循环输出问题  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>以上代码会连续输出 5 个 6</li>
<li><strong>延迟函数的回调会在循环结束时执行</strong>，即使延迟时间为 0</li>
<li>问题原因：<strong>i 是共享的全局作用域</strong>，所以即使循环了 5 次，也相当于只有一个变量</li>
<li>解决方案<ul>
<li>使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>使用 let 关键字<ul>
<li>将一个块转换成一个可以被关闭的作用域<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>模块<ul>
<li>返回一个含有属性引用的对象将函数传递到词发作用域外部</li>
<li>类似 React 和 Vue 的 hook 模式<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> someThing <span class="token operator">=</span> <span class="token string">"wujie"</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">getSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> someThing<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    getSomeThing<span class="token operator">:</span> getSomeThing<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">getSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// wujie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>模块模式的两个必备条件<ul>
<li>必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）</li>
<li>封闭函数必须返回至少一个内部函数（闭包）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>你不知道的 JS 学习笔记：this和对象原型</title>
    <url>/2022/02/05/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-JS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86-this%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="第一章：关于-this"><a href="#第一章：关于-this" class="headerlink" title="第一章：关于 this"></a>第一章：关于 this</h2><ul>
<li>误解<ul>
<li>this 不是指向函数自身</li>
<li>this 在任何情况下都不指向函数的词法作用域</li>
</ul>
</li>
<li>this 是函数被调用时发生的绑定，<strong>指向什么完全取决于在哪里被调用</strong></li>
</ul>
<h2 id="第二章-this-全面解析"><a href="#第二章-this-全面解析" class="headerlink" title="第二章 this 全面解析"></a>第二章 this 全面解析</h2><h3 id="2-1-调用位置"><a href="#2-1-调用位置" class="headerlink" title="2.1 调用位置"></a>2.1 调用位置</h3><ul>
<li>确认函数的调用位置的方式是：分析调用栈</li>
</ul>
<h3 id="2-2-绑定规则"><a href="#2-2-绑定规则" class="headerlink" title="2.2 绑定规则"></a>2.2 绑定规则</h3><ul>
<li>默认绑定<ul>
<li>在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined</li>
<li>非严格模式示例<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

 <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>隐式绑定<ul>
<li>当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象</li>
<li>示例代码<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
foo<span class="token operator">:</span> foo
 <span class="token punctuation">&#125;</span>

 obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>隐式丢失：丢失隐式绑定对象，从而使用默认绑定</li>
<li>非严格模式的隐式丢失示例<ul>
<li>此时 bar 引用的 foo 函数本身<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>

 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>

 <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>传入回调参数是同样会存在隐式丢失问题<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">function</span> <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// fn 引用的就是 foo</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
foo<span class="token operator">:</span> foo<span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>

 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>

 <span class="token function">doFoo</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>显式绑定<ul>
<li>使用 call 函数或者 apply 函数实现</li>
<li>第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this</li>
<li>call 函数示例<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象<ul>
<li>应用：创建包裹函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> something<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> something<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> something<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> something<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar 是一个新的函数，this 指向 obj</span>

 <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 3</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
<li>new 绑定<ul>
<li>new 调用函数（发生构造函数调用）过程<ul>
<li>创建一个全新的对象</li>
<li>新对象被执行<code>[[原型]]</code>连接</li>
<li>新对象被绑定到函数调用的 this</li>
<li>如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象</li>
</ul>
</li>
<li>示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="2-3-优先级"><a href="#2-3-优先级" class="headerlink" title="2.3 优先级"></a>2.3 优先级</h3><ul>
<li>显式绑定优先级 &gt; 隐式绑定</li>
<li>new 绑定优先级 &gt; 隐式绑定</li>
<li><strong>判断 this 规则的方式</strong><ul>
<li>是否在 new 中调用，是的话 this 绑定的是新创建的对象</li>
<li>是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象</li>
<li>是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象</li>
<li>以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象</li>
<li><img src="https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png"></li>
</ul>
</li>
</ul>
<h3 id="2-4-绑定例外"><a href="#2-4-绑定例外" class="headerlink" title="2.4 绑定例外"></a>2.4 绑定例外</h3><ul>
<li>如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定<ul>
<li>应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, b: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token comment">// 数组展开为参数</span>
 <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a: 2, b: 3</span>

 <span class="token comment">// 使用 bind 进行柯里化</span>
 <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a: 2, b: 5</span>
 <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>可以使用 <code>Object.create(null)</code> 创建空对象（不会创建 <code>Object.prototype</code>，比 <code>&#123;&#125;</code> 更空），称作 DMZ 对象</li>
</ul>
</li>
<li>间接引用情况会导致绑定例外<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
 <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
 <span class="token comment">// 注意：返回值是目标函数的引用，相当于直接调用 foo 函数</span>
 <span class="token punctuation">(</span>p<span class="token punctuation">.</span>foo <span class="token operator">=</span> o<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>softBind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">softBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取所用 curried 参数</span>
  <span class="token keyword">var</span> curried <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">bound</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>
	  <span class="token operator">!</span><span class="token keyword">this</span> <span class="token operator">||</span> <span class="token keyword">this</span> <span class="token operator">===</span> <span class="token punctuation">(</span>window <span class="token operator">||</span> global<span class="token punctuation">)</span> <span class="token operator">?</span> obj <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
	  curried<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>curried<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
	<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  bound<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> bound<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h3 id="2-5-this-词法"><a href="#2-5-this-词法" class="headerlink" title="2.5 this 词法"></a>2.5 this 词法</h3><ul>
<li><strong>箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定</strong><ul>
<li>箭头函数会继承外层函数调用的 this 绑定</li>
<li>内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 注意：this 继承自 foo</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
 <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="第三章：对象"><a href="#第三章：对象" class="headerlink" title="第三章：对象"></a>第三章：对象</h2><h3 id="3-1-对象"><a href="#3-1-对象" class="headerlink" title="3.1 对象"></a>3.1 对象</h3><ul>
<li>可以通过 <code>&#123;&#125;</code> 或者 new 关键字声明对象</li>
</ul>
<h3 id="3-2-类型"><a href="#3-2-类型" class="headerlink" title="3.2 类型"></a>3.2 类型</h3><ul>
<li>内置对象<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
</ul>
</li>
<li>JS 会自动把字面量转换为一个对象<ul>
<li>比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法</li>
</ul>
</li>
<li>null 、undefined 只有文字形式</li>
<li>Date 只有构造形式（对象）</li>
<li>Object、Array、Function、RegExp，只有构造形式，都是对象</li>
</ul>
<h3 id="3-3-内容"><a href="#3-3-内容" class="headerlink" title="3.3 内容"></a>3.3 内容</h3><ul>
<li>可以通过 <code>.</code> 或者 <code>[]</code> 来访问对象中的属性，</li>
<li>属性名都是字符串，所以传入的值会被自动转化为字符串</li>
<li>可计算属性名称<ul>
<li>使用 [] 包裹的表达式作为属性名</li>
<li>常用于 Symbol<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> MyObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>Something<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"wujieli"</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>复制对象<ul>
<li>浅拷贝<ul>
<li>引用类型还是指向原来的对象</li>
<li><code>JSON.parse(JSON.stringify(someObj))</code> 和 <code>Object.assign()</code> 可以实现浅拷贝</li>
</ul>
</li>
<li>深拷贝<ul>
<li>引用类型复制一套独立的</li>
</ul>
</li>
</ul>
</li>
<li>属性操作符（数据描述符）<ul>
<li>除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）<ul>
<li>writable 为 false 则不可修改</li>
<li>configurable 为 false 则不可以通过 <code>Object.defineProperty()</code> 修改属性描述符，不能删除属性</li>
<li>enumerable 为 false，属性不会出现在循环枚举中</li>
</ul>
</li>
<li>Object.defineProperty()： 添加新属性或者修改已有属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
value<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>对象不变性<ul>
<li>通过 <code>writable: false</code> 和 <code>configurable: false</code> 可以创建一个常量属性，不可修改、重定义、删除</li>
<li>Object.preventExtensions( obj ) ：禁止添加新属性</li>
<li>Object.seal( obj ) ：创建一个密封对象，在现有对象调用 <code>Object.preventExtensions</code> 且 <code>configurable: false</code></li>
<li>Object.freeze( obj ) ：现有对象调用 <code>Object.seal</code> 且 <code>writable: false</code></li>
</ul>
</li>
<li><code>[[get]]</code> 属性<ul>
<li>在对象中查找同名属性，找到了就返回</li>
<li>如果没找到就根据原型链找，找不到则返回 undefined</li>
</ul>
</li>
<li><code>[[put]]</code> 属性<ul>
<li>属性是否是访问描述符，如果是并存在 setter 就调用 setter</li>
<li>writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常</li>
<li>以上都不是，将值设置为该属性的值</li>
</ul>
</li>
<li>访问描述符<ul>
<li>通过 getter 获取属性，通过 setter 设置属性，通常成对出现</li>
<li>访问描述符只有：set、get、configurable、enumerable 属性</li>
</ul>
</li>
<li>属性存在性<ul>
<li><code>[属性名称]</code> in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链</li>
<li>Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链</li>
</ul>
</li>
</ul>
<h3 id="3-4-遍历"><a href="#3-4-遍历" class="headerlink" title="3.4 遍历"></a>3.4 遍历</h3><ul>
<li>for…in 循环：遍历对象可枚举属性，包括原型链</li>
<li>for…of 循环：循环遍历对象的所有 value<ul>
<li>向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值</li>
<li>数组内置 <code>@@iterator</code> 返回迭代器对象的函数</li>
<li>普通对象没有 <code>@@terator</code> 目的是为了避免影响未来对象类型</li>
</ul>
</li>
</ul>
<h2 id="第四章：混合对象“类”"><a href="#第四章：混合对象“类”" class="headerlink" title="第四章：混合对象“类”"></a>第四章：混合对象“类”</h2><h3 id="4-1-类理论"><a href="#4-1-类理论" class="headerlink" title="4.1 类理论"></a>4.1 类理论</h3><ul>
<li>数据及对数据的操作应该封装打包作为数据结构</li>
<li>使用<strong>类（class）</strong>对数据结构进行分类</li>
<li>类的核心概念<ul>
<li>实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同</li>
<li>继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法</li>
<li>多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为</li>
</ul>
</li>
</ul>
<h3 id="4-2-类的机制"><a href="#4-2-类的机制" class="headerlink" title="4.2 类的机制"></a>4.2 类的机制</h3><ul>
<li>如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例</li>
<li>构造函数：<ul>
<li>用于构造类实例，一个特殊的类方法，通常和类同名</li>
<li>返回一个对象（即：类实例）</li>
</ul>
</li>
</ul>
<h3 id="4-3-类的继承"><a href="#4-3-类的继承" class="headerlink" title="4.3 类的继承"></a>4.3 类的继承</h3><ul>
<li>子类和父类是完全不同的类，子类会包含<strong>父类原始行为的副本</strong>，但也可以重复父类的行为甚至定义新的行为</li>
<li>多态：<ul>
<li>子类可以重写父类方法</li>
<li>继承链中不同层次的方法名可以被多次定义</li>
</ul>
</li>
<li>子类可以相对引用它继承的父类，这种相对引用称为 super</li>
<li>JS 自身不提供多重继承</li>
</ul>
<h3 id="4-4-混入"><a href="#4-4-混入" class="headerlink" title="4.4 混入"></a>4.4 混入</h3><ul>
<li>JS 中对象没有自动复制的行为</li>
<li>显式混入<ul>
<li>如果子对象中不存在对应属性则复制父亲对象属性<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span><span class="token parameter">souceObj<span class="token punctuation">,</span> targetObj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> souceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 只会在不存在的情况下复制</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> targetObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> souceObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">return</span> targetObj<span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

 <span class="token keyword">let</span> Vehicle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
engines<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>

<span class="token function-variable function">ignition</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发动引擎！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function-variable function">drive</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"启动！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 <span class="token keyword">let</span> Car <span class="token operator">=</span> <span class="token function">mixin</span><span class="token punctuation">(</span>Vehicle<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
wheels<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>

<span class="token function-variable function">drive</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显式多态</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">启动</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>wheels<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">个轮子的这辆车</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Car<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>显示混入的变体：寄生继承<ul>
<li>先通过潜拷贝获取父对象，再添加新的方法</li>
</ul>
</li>
</ul>
</li>
<li>隐式混入<ul>
<li>通过 <code>call(this)</code> 方法把父对象方法绑定到子对象</li>
</ul>
</li>
<li>尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患</li>
</ul>
<h2 id="第五章：原型"><a href="#第五章：原型" class="headerlink" title="第五章：原型"></a>第五章：原型</h2><h3 id="5-1-Prototype"><a href="#5-1-Prototype" class="headerlink" title="5.1 [[Prototype]]"></a>5.1 [[Prototype]]</h3><ul>
<li><code>[[Prototype]]</code>：JS 对象的内置属性，是对于其他对象的引用</li>
<li>对于属性查找操作（如：<code>[[Get]]</code>，for…in，in），<strong>如果在对象本身找不到需要的属性，就通过 <code>[[Prototype]]</code> 访问对象的原型链向上查找</strong>，找不到就返回 undefined</li>
<li>所有普通的 <code>[[Prototype]]</code> 最终都会指向内置的 Object.prototype</li>
<li>原型链 = <code>[[Prototype]]</code> 链</li>
<li>属性设置<ul>
<li>对于 <code>obj.foo = &quot;bar&quot;;</code> 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 <code>[[Prototype]]</code> 查找原型链，如果原型链找不到则直接赋值在 obj 上</li>
<li>屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：<strong>选择最底层的属性</strong>），但分为三种情况讨论<ul>
<li>原型链属性 <code>writable: true</code> ，会直接在底层对象新增一个属性，<strong>属于屏蔽属性</strong></li>
<li>原型链属性 <code>writable: false</code> ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值</li>
<li>原型链存在该属性并且是一个 setter，则直接调用该 setter</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-2-”类“"><a href="#5-2-”类“" class="headerlink" title="5.2 ”类“"></a>5.2 ”类“</h3><ul>
<li>JS 中不会把一个对象（类）复制到另一个对象（实例），<strong>只是关联起来</strong></li>
<li><code>new Foo()</code> 会生成一个新对象，新对象的内部链接 <code>[[Prototype]]</code> 关联到的是 <code>Foo.prototype</code> 对象</li>
<li><img src="https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png"></li>
<li>构造函数：<ul>
<li>函数原型的 construtor 默认指向自己，即：<code>Foo.prototype.constructor === Foo</code> 是 true</li>
<li>调用 <code>new</code> 创建的对象的 constructor 属性指向 -&gt; 创建这个对象的函数</li>
<li>参考代码<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>JS 中的函数就是普通函数</li>
<li>new 会劫持所有所有的普通函数，并通过构造对象调用它</li>
<li>注意：<code>.constructor</code> 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了</li>
</ul>
</li>
</ul>
<h3 id="5-3-（原型）继承"><a href="#5-3-（原型）继承" class="headerlink" title="5.3 （原型）继承"></a>5.3 （原型）继承</h3><ul>
<li>在 ES6 之前，将子对象的 prototype 通过 <code>Object.create()</code> 指向父亲对象</li>
<li>ES6 可以通过 <code>Object.setPrototypeOf</code> 直接修改子对象原型，两种方式效果相同<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES 6 之前</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ES 6</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>查找”类“关系<ul>
<li>反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）</li>
<li>通过 instanceof 查找反射（不建议使用）：<code>a instanceof Foo;</code> ，a 的整条原型链是否有指向 Foo.prototype 的对象</li>
<li>通过 <code>Foo.prototype.isPrototypeOf( a );</code> 查找反射：a 的原型链是否出现过 Foo.prototype</li>
<li><code>.__proto__</code> 不是一个属性，而是一个 getter / setter<ul>
<li>通过 ES6 的方式实现 <code>.__proto__</code> 参考<pre class="line-numbers language-js" data-language="js"><code class="language-js"> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"__proto__"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
<span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> o<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-4-对象关联"><a href="#5-4-对象关联" class="headerlink" title="5.4 对象关联"></a>5.4 对象关联</h3><ul>
<li><code>let bar = Object.create( obj )</code> 可以将新对象 bar 原型指向 obj</li>
<li>Object.create() 在 ES5 中的实现代码<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span>create<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
Object<span class="token punctuation">.</span><span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<h2 id="第六章：行为委托"><a href="#第六章：行为委托" class="headerlink" title="第六章：行为委托"></a>第六章：行为委托</h2><ul>
<li>在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法</li>
<li>委托理论<ul>
<li>对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系</li>
<li>定义的都是对象，一个对象通过 <code>Object.create()</code> 创建，把 <code>[[Prototype]]</code> 委托给另一个对象</li>
<li>示例代码<pre class="line-numbers language-js" data-language="js"><code class="language-js">Task <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token function-variable function">setID</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">ID</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token function-variable function">outputID</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 让XYZ委托Task</span>
<span class="token constant">XYZ</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Task<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token constant">XYZ</span><span class="token punctuation">.</span><span class="token function-variable function">prepareTask</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">ID</span><span class="token punctuation">,</span> Label</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setID</span><span class="token punctuation">(</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> Label<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token constant">XYZ</span><span class="token punctuation">.</span><span class="token function-variable function">outputTaskDetails</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">outputID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>这类编码风格称为 对象关联（OLOO，objects linked to other objects）<ul>
<li>对于实例化后的属性数据都存储于子对象上</li>
<li>尽量避免原型链上存在相同的命名</li>
<li>子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象</li>
</ul>
</li>
<li>禁止双向委托</li>
</ul>
<h2 id="附录：ES6-中的-Class"><a href="#附录：ES6-中的-Class" class="headerlink" title="附录：ES6 中的 Class"></a>附录：ES6 中的 Class</h2><ul>
<li>ES6 中的 class 语法糖解决的问题<ul>
<li>不再使用 .prototype</li>
<li>子类通过 extends 直接继承父类，不需要再通过 Object.create()</li>
<li>可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法</li>
<li>class 语法不能声明属性（需要通过 constructor），避免错误</li>
</ul>
</li>
<li>class 语法糖存在的问题<ul>
<li>如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式</li>
<li>super 不是动态绑定的，而是在声明时静态绑定的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>你不知道的 JS 学习笔记：类型和语法</title>
    <url>/2022/02/21/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-JS-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="第一章：类型"><a href="#第一章：类型" class="headerlink" title="第一章：类型"></a>第一章：类型</h2><ul>
<li><strong>JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值</strong></li>
<li>JS 的七种内置类型<ul>
<li>number 数字</li>
<li>string 字符串</li>
<li>boolean 布尔值</li>
<li>null 空值</li>
<li>undefined 未定义</li>
<li>symbol 符号</li>
<li>object 对象（除了 object 其他都是基本类型）</li>
</ul>
</li>
<li>可以使用 typeof 检查基本类型  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">"42"</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">42</span> <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token operator">===</span> <span class="token string">"boolean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 注意 null 是 object，这是 JS 的 BUG</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// ES6中新加入的类型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span> life<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）</li>
<li>JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言</li>
<li>undefined<ul>
<li>已经在作用域声明，但还没被赋值</li>
<li>在作用域中没有被声明是 undeclared</li>
<li><strong>注意</strong>：对于上面两种情况，typeof 返回的都是 undefined</li>
</ul>
</li>
</ul>
<h2 id="第二章：值"><a href="#第二章：值" class="headerlink" title="第二章：值"></a>第二章：值</h2><ul>
<li>2.1 数组<ul>
<li>数组可以存放任何类型的值</li>
<li>JS 中数组不用预先声明大小</li>
<li>数组也是对象，可以包含自己的键值属性，但不会计算在 length 中</li>
<li>类数组<ul>
<li>一组通过数字索引的值，比如：DOM 查询操作返回结果</li>
<li>可以使用 <code>Array.slice</code> 或 <code>Array.from</code> 将类数组转化为数组</li>
</ul>
</li>
</ul>
</li>
<li>2.2 字符串<ul>
<li>字符串可以借用数组方法<ul>
<li>借用 join 方法示例：<code>let b = Array.prototype.join( a, &quot;-&quot;);</code></li>
<li>无法直接借用 reverse 方法，需要先转化为字符数组才能使用  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> c <span class="token operator">=</span> a
<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
<li>2.3 数字<ul>
<li>数字以十进制的方式显示，小数后的 0 会被省略</li>
<li><code>tofiexed()</code> 方法可以指定小数部分的显示位数，结果是字符串形式</li>
<li><code>toprecision()</code> 方法可以指定有效位数的显示位数  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span> a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "4e+1"</span>
a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "43"</span>
a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.6"</span>
a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.59"</span>
a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.590"</span>
a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.5900"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">===</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false</li>
<li>解决方案：使用误差范围值<ul>
<li>ES6 中定义为 <code>Number.EPSILON</code>,通常为：2^-52 (2.220446049250313e-16)</li>
<li>使用误差范围判断两个数字是否相等  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span><span class="token number">0.0000001</span><span class="token punctuation">,</span> <span class="token number">0.0000002</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
<li>整数的安全范围<ul>
<li>ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]</li>
<li>即：[-(2^53  -  1), 2^53  -  1]</li>
</ul>
</li>
<li>判断是否是整数<ul>
<li>使用 <code>Number.isInteger()</code> 判断是否是整数</li>
<li>使用 <code>Number.isSafeInteger()</code> 判断是否是安全范围内的整数</li>
</ul>
</li>
</ul>
</li>
<li>2.4 特殊数值<ul>
<li>undefined 和 null<ul>
<li>undefined 类型只有一个值，即：undefined</li>
<li>null 类型只有一个值，即：null</li>
<li>undefined 指未被赋值，null 指曾被赋值，但目前没有值</li>
<li>undefined 可以作为变量声明和赋值（<strong>不要这么做</strong>）</li>
</ul>
</li>
<li>void<ul>
<li>指没有返回值，多用于函数没有返回结果</li>
<li><strong>可以使用 <code>void 0</code> 获取真正的 undefined</strong>（非严格模式 undefined 可以被赋值，而 <code>void 0</code> 必定返回 undefined）</li>
</ul>
</li>
<li>特殊的数字<ul>
<li>NAN：<ul>
<li>无效数值（仍然是一个数字类型，但指数字类型中的错误情况）</li>
<li>NAN 和谁比较都是 false，包括自己</li>
<li>使用 <code>Number.isNaN()</code> 判断一个数字是否为 NAN  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span>isNaN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
Number<span class="token punctuation">.</span><span class="token function-variable function">isNaN</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>无穷数字：Infinity<ul>
<li>ES6 中定义为：<code>Number.POSITIVE_INFINITY</code>，<code>Number.NEGATIVE_INFINITY</code></li>
<li>计算结果一旦溢出为无穷数，就无法再转换为有穷数</li>
</ul>
</li>
<li>零值：0、-0<ul>
<li>乘法和除法运算会得到 -0</li>
<li>存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）</li>
<li>0 === -0</li>
</ul>
</li>
</ul>
</li>
<li>特殊等式<ul>
<li><code>Object.is(a, b)</code> 可以判断两个值是否绝对相等</li>
<li>优先使用 == 和 ===，因为效率更高</li>
</ul>
</li>
</ul>
</li>
<li>2.5 值和引用<ul>
<li>JS 中没有指针，JS 的变量不可能指向另一个变量的引用，<strong>JS 引用指向的是值</strong></li>
<li>基本类型通过<strong>复制</strong>方式复制或传递，引用类型通过<strong>引用</strong>方式复制或传递</li>
<li>函数中的引用问题<ul>
<li>函数参数 a 通过<strong>复制</strong>的方式复制给函数内的 x</li>
<li><strong>引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值</strong>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注意引用 x 指向了其他的值</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>我们无法自行决定使用复制赋值还是引用赋值，<strong>一切由值的类型决定</strong></li>
</ul>
</li>
</ul>
<h2 id="第三章：原生函数"><a href="#第三章：原生函数" class="headerlink" title="第三章：原生函数"></a>第三章：原生函数</h2><ul>
<li>JS 常用的原生函数<ul>
<li>String()</li>
<li>Number()</li>
<li>Boolean()</li>
<li>Array()</li>
<li>Object()</li>
<li>Function()</li>
<li>RegExp()</li>
<li>Date()</li>
<li>Error()</li>
<li>Symbol()</li>
</ul>
</li>
<li>3.1 内部属性 <code>[[Class]]</code><ul>
<li>所有 typeof 返回为 “object” 的对象都包含内部属性 <code>[[Class]]</code>，可以通过 toString 方法查看  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Function]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>3.2 封装对象包装<ul>
<li>基本类型没有如：<code>length</code> 属性和 <code>toString()</code> 方法，<strong>JS 会自动为基本类型包装一个封装对象</strong></li>
<li>浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率</li>
</ul>
</li>
<li>3.3 拆封<ul>
<li>可以使用 <code>valuOf()</code> 获取封装对象中基本类型的值  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>3.4 原生函数作为构造函数<ul>
<li>尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题</li>
<li>尽量不要创建和使用空单元数组</li>
<li>对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）</li>
<li>Symbol<ul>
<li>具有唯一性的特殊值，用于声名对象属性不容易导致重名</li>
<li>使用 Symbol() 原声构造函数自定义符号<strong>不能</strong>带 <code>new</code> 关键字</li>
<li>注意：Symbol 不是对象，而是<strong>一个基本类型</strong></li>
</ul>
</li>
<li>原生原型<ul>
<li>可以将 <code>Array.prototype.join()</code> 写作 <code>Array#join()</code></li>
<li>三个特殊的默认类型<ul>
<li>Function.prototype 默认是一个函数</li>
<li>RegExp.prototype 默认是一个正则表达式</li>
<li>Array. prototype 默认是一个数组</li>
<li>默认值在使用的时候只创建一次，可以节约资源</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四章：强制类型转换"><a href="#第四章：强制类型转换" class="headerlink" title="第四章：强制类型转换"></a>第四章：强制类型转换</h2><ul>
<li><p>4.1 值类型转换</p>
<ul>
<li>类型转换：值的类型从一种类型转换为另一种类型，为显式转换</li>
<li>隐式的类型转换即强制类型转换</li>
<li>类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐式类型转换</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显式类型转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>4.2 抽象值操作</p>
<ul>
<li>抽象操作 ToString<ul>
<li>null -&gt; “null”</li>
<li>undefined -&gt; “undefined”</li>
<li>true -&gt; “true”</li>
<li>6 -&gt; “6”</li>
<li>数组特殊：[1,2,3] -&gt; “1,2,3”</li>
<li><code>JSON.stringfy()</code> 转化为字符串也用了 ToString<ul>
<li>结果总是字符串：<code>JSON.stringify(&quot;42&quot;); // &quot;&quot;42&quot;&quot; 包含双引号</code></li>
<li>字符串、数字、布尔值、null 的规则和 TOString 相同</li>
<li>遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null</li>
<li>包含循环引用会报错</li>
<li>如果对象存在 <code>toJSON()</code> 方法，调用 <code>JSON.stringfy()</code> 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值</li>
</ul>
</li>
</ul>
</li>
<li>抽象操作 ToNumber<ul>
<li>数字 -&gt; 自身</li>
<li>布尔值：false -&gt; 0，true -&gt; 1</li>
<li>null -&gt; 0</li>
<li>undefined -&gt; NaN</li>
<li>对象 -&gt; 抽象操作 ToPrimitive 规则</li>
</ul>
</li>
<li>抽象操作 ToBoolean<ul>
<li>undefined、null、false、””、0 / -0、NaN -&gt; false</li>
<li>上述以外 -&gt; true</li>
</ul>
</li>
<li>抽象操作 ToPrimitive<ul>
<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>
<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>
<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>
<li>以上三种没有转换成功则报错</li>
</ul>
</li>
</ul>
</li>
<li><p>4.3 显式强制类型转换</p>
<ul>
<li>字符串、数字间的相互转换<ul>
<li>使用 <code>String()</code>、<code>Number()</code>、<code>.toString()</code> 方法</li>
<li>使用 <code>+</code> 可以将字符串转化为数字</li>
<li>字符串 -&gt; 数字<ul>
<li>如果只有数字 -&gt; 十进制数字</li>
<li>如果包含有效浮点数数字 -&gt; 浮点数数字</li>
<li>“” -&gt; 0</li>
<li>以上三种以外为 NaN</li>
</ul>
</li>
<li>parseInt(string, radix) 方法<ul>
<li>如果 string 开头是 x / X -&gt; 16 进制数字，开头是 0 -&gt; 8 进制数字</li>
<li>最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）</li>
<li>ES5 之后默认转化为 10 进制</li>
</ul>
</li>
</ul>
</li>
<li><code>+</code> 可以将日期显示转化为数字，比如获取当前时间戳：<code>+new Date()</code>，但做好还是使用 <code>new Date().getTime()</code> 和 <code>Date.now()</code> 的方式</li>
<li><code>~</code> 非运算符<ul>
<li><code>~x</code> 大致等同于 <code>-(x+1)</code>，<code>console.log(~42); // 43</code></li>
<li><code>~-1</code> -&gt; <code>0</code>，可以用于如：<code>indexOf()</code> 方法返回为 -1 情况</li>
</ul>
</li>
<li>显示转化为布尔值<ul>
<li>使用 <code>Boolean()</code> 方法</li>
<li>使用 <code>!!</code> ，第一个 <code>!</code> 将值显式转化为布尔值，第二个 <code>!</code> 将结果反转回原值</li>
</ul>
</li>
</ul>
</li>
<li><p>4.4 隐式强制类型转换</p>
<ul>
<li>字符串与数字之间隐式强制类型转换<ul>
<li>使用 <code>+</code> 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,23,4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><code>数字 + &quot;&quot;</code> 将数字转化为字符串，使用是 <code>valueOf()</code> 方法</li>
<li>使用 <code>String(数字)</code> 的方式将数字转化为字符串使用的是 <code>toString()</code> 方法</li>
<li>所以在定制 <code>valueOf()</code> 和 <code>toString()</code> 方法要注意，因为会影响强制类型转换的结果</li>
<li><code>字符串 - 0</code> 可以将字符串转化为数字</li>
</ul>
</li>
<li>注意：<code>[] + &#123;&#125;</code> 和 <code>&#123;&#125; + []</code>，它们返回不同的结果，分别是 <code>[object Object]</code> 和 0<ul>
<li><code>&#123;&#125;</code> 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 <code>[]</code> 会被强制类型转换为 <code>&quot;&quot;</code>，而 {} 会被强制类型转换为 <code>[object Object]</code></li>
<li><code>&#123;&#125;</code> 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 <code>[]</code> 显式强制类型转换为 0</li>
</ul>
</li>
<li>布尔值 -&gt; 数字的隐式强制类型转换<ul>
<li>undefined、null、false、””、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1</li>
</ul>
</li>
<li>转换为布尔值的隐式强制类型转换<ul>
<li>以下五种情况非布尔值会被强制转换为布尔值<ul>
<li><code>if()</code> 判断表达式</li>
<li><code>for ( .. ; .. ; .. )</code> 语句中的第二个条件判断表达式</li>
<li><code>while()</code> 和 <code>do...while()</code> 判断表达式</li>
<li><code>?:</code> 判断表达式</li>
<li><code>||</code> 和 <code>&amp;&amp; </code> 判断表达式</li>
</ul>
</li>
</ul>
</li>
<li><code>&amp;&amp;</code> 和 <code>||</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值<ul>
<li><code>let a = b || &quot;123&quot;;</code> 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123</li>
<li><code>a &amp;&amp; foo()</code> 等价于 <code>if (a) &#123; foo() &#125;;</code></li>
</ul>
</li>
<li>Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"cool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">String</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(cool)"</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"not cool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>4.5 宽松相等和严格相等</p>
<ul>
<li><strong><code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许</strong></li>
<li>抽象相等（<code>==</code> 的行为）<ul>
<li>如果两个值的类型相同，就仅比较它们是否相等<ul>
<li>注意：<code>NaN</code> 不等于 <code>NaN</code>，<code>+0</code> 不等于 <code>-0</code></li>
</ul>
</li>
<li>两个对象指向同一个值时即视为相等，不发生强制类型转换</li>
<li><code>==</code> 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较</li>
<li>在 <code>==</code> 中 null 和 undefined 相等</li>
</ul>
</li>
</ul>
</li>
<li><p>4.6 抽象关系比较</p>
<ul>
<li>对于 <code>a &lt; b</code> 的比较规则<ul>
<li>双方先调用 ToPrimitive 转化为字符串，<ul>
<li>如果存在数字就转化为数字比较</li>
<li>如果双方都是字符串就按字母顺序比较</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第五章：语法"><a href="#第五章：语法" class="headerlink" title="第五章：语法"></a>第五章：语法</h2><ul>
<li>5.1 语句和表达式<ul>
<li>语句和表达式示例  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 声明语句</span>
<span class="token keyword">let</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// 赋值表达式</span>
b<span class="token punctuation">;</span> <span class="token comment">// 表达式语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>语句都有一个结果值，结果值也包括 undefined<ul>
<li>在浏览器 console 输入语句，默认会显示最后一条语句的结果值</li>
</ul>
</li>
<li>表达式的副作用：造成其他的改变<ul>
<li>函数调用产生的副作用  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果值：undefined，副作用：a 的值被改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>delete</code> 操作对象的副作用是属性从对象中被删除</li>
</ul>
</li>
<li>上下文规则<ul>
<li>同样的语法在不同的情况会有不同的解释</li>
<li>大括号 <code>&#123;&#125;</code> 规则<ul>
<li>定义对象常量<ul>
<li>a 是赋值的对象（左值），{…} 好似所赋予的值（右值）  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
foo<span class="token operator">:</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 假设 bar 已经声明</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li>标签<ul>
<li><code>&#123;&#125;</code> 在此是为一个普通的代码块</li>
<li>标签语句：<code>foo</code> 是 <code>bar()</code> 的标签，即通过 <code>foo</code> 能够跳转到 <code>bar()</code> 函数<ul>
<li>比如 <code>break</code> 语句可以从内层循环条装到外层循环或者结束循环，所以 <code>break</code> 也是一个标签  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
foo<span class="token operator">:</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 假设 bar 已经声明</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
</li>
<li>对象解构</li>
<li><code>if...else</code> 的代码块</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>5.2 运算符优先级<ul>
<li><code>,</code> 连接一系列语句时，它的优先级最低</li>
<li><code>&amp;&amp;</code> 运算符的优先级 &gt; <code>=</code></li>
<li><code>&amp;&amp;</code> 运算符优先级 &gt; <code>||</code></li>
<li>短路特性：进行 <code>&amp;&amp;</code> 或 <code>||</code> 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断</li>
<li>三元运算符的执行方式<ul>
<li><code>a ? b : c ? d : e;</code> 等价于 <code>a ? b : (c ? d : e)</code></li>
</ul>
</li>
</ul>
</li>
<li>5.3 自动分号<ul>
<li>分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号</li>
</ul>
</li>
<li>5.4 错误<ul>
<li>暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况</li>
</ul>
</li>
<li>5.5 函数参数<ul>
<li>不要同时访问命名参数和其对应的arguments数组单元</li>
</ul>
</li>
<li>5.6 try…finally<ul>
<li>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃</li>
</ul>
</li>
<li>5.7 switch<ul>
<li>switch 使用的是 <code>===</code> 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> a <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token comment">// 返回的是 "hello world"</span>
    <span class="token comment">// 永远执行不到这里</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">default</span><span class="token operator">:</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Oops"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
<h2 id="附录A：混合环境-JS"><a href="#附录A：混合环境-JS" class="headerlink" title="附录A：混合环境 JS"></a>附录A：混合环境 JS</h2><ul>
<li>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现</li>
<li>由于浏览器兼容性问题存在可能导致与官方规范的差异<ul>
<li>在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）</li>
<li><code>window.escape(..)</code> 和 <code>window.unescape(..)</code> 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，<code>window.escape( &quot;? foo=97%&amp;bar=3%&quot; )</code> 结果为 <code>&quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;</code></li>
<li><code>String.prototype.substr</code> 第二个参数是结束位置索引（非自包含）， <code>String.prototype.substring</code>  第二个参数是长度（需要包含的字符数）</li>
</ul>
</li>
<li>宿主对象<ul>
<li>内建对象和函数，比如：DOM 元素，内部的 <code>[[class]]</code> 来自预定义属性</li>
<li>和普通对象的行为差异<ul>
<li>无法正常访问 object 的内建方法，如 <code>toString()</code></li>
<li>无法写覆盖</li>
<li>包含一些预定义的只读属性</li>
<li>包含无法将 this 重载为其他对象的方法</li>
</ul>
</li>
</ul>
</li>
<li>声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性<ul>
<li>由于浏览器历史问题，<strong>在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量</strong></li>
</ul>
</li>
<li>不要扩展原生原型，可能产生冲突</li>
<li>使用 <code>&lt;script&gt; .. &lt;/script&gt;</code> 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用<ul>
<li>下面的代码都无法运行（foo() 还未被声明）  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
