{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/banner.png","path":"images/banner.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/avatar.jpg","path":"avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","path":"medias/reward/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/vue3个人常用通信方式总结.md","hash":"028626af6de9cafe29880643e68de24f52fb2c29","modified":1640502604931},{"_id":"source/_posts/hello-world.md","hash":"fb0a850f3b27633d8e04a1b97113901348d05fe3","modified":1640502676765},{"_id":"source/.DS_Store","hash":"4af2f33f6965be42a12c8df0be11a2061d2514db","modified":1638673740216},{"_id":"source/about/index.md","hash":"a6af6b4554f3b1eb8bd952f734ba135fead32316","modified":1640403405892},{"_id":"source/_posts/webpack入门-loader.md","hash":"677782b0ef1771fed99c0c45fd9c8123ed357c7b","modified":1640502614430},{"_id":"source/_posts/webpack入门-入口与出口.md","hash":"db8febf7d01d2f854548a340182f53476f9404b2","modified":1640502610512},{"_id":"source/404/index.md","hash":"f856d43418c22a2e0acda0dc8dfc338c5f591fb4","modified":1640404850462},{"_id":"source/tags/index.md","hash":"4767c7493033a7d163a4e9a71395c985779c5c05","modified":1638401544587},{"_id":"source/images/banner.png","hash":"ba710964e030db00d32e44a19234d6bbcf9162c3","modified":1638673749608},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1640402589494},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1640402589495},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1640402589498},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1640402589496},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1640402589497},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1640402589499},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1640402589500},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1640402589501},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1640402589502},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1640402589694},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1640402589695},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1640402589696},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1640402589698},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1640402589698},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1640402589699},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1640402589711},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"ac07a516849a55c8961209e24b7ee4e90bd69ae1","modified":1640742360215},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1640402589711},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1640402589712},{"_id":"themes/hexo-theme-matery/source/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1640402733885},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"d04e2d413f83d3d303c05e512809fcbf19133f0a","modified":1640412188889},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1640402589713},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1640402589697},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1640402589503},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1640402589503},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1640402589504},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1640402589505},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1640402589504},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"8e4ee373a682e06ce2e15467142bc230b08866f9","modified":1640412398823},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1640402589506},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1640402589506},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1640402589507},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1640402589507},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1640402589508},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1640402589509},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1640402589509},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1640402589510},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1640402589512},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1640402589513},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1640402589515},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1640402589516},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"f577d6892d7f4c22e19f965722f310c3da979d1f","modified":1640415628844},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1640411568452},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1640414873604},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1640402589516},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1640402589514},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1640402589519},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1640402589524},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1640402589517},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1640402589523},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1640402589525},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1640402589679},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1640402589531},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1640402589521},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1640402589682},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1640402589680},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1640402589683},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1640402589684},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1640402589684},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1640402589686},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1640402589685},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1640402589687},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1640402589690},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1640402589688},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1640402589689},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1640402589691},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1640402589692},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1640402589693},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"4070d67a4a28fc9e49c95d02a1cf54fb923c79a6","modified":1640501218683},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1640402589718},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640402589714},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640402589715},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1640402589730},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640402589717},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1640402589731},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1640402589856},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1640402589874},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640402589916},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640402589736},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640402589735},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640402589733},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640402589873},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1640402589691},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640402589778},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640402589737},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640402589780},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640402589778},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640402589781},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640402589782},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640402589783},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640402589739},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640402589777},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640402589779},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640402589785},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640402589787},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640402589802},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1640402589797},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640402589806},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1640402589826},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640402589808},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640402589835},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640402589809},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640402589839},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1640402589850},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1640402589851},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1640402589833},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640402589836},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1640402589837},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640402589882},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640402589891},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640402589892},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640402589887},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640402589898},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640402589903},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640402589902},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640402589904},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640402589909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640402589906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640402589912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640402589914},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"da9c0378e3344a0b1fe752af93a75612b9696fcd","modified":1640416065878},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1640402589920},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1640402589756},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1640402589761},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1640402589760},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1640402589759},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1640402589815},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1640402589816},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1640402589819},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1640402589818},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1640402589817},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1640402589825},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640402589820},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640402589821},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640402589823},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640402589822},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640402589840},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640402589846},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640402589847},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640402589849},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640402589844},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640402589845},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640402589842},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1640402589789},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640402589805},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1640402589812},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640402589881},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640402589886},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640402589879},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640402589853},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640402589884},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640402589889},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640402589895},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640402589893},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640402589897},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640402589900},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640402589907},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640402589911},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1640402589741},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640402589915},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1640402589755},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1640402589744},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1640402589750},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1640402589753},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1640402589775},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1640402589774},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1640402589876},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1640402589799},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640402589831},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640402589829},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640402589854},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"0dd8ef34a6216b4af45d89cfb7454095e712c67d","modified":1640403772877},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1640402589758},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1640402589763},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1640402589771},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1640402589748},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640402589794},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1640402589768},{"_id":"public/atom.xml","hash":"a27cf7f7d326c809bd620adcd612b08cd75dddc6","modified":1645444770316},{"_id":"public/search.xml","hash":"2aeb9f5b610cf6e9a51c0a629de0a7b95bdf6638","modified":1645444770316},{"_id":"public/404/index.html","hash":"16c1526c084a3c09faa868b04ab28c8ebf674e6e","modified":1645444770316},{"_id":"public/about/index.html","hash":"70d479bcb7b648f6f36d6e60c8bf020dc3c2e5ae","modified":1645444770316},{"_id":"public/tags/index.html","hash":"e749a9a62783840e5a20f3e42b5fcb65017ee2fb","modified":1645444770316},{"_id":"public/2021/12/06/vue3个人常用通信方式总结/index.html","hash":"fb479f6887fa5c42d97fdf9381e7536533b15ae8","modified":1645444770316},{"_id":"public/2021/12/05/webpack入门-loader/index.html","hash":"a8bf46e91030b2f9e65f746901c61505e139769e","modified":1645444770316},{"_id":"public/2021/12/02/webpack入门-入口与出口/index.html","hash":"02169d0968442060a6ab0f0e9a81251607b0fb27","modified":1645444770316},{"_id":"public/2021/11/25/hello-world/index.html","hash":"51572dc563c57a5ec02619f7ce358ba69a3470ea","modified":1645444770316},{"_id":"public/archives/index.html","hash":"526640ef0a8b8d27533ebe7e9ba949b02dde9ba8","modified":1645444770316},{"_id":"public/archives/2021/index.html","hash":"509423207fe9ef32692ac55c0cdbd4bdb7ee7e1b","modified":1645444770316},{"_id":"public/archives/2021/11/index.html","hash":"e62a73f18d3ffd4068eb12c527b34087ccd5ad71","modified":1645444770316},{"_id":"public/archives/2021/12/index.html","hash":"1210fa70add99d4dc91a95ee81f6ea0d1989cd85","modified":1645444770316},{"_id":"public/index.html","hash":"08fcb9174445cd865340499857c74a2b5092e8b8","modified":1645444770316},{"_id":"public/tags/程序人生/index.html","hash":"24d66c65b3b1445325e43845a78af35ca5afe687","modified":1645444770316},{"_id":"public/tags/vue/index.html","hash":"bb25737af0a0cc32491238ae4ee35bbed717ee12","modified":1645444770316},{"_id":"public/tags/webpack/index.html","hash":"6a0d97b102959d51c25f341dc82a29c9a62f4246","modified":1645444770316},{"_id":"public/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1640415432716},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1640415432716},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640415432716},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640415432716},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1640415432716},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640415432716},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640415432716},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640415432716},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640415432716},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640415432716},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640415432716},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640415432716},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640415432716},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640415432716},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640415432716},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640415432716},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640415432716},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1640415432716},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1640415432716},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1640415432716},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1640415432716},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1640415432716},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1640415432716},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640415432716},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640415432716},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640415432716},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640415432716},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640415432716},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640415432716},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640415432716},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640415432716},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640415432716},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640502754788},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640415432716},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640415432716},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640415432716},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640415432716},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640415432716},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640415432716},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640415432716},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640415432716},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640415432716},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1640415432716},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640415432716},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640415432716},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640415432716},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1640415432716},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1640415432716},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1640415432716},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640415432716},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640415432716},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640415432716},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640415432716},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640415432716},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640415432716},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640415432716},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640415432716},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640415432716},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640415432716},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640415432716},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640415432716},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640415432716},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640415432716},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1640415432716},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640415432716},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640415432716},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1640415432716},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1640415432716},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640415432716},{"_id":"public/css/matery.css","hash":"4070d67a4a28fc9e49c95d02a1cf54fb923c79a6","modified":1640415432716},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640415432716},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640415432716},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640415432716},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640415432716},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1640415432716},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1640415432716},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640415432716},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640415432716},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640415432716},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1640415432716},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1640415432716},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1640415432716},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640415432716},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1640415432716},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640415432716},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640415432716},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1640415432716},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1640415432716},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1640415432716},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640415432716},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640415432716},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640415432716},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1640415432716},{"_id":"public/medias/banner/0.jpg","hash":"0dd8ef34a6216b4af45d89cfb7454095e712c67d","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1640415432716},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640415432716},{"_id":"public/images/banner.png","hash":"ba710964e030db00d32e44a19234d6bbcf9162c3","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1640415432716},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1640415432716},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"e69434ac20f95a51470deacf1ed22737f67c523b","modified":1640416065926},{"_id":"source/categories/index.md","hash":"d3ecccf2f00b78038d7455b30f949c6c8a956daf","modified":1640416577797},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640402589882},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640402589887},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640402589891},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640402589892},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"2eb2dceddaec0f176324aa1d45780878b2f4385d","modified":1640418389654},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"f27d3492164147064b9748db58884b5febeacab1","modified":1640418389652},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640402589898},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640402589902},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640402589904},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640402589903},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640402589906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640402589909},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640402589912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640402589914},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640402589879},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640402589881},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640402589886},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640402589884},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640402589889},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640402589893},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640402589895},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640402589897},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640402589900},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640402589907},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640402589911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages.bak/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640402589915},{"_id":"source/_posts/我的2021年总结.md","hash":"306e01e8ff90b5d1a95817074f64280d639af830","modified":1640502580561},{"_id":"source/_posts/JS-数组方法总结.md","hash":"63d17c3ea28d27fb0e4ba6a8e564ab252e25535f","modified":1640502600877},{"_id":"source/_posts/JS-继承实现方式整理.md","hash":"0f5f5f47cdd01c5b73f5c2a0fc8b41de90233227","modified":1640502592676},{"_id":"public/categories/index.html","hash":"6e3cae636d66ed8b08f28d787b777e15ea837806","modified":1645444770316},{"_id":"public/2021/12/23/JS-数组方法总结/index.html","hash":"6f9c1be344dc7c63cfc9f99034ce555c39bf36e5","modified":1645444770316},{"_id":"public/2021/12/24/JS-继承实现方式整理/index.html","hash":"01d3bd8abee3a9194243f68c9a17b9fec575aeec","modified":1645444770316},{"_id":"public/2021/12/22/我的2021年总结/index.html","hash":"016f7aa87108d91a93375411804c221f506d9311","modified":1645444770316},{"_id":"public/tags/JavaScript/index.html","hash":"24114172125b9ec5bf386546558f5d37dc0cba21","modified":1645444770316},{"_id":"public/medias/reward/wechat.jpg","hash":"e69434ac20f95a51470deacf1ed22737f67c523b","modified":1640420499527},{"_id":"public/medias/featureimages.bak/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640420499527},{"_id":"public/medias/featureimages.bak/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640420499527},{"_id":"public/medias/featureimages.bak/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640420499527},{"_id":"public/medias/featureimages.bak/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640420499527},{"_id":"public/medias/featureimages.bak/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640420499527},{"_id":"public/medias/featureimages.bak/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640420499527},{"_id":"public/medias/featureimages.bak/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640420499527},{"_id":"public/medias/featureimages.bak/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640420499527},{"_id":"public/medias/featureimages.bak/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640420499527},{"_id":"public/medias/featureimages.bak/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640420499527},{"_id":"public/medias/featureimages.bak/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640420499527},{"_id":"public/medias/featureimages.bak/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640420499527},{"_id":"public/medias/featureimages.bak/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640420499527},{"_id":"public/medias/featureimages.bak/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640420499527},{"_id":"public/medias/featureimages.bak/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640420499527},{"_id":"public/medias/featureimages.bak/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640420499527},{"_id":"public/medias/featureimages.bak/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640420499527},{"_id":"public/medias/featureimages.bak/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640420499527},{"_id":"public/medias/featureimages.bak/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640420499527},{"_id":"public/medias/featureimages.bak/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640420499527},{"_id":"public/medias/featureimages.bak/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640420499527},{"_id":"public/medias/featureimages.bak/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640420499527},{"_id":"public/medias/featureimages.bak/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640420499527},{"_id":"public/medias/featureimages.bak/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640420499527},{"_id":"public/categories/无限进步/index.html","hash":"c916fbd221d124d8a0cf3da154ae63e59e062403","modified":1645444770316},{"_id":"public/categories/其他/index.html","hash":"91b7bad5611b0964f6f0ea2661ca16a2c337bec7","modified":1645444770316},{"_id":"public/tags/复盘与总结/index.html","hash":"4272a3f182c8828c7caa5419ba961a9d674234f7","modified":1645444770316},{"_id":"public/categories/前端/index.html","hash":"52fc2c6c46286b073fae8ea0c8d1cc50921870ef","modified":1645444770316},{"_id":"source/_posts/JS-数据类型基础梳理.md","hash":"623f86cc68dea37bc8ffaed3174223b0528fce2e","modified":1640696666548},{"_id":"public/2021/12/28/JS-数据类型基础梳理/index.html","hash":"4a96a86cae9f8720df889af25c079eeefeacec4d","modified":1645444770316},{"_id":"source/_posts/JS-什么是类数组.md","hash":"b48947ab8134ba0fae2624b39ad7577995b579af","modified":1641607135004},{"_id":"public/2022/01/08/JS-什么是类数组/index.html","hash":"090b1ab41884210874ea23012d8ddf8d7e5e0d97","modified":1645444770316},{"_id":"public/archives/page/2/index.html","hash":"d4d4e0fae200e9a1bc5421877baf6a7895ce8c53","modified":1645444770316},{"_id":"public/archives/2021/page/2/index.html","hash":"39d4b901fa6cec5d3f953c4fed1401493084c97c","modified":1645444770316},{"_id":"public/archives/2021/12/page/2/index.html","hash":"63a51f63682cd26da7accbd11f3219dc17b52d2c","modified":1645444770316},{"_id":"public/archives/2022/index.html","hash":"d0038939cb7aa22b4e9df2a85170cbceaa780c36","modified":1645444770316},{"_id":"public/archives/2022/01/index.html","hash":"925932054a0b9db65adde71e89b166be29a8e202","modified":1645444770316},{"_id":"public/page/2/index.html","hash":"ba6a4e109164cccb010de539d8160301d278bb6d","modified":1645444770316},{"_id":"public/categories/前端/page/2/index.html","hash":"5cf4772f72fe2addf9e4ecf17967e4e36f2c42d4","modified":1645444770316},{"_id":"source/_posts/作用域和闭包.md","hash":"a285d72dd6147e730b6b7bfec11ff5537356bf03","modified":1644063547535},{"_id":"public/2022/02/04/作用域和闭包/index.html","hash":"6e9b01118374e8e00aabea41a745a353fc9c421b","modified":1645444770316},{"_id":"public/archives/2022/02/index.html","hash":"546b10c6437a2e2edb58c6892442712c31d07deb","modified":1645444770316},{"_id":"source/_posts/你不知道的-JS-学习笔记：第二部分-this和对象原型.md","hash":"d0d5b1ab09b0718a35db4cde22f90505203d4057","modified":1644064763532},{"_id":"public/2022/02/05/你不知道的-JS-学习笔记：第二部分-this和对象原型/index.html","hash":"32afabc01e1183fcc9b0e31e976d4e5b0af37aad","modified":1645444770316},{"_id":"source/_posts/你不知道的-JS-学习笔记：类型和语法.md","hash":"177fc078113bc74a62ce5f145ed065bbbc873200","modified":1645444724003},{"_id":"public/2022/02/21/你不知道的-JS-学习笔记：类型和语法/index.html","hash":"4c8fbd691ecc0b842940247f7d66c914edd9d2ff","modified":1645444770316},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"2d9a5c82e4b5b77a5d61368ebf200453561c81ca","modified":1645444770316}],"Category":[{"name":"前端","_id":"ckxmwwx7900008csj3xqa6ybf"},{"name":"无限进步","_id":"ckxmwwx7f00058csj7fv4179u"},{"name":"其他","_id":"ckxmwz2ti0000ersje7ute5hn"}],"Data":[],"Page":[{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2021-12-25T03:36:45.892Z","path":"about/index.html","comments":1,"_id":"ckxlgzswp0000dqsj4khof07d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2021-12-01T23:32:24.587Z","updated":"2021-12-01T23:32:24.587Z","path":"tags/index.html","comments":1,"_id":"ckxlgzswu0002dqsj29tlegtd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-12-25T04:00:50.462Z","path":"404/index.html","comments":1,"_id":"ckxlgzswx0005dqsjdtcf1p0c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-12-25T07:16:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-25 15:16:00\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-12-25T07:16:17.797Z","path":"categories/index.html","comments":1,"_id":"ckxlhoii60000bxsjd5n8fegl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2021-11-25T10:05:23.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154304.jpg","_content":"Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-11-25 18:05:23\ncategories: 其他\ntags: 程序人生\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154304.jpg\n---\nHey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步","slug":"hello-world","published":1,"updated":"2021-12-26T07:11:16.765Z","_id":"ckxlgzsws0001dqsjgn6gfsr8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步</p>\n"},{"title":"vue3个人常用通信方式总结","date":"2021-12-06T07:11:16.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142336.jpg","_content":"## props\n- Vue3 子组件可以通过 props 接受父组件的传值\n- 在 setup() 中可以通过 `props.value` 来访问父组件传值\n- 父组件传值举例\n\t```html\n\t<template>\n\t\t<child-component :value=\"value\" />\n\t</template>\n\t```\n\n- 子组件接受并使用父组件传递值\n<!--more-->\n\t```html\n\t<template>\n\t\t{{ fatherValue }}\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const fatherValue = ref(\"\");\n\n\t            fatherValue = props.value\n\t            console.log( fatherValue )\n\n\t            return {\n\t                fatherValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n## refs\n- 通过 refs ，父组件可以直接获取子组件实例，并向子组件传值\n- 父组件举例\n\t```html\n\t<template>\n\t\t<child ref=\"childRef\" />\n\t\t<button @click=\"sendValue()\">\n\t        Change Child Value\n\t    </button>\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const childRef = ref(\"\");\n\n\t            const sendValue = () => {\n\t                console.log(\"childRef\", childRef.value);\n\n\t                // 调用子组件方法\n\t                childRef.value.acceptValue(\"newValue\");\n\t            }\n\n\t            return {\n\t                fatherValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n- 子组件举例\n\t```html\n\t<template>\n\t\tSon: {{ valueRef }}\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const valueRef = ref(\"\");\n\n\t            const acceptValue = (value) => {\n\t            \tvalueRef.value = value;\n\t            }\n\n\t            return {\n\t                valueRef,\n\t                acceptValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n## emits\n- 子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数\n- 父亲组件举例\n\t```html\n\t<template>\n\t\t<child-component :add-child=\"addChildMethod()\"\n\t</template>\n\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"FatherComponent\",\n\t        setup( props ) {\n\t            const addChildMethod = () => {\n\t                // mehtod\n\t            }\n\t            return {\n\t                addChildMethod\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n- 子组件举例\n\t```html\n\t<template>\n\t\t<div @click=\"$emit('addChild')\">\n\t        <!-- some -->\n\t    </div>\n\t</template>\n\t```","source":"_posts/vue3个人常用通信方式总结.md","raw":"---\ntitle: vue3个人常用通信方式总结\ndate: 2021-12-06 15:11:16\ncategories: 前端\ntags: vue\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142336.jpg\n---\n## props\n- Vue3 子组件可以通过 props 接受父组件的传值\n- 在 setup() 中可以通过 `props.value` 来访问父组件传值\n- 父组件传值举例\n\t```html\n\t<template>\n\t\t<child-component :value=\"value\" />\n\t</template>\n\t```\n\n- 子组件接受并使用父组件传递值\n<!--more-->\n\t```html\n\t<template>\n\t\t{{ fatherValue }}\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const fatherValue = ref(\"\");\n\n\t            fatherValue = props.value\n\t            console.log( fatherValue )\n\n\t            return {\n\t                fatherValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n## refs\n- 通过 refs ，父组件可以直接获取子组件实例，并向子组件传值\n- 父组件举例\n\t```html\n\t<template>\n\t\t<child ref=\"childRef\" />\n\t\t<button @click=\"sendValue()\">\n\t        Change Child Value\n\t    </button>\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const childRef = ref(\"\");\n\n\t            const sendValue = () => {\n\t                console.log(\"childRef\", childRef.value);\n\n\t                // 调用子组件方法\n\t                childRef.value.acceptValue(\"newValue\");\n\t            }\n\n\t            return {\n\t                fatherValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n- 子组件举例\n\t```html\n\t<template>\n\t\tSon: {{ valueRef }}\n\t</template>\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"ChildComponent\",\n\t        props: {\n\t            value: {\n\t                type: String,\n\t                default: \"\"\n\t            }\n\t        },\n\t        setup( props ) {\n\t            const valueRef = ref(\"\");\n\n\t            const acceptValue = (value) => {\n\t            \tvalueRef.value = value;\n\t            }\n\n\t            return {\n\t                valueRef,\n\t                acceptValue\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n## emits\n- 子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数\n- 父亲组件举例\n\t```html\n\t<template>\n\t\t<child-component :add-child=\"addChildMethod()\"\n\t</template>\n\n\t<script lang=\"js\">\n\t    import { defineComponent, ref } from \"vue\";\n\n\t    export default defineComponent ({\n\t        name: \"FatherComponent\",\n\t        setup( props ) {\n\t            const addChildMethod = () => {\n\t                // mehtod\n\t            }\n\t            return {\n\t                addChildMethod\n\t            }\n\t        }\n\t    })\n\t</script>\n\t```\n\n- 子组件举例\n\t```html\n\t<template>\n\t\t<div @click=\"$emit('addChild')\">\n\t        <!-- some -->\n\t    </div>\n\t</template>\n\t```","slug":"vue3个人常用通信方式总结","published":1,"updated":"2021-12-26T07:10:04.931Z","_id":"ckxlgzswv0003dqsjg4jk52sg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li><p>Vue3 子组件可以通过 props 接受父组件的传值</p>\n</li>\n<li><p>在 setup() 中可以通过 <code>props.value</code> 来访问父组件传值</p>\n</li>\n<li><p>父组件传值举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child-component</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件接受并使用父组件传递值</p>\n<span id=\"more\"></span>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&#123;&#123; fatherValue &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> fatherValue <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            fatherValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> fatherValue <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2></li>\n<li><p>通过 refs ，父组件可以直接获取子组件实例，并向子组件传值</p>\n</li>\n<li><p>父组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childRef<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendValue()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        Change Child Value\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> childRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childRef\"</span><span class=\"token punctuation\">,</span> childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 调用子组件方法</span>\n                childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">acceptValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\tSon: &#123;&#123; valueRef &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> valueRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acceptValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            \tvalueRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                valueRef<span class=\"token punctuation\">,</span>\n                acceptValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"emits\"><a href=\"#emits\" class=\"headerlink\" title=\"emits\"></a>emits</h2><ul>\n<li><p>子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数</p>\n</li>\n<li><p>父亲组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&lt;child-component :add-child=\"addChildMethod()\"\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"FatherComponent\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addChildMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// mehtod</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                addChildMethod\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$emit(<span class=\"token punctuation\">'</span>addChild<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- some --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li><p>Vue3 子组件可以通过 props 接受父组件的传值</p>\n</li>\n<li><p>在 setup() 中可以通过 <code>props.value</code> 来访问父组件传值</p>\n</li>\n<li><p>父组件传值举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child-component</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件接受并使用父组件传递值</p>","more":"<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&#123;&#123; fatherValue &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> fatherValue <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            fatherValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> fatherValue <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2></li>\n<li><p>通过 refs ，父组件可以直接获取子组件实例，并向子组件传值</p>\n</li>\n<li><p>父组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childRef<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendValue()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        Change Child Value\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> childRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childRef\"</span><span class=\"token punctuation\">,</span> childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 调用子组件方法</span>\n                childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">acceptValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\tSon: &#123;&#123; valueRef &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            value<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> valueRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acceptValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            \tvalueRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                valueRef<span class=\"token punctuation\">,</span>\n                acceptValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"emits\"><a href=\"#emits\" class=\"headerlink\" title=\"emits\"></a>emits</h2><ul>\n<li><p>子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数</p>\n</li>\n<li><p>父亲组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&lt;child-component :add-child=\"addChildMethod()\"\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"FatherComponent\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addChildMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// mehtod</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                addChildMethod\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$emit(<span class=\"token punctuation\">'</span>addChild<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\">&lt;!-- some --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>"},{"title":"webpack入门-loader","date":"2021-12-05T03:01:46.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142337.jpg","_content":"## loader 基础\n- 将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件\n- 在 module.rule 配置，必须包含 test 和 use 属性\n\t- `test`： 标识出应该被对应的 loader 进行转换的某个或某些文件\n\t- `use`：进行转换时，应该使用哪个 loader\n\t```javascript\n\tconst path = require('path');\n\n\tconst config = {\n\t  module: {\n\t\trules: [\n\t\t  { test: /\\.css$/, use: 'css-loader' },\n\t\t  { test: /\\.ts$/, use: 'ts-loader' }\n\t\t]\n\t  }\n\t};\n\n\tmodule.exports = config;\n\t```\n\n- 使用 loader 的三种方式\n\t- 配置（推荐）：在 webpack.config.js 中配置\n\t- 内联：在每个 import 语句中显式指定 loader\n\t\t`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n\t- CLI：在 shell 命令中指定它们\n\t\t`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n\n- loader 特性\n\t- loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader\n\t- loader 可同步也可异步\n\t- loader 可以在 Node.js 环境运行\n\t- loader 能够接受查询参数\n\t- loader 可以使用 `opotions` 对象进行配置\n\t- 可以将普通 npm 模块导出一个 loader","source":"_posts/webpack入门-loader.md","raw":"---\ntitle: webpack入门-loader\ndate: 2021-12-05 11:01:46\ncategories: 前端\ntags: webpack\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142337.jpg\n---\n## loader 基础\n- 将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件\n- 在 module.rule 配置，必须包含 test 和 use 属性\n\t- `test`： 标识出应该被对应的 loader 进行转换的某个或某些文件\n\t- `use`：进行转换时，应该使用哪个 loader\n\t```javascript\n\tconst path = require('path');\n\n\tconst config = {\n\t  module: {\n\t\trules: [\n\t\t  { test: /\\.css$/, use: 'css-loader' },\n\t\t  { test: /\\.ts$/, use: 'ts-loader' }\n\t\t]\n\t  }\n\t};\n\n\tmodule.exports = config;\n\t```\n\n- 使用 loader 的三种方式\n\t- 配置（推荐）：在 webpack.config.js 中配置\n\t- 内联：在每个 import 语句中显式指定 loader\n\t\t`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n\t- CLI：在 shell 命令中指定它们\n\t\t`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n\n- loader 特性\n\t- loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader\n\t- loader 可同步也可异步\n\t- loader 可以在 Node.js 环境运行\n\t- loader 能够接受查询参数\n\t- loader 可以使用 `opotions` 对象进行配置\n\t- 可以将普通 npm 模块导出一个 loader","slug":"webpack入门-loader","published":1,"updated":"2021-12-26T07:10:14.430Z","_id":"ckxlgzswy0006dqsjdxff19ad","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"loader-基础\"><a href=\"#loader-基础\" class=\"headerlink\" title=\"loader 基础\"></a>loader 基础</h2><ul>\n<li><p>将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件</p>\n</li>\n<li><p>在 module.rule 配置，必须包含 test 和 use 属性</p>\n<ul>\n<li><code>test</code>： 标识出应该被对应的 loader 进行转换的某个或某些文件</li>\n<li><code>use</code>：进行转换时，应该使用哪个 loader<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\trules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t  <span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span> <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>使用 loader 的三种方式</p>\n<ul>\n<li>配置（推荐）：在 webpack.config.js 中配置</li>\n<li>内联：在每个 import 语句中显式指定 loader<br>  <code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></li>\n<li>CLI：在 shell 命令中指定它们<br>  <code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code></li>\n</ul>\n</li>\n<li><p>loader 特性</p>\n<ul>\n<li>loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader</li>\n<li>loader 可同步也可异步</li>\n<li>loader 可以在 Node.js 环境运行</li>\n<li>loader 能够接受查询参数</li>\n<li>loader 可以使用 <code>opotions</code> 对象进行配置</li>\n<li>可以将普通 npm 模块导出一个 loader</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"loader-基础\"><a href=\"#loader-基础\" class=\"headerlink\" title=\"loader 基础\"></a>loader 基础</h2><ul>\n<li><p>将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件</p>\n</li>\n<li><p>在 module.rule 配置，必须包含 test 和 use 属性</p>\n<ul>\n<li><code>test</code>： 标识出应该被对应的 loader 进行转换的某个或某些文件</li>\n<li><code>use</code>：进行转换时，应该使用哪个 loader<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\trules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t  <span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t  <span class=\"token punctuation\">&#123;</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> use<span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span> <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>使用 loader 的三种方式</p>\n<ul>\n<li>配置（推荐）：在 webpack.config.js 中配置</li>\n<li>内联：在每个 import 语句中显式指定 loader<br>  <code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></li>\n<li>CLI：在 shell 命令中指定它们<br>  <code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code></li>\n</ul>\n</li>\n<li><p>loader 特性</p>\n<ul>\n<li>loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader</li>\n<li>loader 可同步也可异步</li>\n<li>loader 可以在 Node.js 环境运行</li>\n<li>loader 能够接受查询参数</li>\n<li>loader 可以使用 <code>opotions</code> 对象进行配置</li>\n<li>可以将普通 npm 模块导出一个 loader</li>\n</ul>\n</li>\n</ul>\n"},{"title":"webpack入门-入口与出口","date":"2021-12-01T23:27:44.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142337.jpg","_content":"## 入口及基础配置\n- webpack 该用哪个模块作为构建依赖图的开始\n- 在 `entry` 配置入口，可以指定一个或多个入口\n\t```javascript\n\tmodule.exports = {\n\t  entry: './path/to/my/entry/file.js'\n\t};\n\t```\n<!--more-->\n- 单页面场景配置\n\t- 将应用入口和第三方库分离\n\t- 可以使用 `CommonsChunkPlugin`  从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，`__webpack_require__()` 调用\n\t```javascript\n\tconst config = {\n\t  entry: {\n\t\tapp: './src/app.js',\n\t\tvendors: './src/vendors.js'\n\t  }\n\t};\n\t```\n- 多页面场景配置\n\t- 不同页面入口分开配置，进入新页面时独立加载 html 和对应引用\n\t- 可以使用 `CommonsChunkPlugin` 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果\n\t```javascript\n\tconst config = {\n\t  entry: {\n\t\tpageOne: './src/pageOne/index.js',\n\t\tpageTwo: './src/pageTwo/index.js',\n\t\tpageThree: './src/pageThree/index.js'\n\t  }\n\t};\n\t```\n\n## 出口及基础配置\n- webpack 输出 bundles 的目录及命名方式配置，默认为  `./dist`\n- **可以指定多个入口，但只能有一个出口（output）**\n- 在 `output` 字段配置：输出为一个对象，输出路径和文件名\n\t```javascript\n\tconst path = require('path');\n\n\tmodule.exports = {\n\t  output: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'my-first-webpack.bundle.js'\n\t  }\n\t};\n\t```\n- 对于多文件入口，使用占位符保持文件名正确\n\t```javascript\n\t{\n\t  entry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js'\n\t  },\n\t  output: {\n\t\tfilename: '[name].js',\n\t\tpath: __dirname + '/dist'\n\t  }\n\t}\n\n\t// 写入到硬盘：./dist/app.js, ./dist/search.js\n\t```\n\n- 在编译时不知道最终输出文件的 `publicPath` 的情况下，`publicPath` 留空，并且在入口起点设置 `__webpack_public_path__`\n\t```javascript\n\t__webpack_public_path__ = myRuntimePublicPath\n\n\t// 剩余的应用程序入口\n\t```\n\n\n","source":"_posts/webpack入门-入口与出口.md","raw":"---\ntitle: webpack入门-入口与出口\ndate: 2021-12-02 07:27:44\ncategories: 前端\ntags: webpack\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211226142337.jpg\n---\n## 入口及基础配置\n- webpack 该用哪个模块作为构建依赖图的开始\n- 在 `entry` 配置入口，可以指定一个或多个入口\n\t```javascript\n\tmodule.exports = {\n\t  entry: './path/to/my/entry/file.js'\n\t};\n\t```\n<!--more-->\n- 单页面场景配置\n\t- 将应用入口和第三方库分离\n\t- 可以使用 `CommonsChunkPlugin`  从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，`__webpack_require__()` 调用\n\t```javascript\n\tconst config = {\n\t  entry: {\n\t\tapp: './src/app.js',\n\t\tvendors: './src/vendors.js'\n\t  }\n\t};\n\t```\n- 多页面场景配置\n\t- 不同页面入口分开配置，进入新页面时独立加载 html 和对应引用\n\t- 可以使用 `CommonsChunkPlugin` 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果\n\t```javascript\n\tconst config = {\n\t  entry: {\n\t\tpageOne: './src/pageOne/index.js',\n\t\tpageTwo: './src/pageTwo/index.js',\n\t\tpageThree: './src/pageThree/index.js'\n\t  }\n\t};\n\t```\n\n## 出口及基础配置\n- webpack 输出 bundles 的目录及命名方式配置，默认为  `./dist`\n- **可以指定多个入口，但只能有一个出口（output）**\n- 在 `output` 字段配置：输出为一个对象，输出路径和文件名\n\t```javascript\n\tconst path = require('path');\n\n\tmodule.exports = {\n\t  output: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'my-first-webpack.bundle.js'\n\t  }\n\t};\n\t```\n- 对于多文件入口，使用占位符保持文件名正确\n\t```javascript\n\t{\n\t  entry: {\n\t\tapp: './src/app.js',\n\t\tsearch: './src/search.js'\n\t  },\n\t  output: {\n\t\tfilename: '[name].js',\n\t\tpath: __dirname + '/dist'\n\t  }\n\t}\n\n\t// 写入到硬盘：./dist/app.js, ./dist/search.js\n\t```\n\n- 在编译时不知道最终输出文件的 `publicPath` 的情况下，`publicPath` 留空，并且在入口起点设置 `__webpack_public_path__`\n\t```javascript\n\t__webpack_public_path__ = myRuntimePublicPath\n\n\t// 剩余的应用程序入口\n\t```\n\n\n","slug":"webpack入门-入口与出口","published":1,"updated":"2021-12-26T07:10:10.512Z","_id":"ckxlgzswz0007dqsjh8237myl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"入口及基础配置\"><a href=\"#入口及基础配置\" class=\"headerlink\" title=\"入口及基础配置\"></a>入口及基础配置</h2><ul>\n<li>webpack 该用哪个模块作为构建依赖图的开始</li>\n<li>在 <code>entry</code> 配置入口，可以指定一个或多个入口  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<span id=\"more\"></span></li>\n<li>单页面场景配置<ul>\n<li>将应用入口和第三方库分离</li>\n<li>可以使用 <code>CommonsChunkPlugin</code>  从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，<code>__webpack_require__()</code> 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tapp<span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\tvendors<span class=\"token operator\">:</span> <span class=\"token string\">'./src/vendors.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>多页面场景配置<ul>\n<li>不同页面入口分开配置，进入新页面时独立加载 html 和对应引用</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tpageOne<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageOne/index.js'</span><span class=\"token punctuation\">,</span>\n\tpageTwo<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageTwo/index.js'</span><span class=\"token punctuation\">,</span>\n\tpageThree<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageThree/index.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"出口及基础配置\"><a href=\"#出口及基础配置\" class=\"headerlink\" title=\"出口及基础配置\"></a>出口及基础配置</h2><ul>\n<li><p>webpack 输出 bundles 的目录及命名方式配置，默认为  <code>./dist</code></p>\n</li>\n<li><p><strong>可以指定多个入口，但只能有一个出口（output）</strong></p>\n</li>\n<li><p>在 <code>output</code> 字段配置：输出为一个对象，输出路径和文件名</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tpath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tfilename<span class=\"token operator\">:</span> <span class=\"token string\">'my-first-webpack.bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对于多文件入口，使用占位符保持文件名正确</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tapp<span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\tsearch<span class=\"token operator\">:</span> <span class=\"token string\">'./src/search.js'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tfilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n\tpath<span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/dist'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 留空，并且在入口起点设置 <code>__webpack_public_path__</code></p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">__webpack_public_path__ <span class=\"token operator\">=</span> myRuntimePublicPath\n\n<span class=\"token comment\">// 剩余的应用程序入口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"入口及基础配置\"><a href=\"#入口及基础配置\" class=\"headerlink\" title=\"入口及基础配置\"></a>入口及基础配置</h2><ul>\n<li>webpack 该用哪个模块作为构建依赖图的开始</li>\n<li>在 <code>entry</code> 配置入口，可以指定一个或多个入口  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./path/to/my/entry/file.js'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>","more":"</li>\n<li>单页面场景配置<ul>\n<li>将应用入口和第三方库分离</li>\n<li>可以使用 <code>CommonsChunkPlugin</code>  从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，<code>__webpack_require__()</code> 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tapp<span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\tvendors<span class=\"token operator\">:</span> <span class=\"token string\">'./src/vendors.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>多页面场景配置<ul>\n<li>不同页面入口分开配置，进入新页面时独立加载 html 和对应引用</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tpageOne<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageOne/index.js'</span><span class=\"token punctuation\">,</span>\n\tpageTwo<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageTwo/index.js'</span><span class=\"token punctuation\">,</span>\n\tpageThree<span class=\"token operator\">:</span> <span class=\"token string\">'./src/pageThree/index.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"出口及基础配置\"><a href=\"#出口及基础配置\" class=\"headerlink\" title=\"出口及基础配置\"></a>出口及基础配置</h2><ul>\n<li><p>webpack 输出 bundles 的目录及命名方式配置，默认为  <code>./dist</code></p>\n</li>\n<li><p><strong>可以指定多个入口，但只能有一个出口（output）</strong></p>\n</li>\n<li><p>在 <code>output</code> 字段配置：输出为一个对象，输出路径和文件名</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tpath<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tfilename<span class=\"token operator\">:</span> <span class=\"token string\">'my-first-webpack.bundle.js'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对于多文件入口，使用占位符保持文件名正确</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tapp<span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\tsearch<span class=\"token operator\">:</span> <span class=\"token string\">'./src/search.js'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\tfilename<span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n\tpath<span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/dist'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 留空，并且在入口起点设置 <code>__webpack_public_path__</code></p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">__webpack_public_path__ <span class=\"token operator\">=</span> myRuntimePublicPath\n\n<span class=\"token comment\">// 剩余的应用程序入口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>"},{"title":"我的2021年总结","date":"2021-12-22T07:44:53.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154750.jpg","_content":"## 关于工作\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n\n## 关于个人成长\n### 番茄钟学习记录\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png)\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n### 极简主义和焦虑\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”","source":"_posts/我的2021年总结.md","raw":"---\ntitle: 我的2021年总结\ndate: 2021-12-22 15:44:53\ncategories: 无限进步\ntags: 复盘与总结\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154750.jpg\n---\n## 关于工作\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n\n## 关于个人成长\n### 番茄钟学习记录\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png)\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n### 极简主义和焦虑\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”","slug":"我的2021年总结","published":1,"updated":"2021-12-26T07:09:40.561Z","_id":"ckxliuexj0000i0sj70t2142r","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png\"><br>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png\"><br>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n"},{"title":"JS 数组方法总结","date":"2021-12-23T07:50:56.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154802.jpg","_content":"## 数组基础操作\n- 创建数组的方式有两种\n\t- `new Array()`\n\t- `[]`\n- 添加数组\n\t- 尾部添加：`array.push(item)`\n\t- 头部添加：`array.unshift(item)`\n\t- 直接添加：`array[index] = item`\n\t- 指定索引位置添加：`array.splice(index, 0, item)`\n- 删除数组\n\t- 尾部删除：`array.pop(item)`\n\t- 头部删除：`array.shift(item)`\n\t- 指定索引位置删除：`array.splice(index, 1)`\n- 修改数组\n\t- 直接通过索引修改：`array[index] = item`\n\t- 修改指定位置的某一个元素：`array.splice(index, 1, item)`\n- 获取数组长度：`array.length` （最大的数字索引值 + 1）\n\n## 数组常用方法\n### 分割与组合方法\n- splice() 方法\n\t- `array.splice(index [, deleteCount, item1, item2])` 从索引 `index` 的位置开始删除 `deleteCount` 个元素，并在当前位置插入 `item1, item2` 元素，最后返回被处理后的元素数组\n\t- 常用应用场景\n\t\t- `array.splice(index, 1)` 从索引位置删除一个元素\n\t\t- `array.splice(index, 0, item)` 在索引位置添加一个元素\n\n- slice() 方法\n\t- `array.slice([start], [end])` 创建**一个新数组**，将索引从 `start` 到 `end` 的元素复制到新的数组，可以传入负\n\t- 常用应用场景\n\t\t- `array.slice()` 获取一个新的数组副本（不影响原数组）\n\n- concat() 方法\n\t- `array.concat(arg1, arg2...)` 创建**一个新数组**，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值\n\n### 循环数组方法\n- `for (let i = 0; i < array.length; i++)` 速度最快，可以兼容旧版浏览器\n\n- `for (let item of array)` 只能获取数组 item\n\n- `for (let key in array)` 不建议使用此方法循环数组\n\t- `for in` 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢\n\t- `for in` 会循环数组的所有属性，在处理“类数组”是没有必要的\n\n- forEach() 方法\n\t- `array.forEach((item, index, array) => {})` 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组\n\t- 注意 **forEach 没有返回值**\n\n### 查找数组方法\n- indexOf() / lastIndexOf() 方法\n\t- `array.indexOf(item, from)` 从索引 from 开始查找 item，如果没有找到则返回 -1\n\t- `array.lastIndexOf(item, from)` 从索引 from 开始查找 item，查找方向为**从右至左**,如果没有找到则返回 -1\n\n- includes() 方法\n\t- `array.indludes(item, from)` 从索引 from 开始查找 item，如果没有找到则**返回 false**\n\t- 检查是否包含某个元素**优先使用 includes()**\n\t- 注：includes() 能够正确识别 NAN\n\n- find() / findIndex() 方法\n\t- 如果返回为 true，则返回 item 并**停止迭代**\n\t- 如果返回为 false，则返回 undefined\n\t- 使用场景\n\t```javascript\n\tlet result = array.find((item, index, array) => {\n\t\titem.id === 1;\n\t});\n\t```\n\t- findIndex() 方法返回的是 index ，其余和 find() 方法没有区别\n\n- filter() 方法\n\t- 返回**所有匹配元素组成的数组**\n\t\t- 如果返回为 true，则 item 被放到结果数据，迭代继续直到完成\n\t\t- 如果什么都没有找到则返回空数组\n\t- 使用示例\n\t```javascript\n\t// 返回结果为数组\n\tlet results = array.filter((item, index, array) => {\n\t\titem.id < 3;\n\t});\n\t```\n\n### 转换数组方法\n- map() 方法\n\t- 对每个元素都调用函数，**返回一个新的数组**\n\t- 使用示例\n\t```javascript\n\tlet array = [1, 2, 3];\n\tlet result = array.map((item, index, array) => {\n\t\titem * 2;\n\t});\n\tconsole.log(result); // [1, 4, 6]\n\t```\n\n- sort() 方法\n\t- 对当前数组进行排序（**没有生成新数组**）\n\t- 默认使用字符串排序，如果是**数字排序需要指定参考函数**\n\t- 返回为负数，按照升序排列（**负数表示小于**）\n\t```javascript\n\tarray.sort( (a, b) => {a - b;});\n\t```\n\t- 返回为正数，按照降序排列（上述例子相反，**正数表示大于**）\n\n- reverse() 方法\n\t- 颠倒元素顺序\n\n- split() / join() 方法\n\t- `array.split(delim, [length])` 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度\n\t- `array.join(delim)` 使用分隔符 delim 将数组组成字符串\n\n- reduce() / reduceRight() 方法\n\t```javascript\n\tlet value = array.reduce((accumulator, item, index, array) => {\n\n\t}, [initial])\n\t```\n\t- 参数含义\n\t\t- accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代\n\t\t- item、index、array：数组元素、索引、数组本身\n\t- 使用示例：\n\t```javascript\n\tconst array = [1, 2, 3, 4, 5];\n\tlet result = array.reduce((sum, curent) => {sum + current}); // result = 15\n\t```\n\t- 注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议**始终指定初始值**\n\t- `array.reduceRight()` 的遍历方向为从右至左，其余和 reduce 相同\n\n- some() / every() 方法\n\t- `array.some(fn)` 类似于 `||` ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代\n\t- `array.every(fn)` 类似于 `&&` ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false\n\n- fill() 方法\n\t- `array.fill(value, start, end)`  从索引 start 到 end，用重复的 value 填充数组\n\n### 判断数组方法\n- `Object.prototype.toString.call()`\n\t- 每一个继承 Object 对象都有 toString 方法，**如果 toString 方法没有被重写的话，会返回 `[Object type]`**, type 是对象的类型\n\t- 常用于判断浏览器内置对象\n\t```javascript\n\tObject.prototype.toString.call([\"1\",\"2\"]) // \"[object Array]\"\n\tObject.prototype.toString.call(1) // \"[object Number]\"\n\tObject.prototype.toString.call(\"wujie\") // \"[object String]\"\n\tObject.prototype.toString.call(null) // \"[object null]\"\n\tObject.prototype.toString.call(undefined) // \"[object undefined]\"\n\tObject.prototype.toString.call(function(){}) // \"[object Function]\"\n\t```\n\n- `instanceof`\n\t- 内部机制是通过判断对象的原型链能否找到类型的 prototype\n\t- 如果能够找到 Array 原型，则判断为数组 `instanceof Array`\n\t- `instanceof` 只能判断对象类型，**不能判断原始类型**，并且所有对象类型 `instanceof Object` 都是 `true`\n\n- `Array.isArray()`\n\t- 优于 `instancof`，**因为 `Array.isArray` 可以检测出 iframs**\n\t- 可以通过 `Object.prototype.toString.call()` 实现 isArray() 方法\n\t\t```javascript\n\t\tif (!Array.isArray()) {\n\t\t    Array.isArray = function(arg) {\n\t\t        return Object.prototype.toString.call(arg) === \"[object Array]\";\n\t\t    }\n\t\t}\n\t\t```\n### 数组方法注意事项\n- `sort`、`reverse`、`splice` 方法修改的是数组本身","source":"_posts/JS-数组方法总结.md","raw":"---\ntitle: JS 数组方法总结\ndate: 2021-12-23 15:50:56\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154802.jpg\n---\n## 数组基础操作\n- 创建数组的方式有两种\n\t- `new Array()`\n\t- `[]`\n- 添加数组\n\t- 尾部添加：`array.push(item)`\n\t- 头部添加：`array.unshift(item)`\n\t- 直接添加：`array[index] = item`\n\t- 指定索引位置添加：`array.splice(index, 0, item)`\n- 删除数组\n\t- 尾部删除：`array.pop(item)`\n\t- 头部删除：`array.shift(item)`\n\t- 指定索引位置删除：`array.splice(index, 1)`\n- 修改数组\n\t- 直接通过索引修改：`array[index] = item`\n\t- 修改指定位置的某一个元素：`array.splice(index, 1, item)`\n- 获取数组长度：`array.length` （最大的数字索引值 + 1）\n\n## 数组常用方法\n### 分割与组合方法\n- splice() 方法\n\t- `array.splice(index [, deleteCount, item1, item2])` 从索引 `index` 的位置开始删除 `deleteCount` 个元素，并在当前位置插入 `item1, item2` 元素，最后返回被处理后的元素数组\n\t- 常用应用场景\n\t\t- `array.splice(index, 1)` 从索引位置删除一个元素\n\t\t- `array.splice(index, 0, item)` 在索引位置添加一个元素\n\n- slice() 方法\n\t- `array.slice([start], [end])` 创建**一个新数组**，将索引从 `start` 到 `end` 的元素复制到新的数组，可以传入负\n\t- 常用应用场景\n\t\t- `array.slice()` 获取一个新的数组副本（不影响原数组）\n\n- concat() 方法\n\t- `array.concat(arg1, arg2...)` 创建**一个新数组**，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值\n\n### 循环数组方法\n- `for (let i = 0; i < array.length; i++)` 速度最快，可以兼容旧版浏览器\n\n- `for (let item of array)` 只能获取数组 item\n\n- `for (let key in array)` 不建议使用此方法循环数组\n\t- `for in` 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢\n\t- `for in` 会循环数组的所有属性，在处理“类数组”是没有必要的\n\n- forEach() 方法\n\t- `array.forEach((item, index, array) => {})` 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组\n\t- 注意 **forEach 没有返回值**\n\n### 查找数组方法\n- indexOf() / lastIndexOf() 方法\n\t- `array.indexOf(item, from)` 从索引 from 开始查找 item，如果没有找到则返回 -1\n\t- `array.lastIndexOf(item, from)` 从索引 from 开始查找 item，查找方向为**从右至左**,如果没有找到则返回 -1\n\n- includes() 方法\n\t- `array.indludes(item, from)` 从索引 from 开始查找 item，如果没有找到则**返回 false**\n\t- 检查是否包含某个元素**优先使用 includes()**\n\t- 注：includes() 能够正确识别 NAN\n\n- find() / findIndex() 方法\n\t- 如果返回为 true，则返回 item 并**停止迭代**\n\t- 如果返回为 false，则返回 undefined\n\t- 使用场景\n\t```javascript\n\tlet result = array.find((item, index, array) => {\n\t\titem.id === 1;\n\t});\n\t```\n\t- findIndex() 方法返回的是 index ，其余和 find() 方法没有区别\n\n- filter() 方法\n\t- 返回**所有匹配元素组成的数组**\n\t\t- 如果返回为 true，则 item 被放到结果数据，迭代继续直到完成\n\t\t- 如果什么都没有找到则返回空数组\n\t- 使用示例\n\t```javascript\n\t// 返回结果为数组\n\tlet results = array.filter((item, index, array) => {\n\t\titem.id < 3;\n\t});\n\t```\n\n### 转换数组方法\n- map() 方法\n\t- 对每个元素都调用函数，**返回一个新的数组**\n\t- 使用示例\n\t```javascript\n\tlet array = [1, 2, 3];\n\tlet result = array.map((item, index, array) => {\n\t\titem * 2;\n\t});\n\tconsole.log(result); // [1, 4, 6]\n\t```\n\n- sort() 方法\n\t- 对当前数组进行排序（**没有生成新数组**）\n\t- 默认使用字符串排序，如果是**数字排序需要指定参考函数**\n\t- 返回为负数，按照升序排列（**负数表示小于**）\n\t```javascript\n\tarray.sort( (a, b) => {a - b;});\n\t```\n\t- 返回为正数，按照降序排列（上述例子相反，**正数表示大于**）\n\n- reverse() 方法\n\t- 颠倒元素顺序\n\n- split() / join() 方法\n\t- `array.split(delim, [length])` 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度\n\t- `array.join(delim)` 使用分隔符 delim 将数组组成字符串\n\n- reduce() / reduceRight() 方法\n\t```javascript\n\tlet value = array.reduce((accumulator, item, index, array) => {\n\n\t}, [initial])\n\t```\n\t- 参数含义\n\t\t- accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代\n\t\t- item、index、array：数组元素、索引、数组本身\n\t- 使用示例：\n\t```javascript\n\tconst array = [1, 2, 3, 4, 5];\n\tlet result = array.reduce((sum, curent) => {sum + current}); // result = 15\n\t```\n\t- 注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议**始终指定初始值**\n\t- `array.reduceRight()` 的遍历方向为从右至左，其余和 reduce 相同\n\n- some() / every() 方法\n\t- `array.some(fn)` 类似于 `||` ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代\n\t- `array.every(fn)` 类似于 `&&` ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false\n\n- fill() 方法\n\t- `array.fill(value, start, end)`  从索引 start 到 end，用重复的 value 填充数组\n\n### 判断数组方法\n- `Object.prototype.toString.call()`\n\t- 每一个继承 Object 对象都有 toString 方法，**如果 toString 方法没有被重写的话，会返回 `[Object type]`**, type 是对象的类型\n\t- 常用于判断浏览器内置对象\n\t```javascript\n\tObject.prototype.toString.call([\"1\",\"2\"]) // \"[object Array]\"\n\tObject.prototype.toString.call(1) // \"[object Number]\"\n\tObject.prototype.toString.call(\"wujie\") // \"[object String]\"\n\tObject.prototype.toString.call(null) // \"[object null]\"\n\tObject.prototype.toString.call(undefined) // \"[object undefined]\"\n\tObject.prototype.toString.call(function(){}) // \"[object Function]\"\n\t```\n\n- `instanceof`\n\t- 内部机制是通过判断对象的原型链能否找到类型的 prototype\n\t- 如果能够找到 Array 原型，则判断为数组 `instanceof Array`\n\t- `instanceof` 只能判断对象类型，**不能判断原始类型**，并且所有对象类型 `instanceof Object` 都是 `true`\n\n- `Array.isArray()`\n\t- 优于 `instancof`，**因为 `Array.isArray` 可以检测出 iframs**\n\t- 可以通过 `Object.prototype.toString.call()` 实现 isArray() 方法\n\t\t```javascript\n\t\tif (!Array.isArray()) {\n\t\t    Array.isArray = function(arg) {\n\t\t        return Object.prototype.toString.call(arg) === \"[object Array]\";\n\t\t    }\n\t\t}\n\t\t```\n### 数组方法注意事项\n- `sort`、`reverse`、`splice` 方法修改的是数组本身","slug":"JS-数组方法总结","published":1,"updated":"2021-12-26T07:10:00.877Z","_id":"ckxliyes10000uusj3ijpaojm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数组基础操作\"><a href=\"#数组基础操作\" class=\"headerlink\" title=\"数组基础操作\"></a>数组基础操作</h2><ul>\n<li>创建数组的方式有两种<ul>\n<li><code>new Array()</code></li>\n<li><code>[]</code></li>\n</ul>\n</li>\n<li>添加数组<ul>\n<li>尾部添加：<code>array.push(item)</code></li>\n<li>头部添加：<code>array.unshift(item)</code></li>\n<li>直接添加：<code>array[index] = item</code></li>\n<li>指定索引位置添加：<code>array.splice(index, 0, item)</code></li>\n</ul>\n</li>\n<li>删除数组<ul>\n<li>尾部删除：<code>array.pop(item)</code></li>\n<li>头部删除：<code>array.shift(item)</code></li>\n<li>指定索引位置删除：<code>array.splice(index, 1)</code></li>\n</ul>\n</li>\n<li>修改数组<ul>\n<li>直接通过索引修改：<code>array[index] = item</code></li>\n<li>修改指定位置的某一个元素：<code>array.splice(index, 1, item)</code></li>\n</ul>\n</li>\n<li>获取数组长度：<code>array.length</code> （最大的数字索引值 + 1）</li>\n</ul>\n<h2 id=\"数组常用方法\"><a href=\"#数组常用方法\" class=\"headerlink\" title=\"数组常用方法\"></a>数组常用方法</h2><h3 id=\"分割与组合方法\"><a href=\"#分割与组合方法\" class=\"headerlink\" title=\"分割与组合方法\"></a>分割与组合方法</h3><ul>\n<li><p>splice() 方法</p>\n<ul>\n<li><code>array.splice(index [, deleteCount, item1, item2])</code> 从索引 <code>index</code> 的位置开始删除 <code>deleteCount</code> 个元素，并在当前位置插入 <code>item1, item2</code> 元素，最后返回被处理后的元素数组</li>\n<li>常用应用场景<ul>\n<li><code>array.splice(index, 1)</code> 从索引位置删除一个元素</li>\n<li><code>array.splice(index, 0, item)</code> 在索引位置添加一个元素</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>slice() 方法</p>\n<ul>\n<li><code>array.slice([start], [end])</code> 创建<strong>一个新数组</strong>，将索引从 <code>start</code> 到 <code>end</code> 的元素复制到新的数组，可以传入负</li>\n<li>常用应用场景<ul>\n<li><code>array.slice()</code> 获取一个新的数组副本（不影响原数组）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>concat() 方法</p>\n<ul>\n<li><code>array.concat(arg1, arg2...)</code> 创建<strong>一个新数组</strong>，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环数组方法\"><a href=\"#循环数组方法\" class=\"headerlink\" title=\"循环数组方法\"></a>循环数组方法</h3><ul>\n<li><p><code>for (let i = 0; i &lt; array.length; i++)</code> 速度最快，可以兼容旧版浏览器</p>\n</li>\n<li><p><code>for (let item of array)</code> 只能获取数组 item</p>\n</li>\n<li><p><code>for (let key in array)</code> 不建议使用此方法循环数组</p>\n<ul>\n<li><code>for in</code> 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢</li>\n<li><code>for in</code> 会循环数组的所有属性，在处理“类数组”是没有必要的</li>\n</ul>\n</li>\n<li><p>forEach() 方法</p>\n<ul>\n<li><code>array.forEach((item, index, array) =&gt; &#123;&#125;)</code> 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组</li>\n<li>注意 <strong>forEach 没有返回值</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查找数组方法\"><a href=\"#查找数组方法\" class=\"headerlink\" title=\"查找数组方法\"></a>查找数组方法</h3><ul>\n<li><p>indexOf() / lastIndexOf() 方法</p>\n<ul>\n<li><code>array.indexOf(item, from)</code> 从索引 from 开始查找 item，如果没有找到则返回 -1</li>\n<li><code>array.lastIndexOf(item, from)</code> 从索引 from 开始查找 item，查找方向为<strong>从右至左</strong>,如果没有找到则返回 -1</li>\n</ul>\n</li>\n<li><p>includes() 方法</p>\n<ul>\n<li><code>array.indludes(item, from)</code> 从索引 from 开始查找 item，如果没有找到则<strong>返回 false</strong></li>\n<li>检查是否包含某个元素<strong>优先使用 includes()</strong></li>\n<li>注：includes() 能够正确识别 NAN</li>\n</ul>\n</li>\n<li><p>find() / findIndex() 方法</p>\n<ul>\n<li>如果返回为 true，则返回 item 并<strong>停止迭代</strong></li>\n<li>如果返回为 false，则返回 undefined</li>\n<li>使用场景<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>findIndex() 方法返回的是 index ，其余和 find() 方法没有区别</li>\n</ul>\n</li>\n<li><p>filter() 方法</p>\n<ul>\n<li>返回<strong>所有匹配元素组成的数组</strong><ul>\n<li>如果返回为 true，则 item 被放到结果数据，迭代继续直到完成</li>\n<li>如果什么都没有找到则返回空数组</li>\n</ul>\n</li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 返回结果为数组</span>\n<span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"转换数组方法\"><a href=\"#转换数组方法\" class=\"headerlink\" title=\"转换数组方法\"></a>转换数组方法</h3><ul>\n<li><p>map() 方法</p>\n<ul>\n<li>对每个元素都调用函数，<strong>返回一个新的数组</strong></li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>sort() 方法</p>\n<ul>\n<li>对当前数组进行排序（<strong>没有生成新数组</strong>）</li>\n<li>默认使用字符串排序，如果是<strong>数字排序需要指定参考函数</strong></li>\n<li>返回为负数，按照升序排列（<strong>负数表示小于</strong>）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>返回为正数，按照降序排列（上述例子相反，<strong>正数表示大于</strong>）</li>\n</ul>\n</li>\n<li><p>reverse() 方法</p>\n<ul>\n<li>颠倒元素顺序</li>\n</ul>\n</li>\n<li><p>split() / join() 方法</p>\n<ul>\n<li><code>array.split(delim, [length])</code> 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度</li>\n<li><code>array.join(delim)</code> 使用分隔符 delim 将数组组成字符串</li>\n</ul>\n</li>\n<li><p>reduce() / reduceRight() 方法</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initial<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>参数含义<ul>\n<li>accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代</li>\n<li>item、index、array：数组元素、索引、数组本身</li>\n</ul>\n</li>\n<li>使用示例：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> curent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>sum <span class=\"token operator\">+</span> current<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result = 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议<strong>始终指定初始值</strong></li>\n<li><code>array.reduceRight()</code> 的遍历方向为从右至左，其余和 reduce 相同</li>\n</ul>\n</li>\n<li><p>some() / every() 方法</p>\n<ul>\n<li><code>array.some(fn)</code> 类似于 <code>||</code> ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代</li>\n<li><code>array.every(fn)</code> 类似于 <code>&amp;&amp;</code> ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false</li>\n</ul>\n</li>\n<li><p>fill() 方法</p>\n<ul>\n<li><code>array.fill(value, start, end)</code>  从索引 start 到 end，用重复的 value 填充数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"判断数组方法\"><a href=\"#判断数组方法\" class=\"headerlink\" title=\"判断数组方法\"></a>判断数组方法</h3><ul>\n<li><p><code>Object.prototype.toString.call()</code></p>\n<ul>\n<li>每一个继承 Object 对象都有 toString 方法，<strong>如果 toString 方法没有被重写的话，会返回 <code>[Object type]</code></strong>, type 是对象的类型</li>\n<li>常用于判断浏览器内置对象<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Function]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><code>instanceof</code></p>\n<ul>\n<li>内部机制是通过判断对象的原型链能否找到类型的 prototype</li>\n<li>如果能够找到 Array 原型，则判断为数组 <code>instanceof Array</code></li>\n<li><code>instanceof</code> 只能判断对象类型，<strong>不能判断原始类型</strong>，并且所有对象类型 <code>instanceof Object</code> 都是 <code>true</code></li>\n</ul>\n</li>\n<li><p><code>Array.isArray()</code></p>\n<ul>\n<li>优于 <code>instancof</code>，<strong>因为 <code>Array.isArray</code> 可以检测出 iframs</strong></li>\n<li>可以通过 <code>Object.prototype.toString.call()</code> 实现 isArray() 方法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Array<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数组方法注意事项\"><a href=\"#数组方法注意事项\" class=\"headerlink\" title=\"数组方法注意事项\"></a>数组方法注意事项</h3></li>\n</ul>\n</li>\n<li><p><code>sort</code>、<code>reverse</code>、<code>splice</code> 方法修改的是数组本身</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组基础操作\"><a href=\"#数组基础操作\" class=\"headerlink\" title=\"数组基础操作\"></a>数组基础操作</h2><ul>\n<li>创建数组的方式有两种<ul>\n<li><code>new Array()</code></li>\n<li><code>[]</code></li>\n</ul>\n</li>\n<li>添加数组<ul>\n<li>尾部添加：<code>array.push(item)</code></li>\n<li>头部添加：<code>array.unshift(item)</code></li>\n<li>直接添加：<code>array[index] = item</code></li>\n<li>指定索引位置添加：<code>array.splice(index, 0, item)</code></li>\n</ul>\n</li>\n<li>删除数组<ul>\n<li>尾部删除：<code>array.pop(item)</code></li>\n<li>头部删除：<code>array.shift(item)</code></li>\n<li>指定索引位置删除：<code>array.splice(index, 1)</code></li>\n</ul>\n</li>\n<li>修改数组<ul>\n<li>直接通过索引修改：<code>array[index] = item</code></li>\n<li>修改指定位置的某一个元素：<code>array.splice(index, 1, item)</code></li>\n</ul>\n</li>\n<li>获取数组长度：<code>array.length</code> （最大的数字索引值 + 1）</li>\n</ul>\n<h2 id=\"数组常用方法\"><a href=\"#数组常用方法\" class=\"headerlink\" title=\"数组常用方法\"></a>数组常用方法</h2><h3 id=\"分割与组合方法\"><a href=\"#分割与组合方法\" class=\"headerlink\" title=\"分割与组合方法\"></a>分割与组合方法</h3><ul>\n<li><p>splice() 方法</p>\n<ul>\n<li><code>array.splice(index [, deleteCount, item1, item2])</code> 从索引 <code>index</code> 的位置开始删除 <code>deleteCount</code> 个元素，并在当前位置插入 <code>item1, item2</code> 元素，最后返回被处理后的元素数组</li>\n<li>常用应用场景<ul>\n<li><code>array.splice(index, 1)</code> 从索引位置删除一个元素</li>\n<li><code>array.splice(index, 0, item)</code> 在索引位置添加一个元素</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>slice() 方法</p>\n<ul>\n<li><code>array.slice([start], [end])</code> 创建<strong>一个新数组</strong>，将索引从 <code>start</code> 到 <code>end</code> 的元素复制到新的数组，可以传入负</li>\n<li>常用应用场景<ul>\n<li><code>array.slice()</code> 获取一个新的数组副本（不影响原数组）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>concat() 方法</p>\n<ul>\n<li><code>array.concat(arg1, arg2...)</code> 创建<strong>一个新数组</strong>，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环数组方法\"><a href=\"#循环数组方法\" class=\"headerlink\" title=\"循环数组方法\"></a>循环数组方法</h3><ul>\n<li><p><code>for (let i = 0; i &lt; array.length; i++)</code> 速度最快，可以兼容旧版浏览器</p>\n</li>\n<li><p><code>for (let item of array)</code> 只能获取数组 item</p>\n</li>\n<li><p><code>for (let key in array)</code> 不建议使用此方法循环数组</p>\n<ul>\n<li><code>for in</code> 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢</li>\n<li><code>for in</code> 会循环数组的所有属性，在处理“类数组”是没有必要的</li>\n</ul>\n</li>\n<li><p>forEach() 方法</p>\n<ul>\n<li><code>array.forEach((item, index, array) =&gt; &#123;&#125;)</code> 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组</li>\n<li>注意 <strong>forEach 没有返回值</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查找数组方法\"><a href=\"#查找数组方法\" class=\"headerlink\" title=\"查找数组方法\"></a>查找数组方法</h3><ul>\n<li><p>indexOf() / lastIndexOf() 方法</p>\n<ul>\n<li><code>array.indexOf(item, from)</code> 从索引 from 开始查找 item，如果没有找到则返回 -1</li>\n<li><code>array.lastIndexOf(item, from)</code> 从索引 from 开始查找 item，查找方向为<strong>从右至左</strong>,如果没有找到则返回 -1</li>\n</ul>\n</li>\n<li><p>includes() 方法</p>\n<ul>\n<li><code>array.indludes(item, from)</code> 从索引 from 开始查找 item，如果没有找到则<strong>返回 false</strong></li>\n<li>检查是否包含某个元素<strong>优先使用 includes()</strong></li>\n<li>注：includes() 能够正确识别 NAN</li>\n</ul>\n</li>\n<li><p>find() / findIndex() 方法</p>\n<ul>\n<li>如果返回为 true，则返回 item 并<strong>停止迭代</strong></li>\n<li>如果返回为 false，则返回 undefined</li>\n<li>使用场景<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>findIndex() 方法返回的是 index ，其余和 find() 方法没有区别</li>\n</ul>\n</li>\n<li><p>filter() 方法</p>\n<ul>\n<li>返回<strong>所有匹配元素组成的数组</strong><ul>\n<li>如果返回为 true，则 item 被放到结果数据，迭代继续直到完成</li>\n<li>如果什么都没有找到则返回空数组</li>\n</ul>\n</li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 返回结果为数组</span>\n<span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"转换数组方法\"><a href=\"#转换数组方法\" class=\"headerlink\" title=\"转换数组方法\"></a>转换数组方法</h3><ul>\n<li><p>map() 方法</p>\n<ul>\n<li>对每个元素都调用函数，<strong>返回一个新的数组</strong></li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>sort() 方法</p>\n<ul>\n<li>对当前数组进行排序（<strong>没有生成新数组</strong>）</li>\n<li>默认使用字符串排序，如果是<strong>数字排序需要指定参考函数</strong></li>\n<li>返回为负数，按照升序排列（<strong>负数表示小于</strong>）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>返回为正数，按照降序排列（上述例子相反，<strong>正数表示大于</strong>）</li>\n</ul>\n</li>\n<li><p>reverse() 方法</p>\n<ul>\n<li>颠倒元素顺序</li>\n</ul>\n</li>\n<li><p>split() / join() 方法</p>\n<ul>\n<li><code>array.split(delim, [length])</code> 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度</li>\n<li><code>array.join(delim)</code> 使用分隔符 delim 将数组组成字符串</li>\n</ul>\n</li>\n<li><p>reduce() / reduceRight() 方法</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initial<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>参数含义<ul>\n<li>accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代</li>\n<li>item、index、array：数组元素、索引、数组本身</li>\n</ul>\n</li>\n<li>使用示例：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> curent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>sum <span class=\"token operator\">+</span> current<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result = 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议<strong>始终指定初始值</strong></li>\n<li><code>array.reduceRight()</code> 的遍历方向为从右至左，其余和 reduce 相同</li>\n</ul>\n</li>\n<li><p>some() / every() 方法</p>\n<ul>\n<li><code>array.some(fn)</code> 类似于 <code>||</code> ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代</li>\n<li><code>array.every(fn)</code> 类似于 <code>&amp;&amp;</code> ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false</li>\n</ul>\n</li>\n<li><p>fill() 方法</p>\n<ul>\n<li><code>array.fill(value, start, end)</code>  从索引 start 到 end，用重复的 value 填充数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"判断数组方法\"><a href=\"#判断数组方法\" class=\"headerlink\" title=\"判断数组方法\"></a>判断数组方法</h3><ul>\n<li><p><code>Object.prototype.toString.call()</code></p>\n<ul>\n<li>每一个继承 Object 对象都有 toString 方法，<strong>如果 toString 方法没有被重写的话，会返回 <code>[Object type]</code></strong>, type 是对象的类型</li>\n<li>常用于判断浏览器内置对象<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Function]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><code>instanceof</code></p>\n<ul>\n<li>内部机制是通过判断对象的原型链能否找到类型的 prototype</li>\n<li>如果能够找到 Array 原型，则判断为数组 <code>instanceof Array</code></li>\n<li><code>instanceof</code> 只能判断对象类型，<strong>不能判断原始类型</strong>，并且所有对象类型 <code>instanceof Object</code> 都是 <code>true</code></li>\n</ul>\n</li>\n<li><p><code>Array.isArray()</code></p>\n<ul>\n<li>优于 <code>instancof</code>，<strong>因为 <code>Array.isArray</code> 可以检测出 iframs</strong></li>\n<li>可以通过 <code>Object.prototype.toString.call()</code> 实现 isArray() 方法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Array<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数组方法注意事项\"><a href=\"#数组方法注意事项\" class=\"headerlink\" title=\"数组方法注意事项\"></a>数组方法注意事项</h3></li>\n</ul>\n</li>\n<li><p><code>sort</code>、<code>reverse</code>、<code>splice</code> 方法修改的是数组本身</p>\n</li>\n</ul>\n"},{"title":"JS 继承实现方式整理","date":"2021-12-24T07:55:02.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225161114.jpg","_content":"## 原型链继承\n- 将子类的原型对象指向父类的实例\n- 优点：继承了父类的模板，又继承了父类的原型对象\n- 缺点：\n\t- 无法实现多继承(因为已经指定了原型对象了)\n\t- 父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响\n\t- 创建子类时，无法向父类构造函数传参数\n```javascript\nfunction Parent() {\n\tthis.info = {\n\t\tname: \"Parent\",\n\t\tage: 18\n\t}\n}\n\nParent.prototype.getInfo = function() {\n\tconsole.log(this.info);\n}\n\nfunction Child() {\n}\n\n// 将子类的原型对象指向父类的实例\nChild.prototype = new Parent();\n\nlet child = new Child();\nchild.info.gender = \"M\";\nchild.getInfo(); // { name: 'Parent', age: 18, gender: 'M' }\n```\n\n## 构造函数继承\n- 在子类构造函数内部使用 `apply` 或 `call` 来调用父类构造函数，复制父类的实例属性给子类\n- 优点：\n\t- 解决了原型链继承中子类实例共享父类引用对象的问题，实现**多继承**\n\t- 创建子类实例时，可以向父类传递参数\n- 缺点：\n\t- 构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）\n```javascript\nfunction Parent(name) {\n  this.info = {\n    name,\n    hobby: [\"football\", \"basketball\"],\n  };\n}\n\nParent.prototype.getInfo = function () {\n  console.log(this.info);\n};\n\nfunction Child(name, age) {\n  // 继承父类属性\n  Parent.call(this, name);\n  this.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 组合继承\n- 使用**原型链继承**保证子类继承父类**原型**的属性和方法\n- 使用**构造继承**保证子类继承父类**实例**的属性和方法\n```js\nfunction Parent(name) {\n\tthis.info = {\n\t\tname,\n\t\thobby: [\"football\", \"basketball\"],\n\t};\n}\n\nParent.prototype.getInfo = function () {\n\tconsole.log(this.info);\n};\n\nfunction Child(name, age) {\n\t// 继承父类属性\n\tParent.call(this, name);\n\tthis.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 原型式继承\n- 通过拷贝对象引用方式实现，但可能导致对象被修改\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nlet child = Object.create(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\n```\n\n## 寄生式继承\n- 通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nfunction clone(original) {\n\tlet clone = Object.create(original);\n\tclone.getHobby = function () {\n\t\treturn this.hobby;\n\t};\n\treturn clone;\n}\n\nlet child = clone(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\nconsole.log(child.getHobby()); // [ 'football', 'basketball', 'soccer' ]\n\n```\n\n## 寄生组合式继承\n- 将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解\n- 优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题\n```js\nfunction Parent() {\n\tthis.name = \"parent\";\n\tthis.hobby = [\"football\", \"basketball\"];\n}\n\nParent.prototype.getHobby = function () {\n\treturn this.hobby;\n};\n\nfunction Child() {\n\tParent.call(this);\n\tthis.friend = \"child friends\";\n}\n\nfunction clone(parent, child) {\n\tchild.prototype = Object.create(parent.prototype);\n\tchild.prototype.constructor = child;\n}\n\nclone(Parent, Child);\n\nChild.prototype.getFriend = function () {\n\treturn this.friend;\n};\n\nlet child = new Child();\nconsole.log(child.getHobby()); // [ 'football', 'basketball' ]\n\tconsole.log(child.getFriend()); // child friend\n```\n\n## class 继承\n- 通过 `extends`、`super` 实现\n```javascript\nclass Parent {\n\tconstructor (name) {\n\t\tthis.name = name;\n\t}\n\tgetName() {\n\t\tconsole.log(this.name);\n\t}\n}\nclass Child extends Parent {\n\tconstructor(name) {\n\t\tsuper(name);\n\t\tthis.age = 18;\n\t}\n}\n```","source":"_posts/JS-继承实现方式整理.md","raw":"---\ntitle: JS 继承实现方式整理\ndate: 2021-12-24 15:55:02\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225161114.jpg\n---\n## 原型链继承\n- 将子类的原型对象指向父类的实例\n- 优点：继承了父类的模板，又继承了父类的原型对象\n- 缺点：\n\t- 无法实现多继承(因为已经指定了原型对象了)\n\t- 父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响\n\t- 创建子类时，无法向父类构造函数传参数\n```javascript\nfunction Parent() {\n\tthis.info = {\n\t\tname: \"Parent\",\n\t\tage: 18\n\t}\n}\n\nParent.prototype.getInfo = function() {\n\tconsole.log(this.info);\n}\n\nfunction Child() {\n}\n\n// 将子类的原型对象指向父类的实例\nChild.prototype = new Parent();\n\nlet child = new Child();\nchild.info.gender = \"M\";\nchild.getInfo(); // { name: 'Parent', age: 18, gender: 'M' }\n```\n\n## 构造函数继承\n- 在子类构造函数内部使用 `apply` 或 `call` 来调用父类构造函数，复制父类的实例属性给子类\n- 优点：\n\t- 解决了原型链继承中子类实例共享父类引用对象的问题，实现**多继承**\n\t- 创建子类实例时，可以向父类传递参数\n- 缺点：\n\t- 构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）\n```javascript\nfunction Parent(name) {\n  this.info = {\n    name,\n    hobby: [\"football\", \"basketball\"],\n  };\n}\n\nParent.prototype.getInfo = function () {\n  console.log(this.info);\n};\n\nfunction Child(name, age) {\n  // 继承父类属性\n  Parent.call(this, name);\n  this.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 组合继承\n- 使用**原型链继承**保证子类继承父类**原型**的属性和方法\n- 使用**构造继承**保证子类继承父类**实例**的属性和方法\n```js\nfunction Parent(name) {\n\tthis.info = {\n\t\tname,\n\t\thobby: [\"football\", \"basketball\"],\n\t};\n}\n\nParent.prototype.getInfo = function () {\n\tconsole.log(this.info);\n};\n\nfunction Child(name, age) {\n\t// 继承父类属性\n\tParent.call(this, name);\n\tthis.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 原型式继承\n- 通过拷贝对象引用方式实现，但可能导致对象被修改\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nlet child = Object.create(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\n```\n\n## 寄生式继承\n- 通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nfunction clone(original) {\n\tlet clone = Object.create(original);\n\tclone.getHobby = function () {\n\t\treturn this.hobby;\n\t};\n\treturn clone;\n}\n\nlet child = clone(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\nconsole.log(child.getHobby()); // [ 'football', 'basketball', 'soccer' ]\n\n```\n\n## 寄生组合式继承\n- 将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解\n- 优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题\n```js\nfunction Parent() {\n\tthis.name = \"parent\";\n\tthis.hobby = [\"football\", \"basketball\"];\n}\n\nParent.prototype.getHobby = function () {\n\treturn this.hobby;\n};\n\nfunction Child() {\n\tParent.call(this);\n\tthis.friend = \"child friends\";\n}\n\nfunction clone(parent, child) {\n\tchild.prototype = Object.create(parent.prototype);\n\tchild.prototype.constructor = child;\n}\n\nclone(Parent, Child);\n\nChild.prototype.getFriend = function () {\n\treturn this.friend;\n};\n\nlet child = new Child();\nconsole.log(child.getHobby()); // [ 'football', 'basketball' ]\n\tconsole.log(child.getFriend()); // child friend\n```\n\n## class 继承\n- 通过 `extends`、`super` 实现\n```javascript\nclass Parent {\n\tconstructor (name) {\n\t\tthis.name = name;\n\t}\n\tgetName() {\n\t\tconsole.log(this.name);\n\t}\n}\nclass Child extends Parent {\n\tconstructor(name) {\n\t\tsuper(name);\n\t\tthis.age = 18;\n\t}\n}\n```","slug":"JS-继承实现方式整理","published":1,"updated":"2021-12-26T07:09:52.676Z","_id":"ckxlj842d0000p1sj7fkphul9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><ul>\n<li>将子类的原型对象指向父类的实例</li>\n<li>优点：继承了父类的模板，又继承了父类的原型对象</li>\n<li>缺点：<ul>\n<li>无法实现多继承(因为已经指定了原型对象了)</li>\n<li>父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</li>\n<li>创建子类时，无法向父类构造函数传参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span>\n\t\tage<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 将子类的原型对象指向父类的实例</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'Parent', age: 18, gender: 'M' &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><ul>\n<li>在子类构造函数内部使用 <code>apply</code> 或 <code>call</code> 来调用父类构造函数，复制父类的实例属性给子类</li>\n<li>优点：<ul>\n<li>解决了原型链继承中子类实例共享父类引用对象的问题，实现<strong>多继承</strong></li>\n<li>创建子类实例时，可以向父类传递参数</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token punctuation\">,</span>\n    hobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 继承父类属性</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><ul>\n<li>使用<strong>原型链继承</strong>保证子类继承父类<strong>原型</strong>的属性和方法</li>\n<li>使用<strong>构造继承</strong>保证子类继承父类<strong>实例</strong>的属性和方法<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token punctuation\">,</span>\n\t\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 继承父类属性</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><ul>\n<li>通过拷贝对象引用方式实现，但可能导致对象被修改<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><ul>\n<li>通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><ul>\n<li>将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解</li>\n<li>优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> <span class=\"token string\">\"child friends\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball' ]</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child friend</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h2><ul>\n<li>通过 <code>extends</code>、<code>super</code> 实现<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><ul>\n<li>将子类的原型对象指向父类的实例</li>\n<li>优点：继承了父类的模板，又继承了父类的原型对象</li>\n<li>缺点：<ul>\n<li>无法实现多继承(因为已经指定了原型对象了)</li>\n<li>父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</li>\n<li>创建子类时，无法向父类构造函数传参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span>\n\t\tage<span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 将子类的原型对象指向父类的实例</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'Parent', age: 18, gender: 'M' &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><ul>\n<li>在子类构造函数内部使用 <code>apply</code> 或 <code>call</code> 来调用父类构造函数，复制父类的实例属性给子类</li>\n<li>优点：<ul>\n<li>解决了原型链继承中子类实例共享父类引用对象的问题，实现<strong>多继承</strong></li>\n<li>创建子类实例时，可以向父类传递参数</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token punctuation\">,</span>\n    hobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 继承父类属性</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><ul>\n<li>使用<strong>原型链继承</strong>保证子类继承父类<strong>原型</strong>的属性和方法</li>\n<li>使用<strong>构造继承</strong>保证子类继承父类<strong>实例</strong>的属性和方法<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token punctuation\">,</span>\n\t\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 继承父类属性</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><ul>\n<li>通过拷贝对象引用方式实现，但可能导致对象被修改<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><ul>\n<li>通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\tname<span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\thobby<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><ul>\n<li>将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解</li>\n<li>优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> <span class=\"token string\">\"child friends\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball' ]</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child friend</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h2><ul>\n<li>通过 <code>extends</code>、<code>super</code> 实现<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"JS 数据类型基础梳理","date":"2021-12-28T13:00:53.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211228210115.jpg","_content":"## JS 的数据类型基础\n- JS 中数据类型分为两大类：基础数据类型，引用数据类型\n\n- 基础数据类型有 7 种，分别为：\n\t- Number 类型\n\t- String 类型\n\t- Boolean 类型\n\t- Null：“无” “空” “不存在”\n\t- Undefined：已被声明但未被赋值\n\t- Symbol：用于对象唯一标识符\n\t- BigInt 类型：表示大于或小于 2^53-1 的数字\n\n- 引用数据类型： Object 为引用数据类型，还有其他子类型，如：`Function`、`Array`、`RegExp`、`Date`\n\n- 基础数据类型存储在**栈内存**，被引用或者拷贝的时候，会创建一个完全相等的变量\n\n- 引用类型存储在**堆内存**，存储的是地址，多个引用指向同一个地址\n\n## JS 数据类型判断方式\n- typeof 判断数据类型\n  - typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）\n  - `typeof null` 结果是 object 是 JS 早期错误，为兼容而保留\n  - `typeof alert` alert 在 JS 中是一个函数\n  ```javascript\n  console.log(typeof undefined); // \"undefined\"\n  console.log(typeof 0); // \"number\"\n  console.log(typeof 10n); // \"bigint\"\n  console.log(typeof true); // \"boolean\"\n  console.log(typeof \"wujie\"); // \"string\"\n  console.log(typeof Symbol(\"id\")); // \"symbol\"\n  console.log(typeof Math); // \"object\"  (1)\n  console.log(typeof null); // \"object\"  (2)\n  console.log(typeof alert); // \"function\"  (3)\n  ```\n\n- instanceof 判断数据类型\n  - 通过判断对象原型链上的对象类型，来推断新对象的数据类型\n  - 适用于判断引用数据类型，但不适合基础数据类型判断\n  - 实现 instanceof 封装代码示例\n    ```js\n    function myInstanceof(left, right) {\n        // 先使用 typef 判断，如果不是引用数据类型则直接返回\n        if (typeof left !== \"object\" || left === null) {\n            return false;\n        }\n        // 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,\n        let proto = Object.getPrototypeOf(left);\n        while (true) {\n            // 没有找到相同原型对象则返回 false\n            if (proto === null) {\n                return false;\n            }\n\n            // 找到相同的原型对象才返回 true\n            if (proto === right.prototype) {\n                return true;\n            }\n            proto = Object.getPrototypeOf(left);\n        }\n    }\n\n    console.log(myInstanceof(new Number(10), Number)); // true\n    console.log(myInstanceof(10, Number)); // false\n    ```\n\n- Object.prototype.toString 方法\n  - 对象的原型方法，可以统一返回格式为 `[object Xxx]` 的字符串（注意 Xxx 第一个字母大写）\n  - 对于 Object 对象，可以直接调用，其他对象需要通过 call 调用\n    ```js\n    console.log(Object.prototype.toString({})); // [object Object]\n    console.log(Object.prototype.toString.call({})); // [object Object]\n    console.log(Object.prototype.toString.call(10)); // [object Number]\n    console.log(Object.prototype.toString.call(\"10\")); // [object String]\n    console.log(Object.prototype.toString.call(true)); // [object Boolean]\n    console.log(Object.prototype.toString.call(null)); // [object Null]\n    console.log(Object.prototype.toString.call(undefined)); // [object Undefined]\n    console.log(Object.prototype.toString.call(function () {})); // [object Function]\n    console.log(Object.prototype.toString.call(/wujiel/g)); // [object RegExp]\n    console.log(Object.prototype.toString.call(new Date())); // [object Date]\n    console.log(Object.prototype.toString.call([])); // [object Array]\n    ```\n\n- 全局通用的类型判断方法：可以通过 `typeof` +` Object.prototype.string.call()` 来实现\n    ```js\n    function getType(obj) {\n      let type = typeof obj;\n\n      // 基础类型直接返回\n      if (type !== \"object\") {\n        return type;\n      }\n\n      // 引用类型 toString 判断,通过正则表达式过滤结果\n      return Object.prototype.toString\n        .call(obj)\n        .replace(/^\\[object (\\S+)]$/, \"$1\")\n        .toLowerCase();\n    }\n\n    console.log(getType(10)); // number\n    console.log(getType([])); // array\n    console.log(getType({})); // object\n    console.log(getType(function () {})); // function\n    console.log(getType(new Date())); // date\n    ```\n\n\n## JS 数据类型转换\n- JS 的数据类型转换分为：强制类型转换，隐式类型转换\n\n### 强制类型转换\n- 通过 `Number() parseInt() parseFloat() toString() String Boolean()` 方法实现的数据转换\n\n- `Number()` 类型转换规则\n\t- 数字，返回自身\n\t- Boolean，false 转换为 0，true 转换为 1\n\t- null 转换为 0\n\t- undefined 转换为 NaN\n\t- Symbol 抛出异常\n\t- 对象，使用 `Object` 转换规则\n\t- 字符串\n\t\t- 如果只包含数字，转换为十进制数字\n\t\t- 如果包含有效浮点格式转化为浮点数\n\t\t- 空字符串转换为 0\n\t\t- 以上三种之外的转换为 NaN\n\n- `Boolean()` 类型装转换规则\n\t- 除了 undefined、null、false、\"\" 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true\n\n### 隐式类型转换\n- 逻辑运算操作符（&& || !），运算符（+ - * /），关系操作符（> < >= <=），相等运算符（`==`），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换\n\n- `==` 隐式转换规则\n\t- 如果类型相同，无须转换\n\t- 如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false\n\t- 如果其中一个是 Symbol 类型，那么返回 false\n\t- 两个如果为 string 和 number 类型，那么就会将 string 转换为 number\n\t- 如果一个操作值是 boolean，那么转换 boolean 为 number\n\t- 如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）\n\n- `+` 隐式转换规则\n\t- 其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接\n\t- 其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算\n\t- 其中一个是字符串、一个是数字，则按照字符串规则进行拼接\n\t- 示例代码\n\t```js\n\tconsole.log(1 + true); // 2\n\tconsole.log(1 + null); // 1\n\tconsole.log(1 + undefined); // 1NaN\n\tconsole.log(1 + []); // 1{}\n\tconsole.log(1 + {}); // 1[object, object]\n\tconsole.log(1 + \"1\"); // 11\n\t```\n\n### Object 隐式转换规则\n- 如果有 `Symbol.toPrimitive` 方法，优先调用\n- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n- 以上三种没有转换成功则报错\n- 示例代码\n```js\nlet object = {\n  value: 1,\n  valueOf() {\n    return 2;\n  },\n  toString() {\n    return 3;\n  },\n  [Symbol.toPrimitive]() {\n    return 4;\n  },\n};\n\nconsole.log(1 + object); // 5 优先调用 Symbol.toPrimitive 方法\nconsole.log(1 + {}); // 1[object Object] 调用 toString 方法\nconsole.log(1 + [1, 2, undefined, 3]); // 11,2,,3\n```","source":"_posts/JS-数据类型基础梳理.md","raw":"\n---\ntitle: JS 数据类型基础梳理\ndate: 2021-12-28 21:00:53\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211228210115.jpg\n---\n## JS 的数据类型基础\n- JS 中数据类型分为两大类：基础数据类型，引用数据类型\n\n- 基础数据类型有 7 种，分别为：\n\t- Number 类型\n\t- String 类型\n\t- Boolean 类型\n\t- Null：“无” “空” “不存在”\n\t- Undefined：已被声明但未被赋值\n\t- Symbol：用于对象唯一标识符\n\t- BigInt 类型：表示大于或小于 2^53-1 的数字\n\n- 引用数据类型： Object 为引用数据类型，还有其他子类型，如：`Function`、`Array`、`RegExp`、`Date`\n\n- 基础数据类型存储在**栈内存**，被引用或者拷贝的时候，会创建一个完全相等的变量\n\n- 引用类型存储在**堆内存**，存储的是地址，多个引用指向同一个地址\n\n## JS 数据类型判断方式\n- typeof 判断数据类型\n  - typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）\n  - `typeof null` 结果是 object 是 JS 早期错误，为兼容而保留\n  - `typeof alert` alert 在 JS 中是一个函数\n  ```javascript\n  console.log(typeof undefined); // \"undefined\"\n  console.log(typeof 0); // \"number\"\n  console.log(typeof 10n); // \"bigint\"\n  console.log(typeof true); // \"boolean\"\n  console.log(typeof \"wujie\"); // \"string\"\n  console.log(typeof Symbol(\"id\")); // \"symbol\"\n  console.log(typeof Math); // \"object\"  (1)\n  console.log(typeof null); // \"object\"  (2)\n  console.log(typeof alert); // \"function\"  (3)\n  ```\n\n- instanceof 判断数据类型\n  - 通过判断对象原型链上的对象类型，来推断新对象的数据类型\n  - 适用于判断引用数据类型，但不适合基础数据类型判断\n  - 实现 instanceof 封装代码示例\n    ```js\n    function myInstanceof(left, right) {\n        // 先使用 typef 判断，如果不是引用数据类型则直接返回\n        if (typeof left !== \"object\" || left === null) {\n            return false;\n        }\n        // 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,\n        let proto = Object.getPrototypeOf(left);\n        while (true) {\n            // 没有找到相同原型对象则返回 false\n            if (proto === null) {\n                return false;\n            }\n\n            // 找到相同的原型对象才返回 true\n            if (proto === right.prototype) {\n                return true;\n            }\n            proto = Object.getPrototypeOf(left);\n        }\n    }\n\n    console.log(myInstanceof(new Number(10), Number)); // true\n    console.log(myInstanceof(10, Number)); // false\n    ```\n\n- Object.prototype.toString 方法\n  - 对象的原型方法，可以统一返回格式为 `[object Xxx]` 的字符串（注意 Xxx 第一个字母大写）\n  - 对于 Object 对象，可以直接调用，其他对象需要通过 call 调用\n    ```js\n    console.log(Object.prototype.toString({})); // [object Object]\n    console.log(Object.prototype.toString.call({})); // [object Object]\n    console.log(Object.prototype.toString.call(10)); // [object Number]\n    console.log(Object.prototype.toString.call(\"10\")); // [object String]\n    console.log(Object.prototype.toString.call(true)); // [object Boolean]\n    console.log(Object.prototype.toString.call(null)); // [object Null]\n    console.log(Object.prototype.toString.call(undefined)); // [object Undefined]\n    console.log(Object.prototype.toString.call(function () {})); // [object Function]\n    console.log(Object.prototype.toString.call(/wujiel/g)); // [object RegExp]\n    console.log(Object.prototype.toString.call(new Date())); // [object Date]\n    console.log(Object.prototype.toString.call([])); // [object Array]\n    ```\n\n- 全局通用的类型判断方法：可以通过 `typeof` +` Object.prototype.string.call()` 来实现\n    ```js\n    function getType(obj) {\n      let type = typeof obj;\n\n      // 基础类型直接返回\n      if (type !== \"object\") {\n        return type;\n      }\n\n      // 引用类型 toString 判断,通过正则表达式过滤结果\n      return Object.prototype.toString\n        .call(obj)\n        .replace(/^\\[object (\\S+)]$/, \"$1\")\n        .toLowerCase();\n    }\n\n    console.log(getType(10)); // number\n    console.log(getType([])); // array\n    console.log(getType({})); // object\n    console.log(getType(function () {})); // function\n    console.log(getType(new Date())); // date\n    ```\n\n\n## JS 数据类型转换\n- JS 的数据类型转换分为：强制类型转换，隐式类型转换\n\n### 强制类型转换\n- 通过 `Number() parseInt() parseFloat() toString() String Boolean()` 方法实现的数据转换\n\n- `Number()` 类型转换规则\n\t- 数字，返回自身\n\t- Boolean，false 转换为 0，true 转换为 1\n\t- null 转换为 0\n\t- undefined 转换为 NaN\n\t- Symbol 抛出异常\n\t- 对象，使用 `Object` 转换规则\n\t- 字符串\n\t\t- 如果只包含数字，转换为十进制数字\n\t\t- 如果包含有效浮点格式转化为浮点数\n\t\t- 空字符串转换为 0\n\t\t- 以上三种之外的转换为 NaN\n\n- `Boolean()` 类型装转换规则\n\t- 除了 undefined、null、false、\"\" 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true\n\n### 隐式类型转换\n- 逻辑运算操作符（&& || !），运算符（+ - * /），关系操作符（> < >= <=），相等运算符（`==`），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换\n\n- `==` 隐式转换规则\n\t- 如果类型相同，无须转换\n\t- 如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false\n\t- 如果其中一个是 Symbol 类型，那么返回 false\n\t- 两个如果为 string 和 number 类型，那么就会将 string 转换为 number\n\t- 如果一个操作值是 boolean，那么转换 boolean 为 number\n\t- 如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）\n\n- `+` 隐式转换规则\n\t- 其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接\n\t- 其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算\n\t- 其中一个是字符串、一个是数字，则按照字符串规则进行拼接\n\t- 示例代码\n\t```js\n\tconsole.log(1 + true); // 2\n\tconsole.log(1 + null); // 1\n\tconsole.log(1 + undefined); // 1NaN\n\tconsole.log(1 + []); // 1{}\n\tconsole.log(1 + {}); // 1[object, object]\n\tconsole.log(1 + \"1\"); // 11\n\t```\n\n### Object 隐式转换规则\n- 如果有 `Symbol.toPrimitive` 方法，优先调用\n- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n- 以上三种没有转换成功则报错\n- 示例代码\n```js\nlet object = {\n  value: 1,\n  valueOf() {\n    return 2;\n  },\n  toString() {\n    return 3;\n  },\n  [Symbol.toPrimitive]() {\n    return 4;\n  },\n};\n\nconsole.log(1 + object); // 5 优先调用 Symbol.toPrimitive 方法\nconsole.log(1 + {}); // 1[object Object] 调用 toString 方法\nconsole.log(1 + [1, 2, undefined, 3]); // 11,2,,3\n```","slug":"JS-数据类型基础梳理","published":1,"updated":"2021-12-28T13:04:26.548Z","_id":"ckxq4c5u80000hssjeqzl6to2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JS-的数据类型基础\"><a href=\"#JS-的数据类型基础\" class=\"headerlink\" title=\"JS 的数据类型基础\"></a>JS 的数据类型基础</h2><ul>\n<li><p>JS 中数据类型分为两大类：基础数据类型，引用数据类型</p>\n</li>\n<li><p>基础数据类型有 7 种，分别为：</p>\n<ul>\n<li>Number 类型</li>\n<li>String 类型</li>\n<li>Boolean 类型</li>\n<li>Null：“无” “空” “不存在”</li>\n<li>Undefined：已被声明但未被赋值</li>\n<li>Symbol：用于对象唯一标识符</li>\n<li>BigInt 类型：表示大于或小于 2^53-1 的数字</li>\n</ul>\n</li>\n<li><p>引用数据类型： Object 为引用数据类型，还有其他子类型，如：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code></p>\n</li>\n<li><p>基础数据类型存储在<strong>栈内存</strong>，被引用或者拷贝的时候，会创建一个完全相等的变量</p>\n</li>\n<li><p>引用类型存储在<strong>堆内存</strong>，存储的是地址，多个引用指向同一个地址</p>\n</li>\n</ul>\n<h2 id=\"JS-数据类型判断方式\"><a href=\"#JS-数据类型判断方式\" class=\"headerlink\" title=\"JS 数据类型判断方式\"></a>JS 数据类型判断方式</h2><ul>\n<li><p>typeof 判断数据类型</p>\n<ul>\n<li>typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）</li>\n<li><code>typeof null</code> 结果是 object 是 JS 早期错误，为兼容而保留</li>\n<li><code>typeof alert</code> alert 在 JS 中是一个函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bigint\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (1)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (2)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"  (3)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>instanceof 判断数据类型</p>\n<ul>\n<li>通过判断对象原型链上的对象类型，来推断新对象的数据类型</li>\n<li>适用于判断引用数据类型，但不适合基础数据类型判断</li>\n<li>实现 instanceof 封装代码示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 先使用 typef 判断，如果不是引用数据类型则直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,</span>\n    <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 没有找到相同原型对象则返回 false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 找到相同的原型对象才返回 true</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Object.prototype.toString 方法</p>\n<ul>\n<li>对象的原型方法，可以统一返回格式为 <code>[object Xxx]</code> 的字符串（注意 Xxx 第一个字母大写）</li>\n<li>对于 Object 对象，可以直接调用，其他对象需要通过 call 调用<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object String]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">wujiel</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object RegExp]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Date]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>全局通用的类型判断方法：可以通过 <code>typeof</code> +<code> Object.prototype.string.call()</code> 来实现</p>\n  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 基础类型直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 引用类型 toString 判断,通过正则表达式过滤结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JS-数据类型转换\"><a href=\"#JS-数据类型转换\" class=\"headerlink\" title=\"JS 数据类型转换\"></a>JS 数据类型转换</h2><ul>\n<li>JS 的数据类型转换分为：强制类型转换，隐式类型转换</li>\n</ul>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><ul>\n<li><p>通过 <code>Number() parseInt() parseFloat() toString() String Boolean()</code> 方法实现的数据转换</p>\n</li>\n<li><p><code>Number()</code> 类型转换规则</p>\n<ul>\n<li>数字，返回自身</li>\n<li>Boolean，false 转换为 0，true 转换为 1</li>\n<li>null 转换为 0</li>\n<li>undefined 转换为 NaN</li>\n<li>Symbol 抛出异常</li>\n<li>对象，使用 <code>Object</code> 转换规则</li>\n<li>字符串<ul>\n<li>如果只包含数字，转换为十进制数字</li>\n<li>如果包含有效浮点格式转化为浮点数</li>\n<li>空字符串转换为 0</li>\n<li>以上三种之外的转换为 NaN</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>Boolean()</code> 类型装转换规则</p>\n<ul>\n<li>除了 undefined、null、false、”” 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>逻辑运算操作符（&amp;&amp; || !），运算符（+ - * /），关系操作符（&gt; &lt; &gt;= &lt;=），相等运算符（<code>==</code>），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换</p>\n</li>\n<li><p><code>==</code> 隐式转换规则</p>\n<ul>\n<li>如果类型相同，无须转换</li>\n<li>如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false</li>\n<li>如果其中一个是 Symbol 类型，那么返回 false</li>\n<li>两个如果为 string 和 number 类型，那么就会将 string 转换为 number</li>\n<li>如果一个操作值是 boolean，那么转换 boolean 为 number</li>\n<li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）</li>\n</ul>\n</li>\n<li><p><code>+</code> 隐式转换规则</p>\n<ul>\n<li>其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接</li>\n<li>其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算</li>\n<li>其中一个是字符串、一个是数字，则按照字符串规则进行拼接</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object, object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object-隐式转换规则\"><a href=\"#Object-隐式转换规则\" class=\"headerlink\" title=\"Object 隐式转换规则\"></a>Object 隐式转换规则</h3><ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 优先调用 Symbol.toPrimitive 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object Object] 调用 toString 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11,2,,3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS-的数据类型基础\"><a href=\"#JS-的数据类型基础\" class=\"headerlink\" title=\"JS 的数据类型基础\"></a>JS 的数据类型基础</h2><ul>\n<li><p>JS 中数据类型分为两大类：基础数据类型，引用数据类型</p>\n</li>\n<li><p>基础数据类型有 7 种，分别为：</p>\n<ul>\n<li>Number 类型</li>\n<li>String 类型</li>\n<li>Boolean 类型</li>\n<li>Null：“无” “空” “不存在”</li>\n<li>Undefined：已被声明但未被赋值</li>\n<li>Symbol：用于对象唯一标识符</li>\n<li>BigInt 类型：表示大于或小于 2^53-1 的数字</li>\n</ul>\n</li>\n<li><p>引用数据类型： Object 为引用数据类型，还有其他子类型，如：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code></p>\n</li>\n<li><p>基础数据类型存储在<strong>栈内存</strong>，被引用或者拷贝的时候，会创建一个完全相等的变量</p>\n</li>\n<li><p>引用类型存储在<strong>堆内存</strong>，存储的是地址，多个引用指向同一个地址</p>\n</li>\n</ul>\n<h2 id=\"JS-数据类型判断方式\"><a href=\"#JS-数据类型判断方式\" class=\"headerlink\" title=\"JS 数据类型判断方式\"></a>JS 数据类型判断方式</h2><ul>\n<li><p>typeof 判断数据类型</p>\n<ul>\n<li>typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）</li>\n<li><code>typeof null</code> 结果是 object 是 JS 早期错误，为兼容而保留</li>\n<li><code>typeof alert</code> alert 在 JS 中是一个函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bigint\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (1)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (2)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"  (3)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>instanceof 判断数据类型</p>\n<ul>\n<li>通过判断对象原型链上的对象类型，来推断新对象的数据类型</li>\n<li>适用于判断引用数据类型，但不适合基础数据类型判断</li>\n<li>实现 instanceof 封装代码示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 先使用 typef 判断，如果不是引用数据类型则直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,</span>\n    <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 没有找到相同原型对象则返回 false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 找到相同的原型对象才返回 true</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Object.prototype.toString 方法</p>\n<ul>\n<li>对象的原型方法，可以统一返回格式为 <code>[object Xxx]</code> 的字符串（注意 Xxx 第一个字母大写）</li>\n<li>对于 Object 对象，可以直接调用，其他对象需要通过 call 调用<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object String]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">wujiel</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object RegExp]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Date]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>全局通用的类型判断方法：可以通过 <code>typeof</code> +<code> Object.prototype.string.call()</code> 来实现</p>\n  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 基础类型直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 引用类型 toString 判断,通过正则表达式过滤结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JS-数据类型转换\"><a href=\"#JS-数据类型转换\" class=\"headerlink\" title=\"JS 数据类型转换\"></a>JS 数据类型转换</h2><ul>\n<li>JS 的数据类型转换分为：强制类型转换，隐式类型转换</li>\n</ul>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><ul>\n<li><p>通过 <code>Number() parseInt() parseFloat() toString() String Boolean()</code> 方法实现的数据转换</p>\n</li>\n<li><p><code>Number()</code> 类型转换规则</p>\n<ul>\n<li>数字，返回自身</li>\n<li>Boolean，false 转换为 0，true 转换为 1</li>\n<li>null 转换为 0</li>\n<li>undefined 转换为 NaN</li>\n<li>Symbol 抛出异常</li>\n<li>对象，使用 <code>Object</code> 转换规则</li>\n<li>字符串<ul>\n<li>如果只包含数字，转换为十进制数字</li>\n<li>如果包含有效浮点格式转化为浮点数</li>\n<li>空字符串转换为 0</li>\n<li>以上三种之外的转换为 NaN</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>Boolean()</code> 类型装转换规则</p>\n<ul>\n<li>除了 undefined、null、false、”” 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>逻辑运算操作符（&amp;&amp; || !），运算符（+ - * /），关系操作符（&gt; &lt; &gt;= &lt;=），相等运算符（<code>==</code>），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换</p>\n</li>\n<li><p><code>==</code> 隐式转换规则</p>\n<ul>\n<li>如果类型相同，无须转换</li>\n<li>如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false</li>\n<li>如果其中一个是 Symbol 类型，那么返回 false</li>\n<li>两个如果为 string 和 number 类型，那么就会将 string 转换为 number</li>\n<li>如果一个操作值是 boolean，那么转换 boolean 为 number</li>\n<li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）</li>\n</ul>\n</li>\n<li><p><code>+</code> 隐式转换规则</p>\n<ul>\n<li>其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接</li>\n<li>其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算</li>\n<li>其中一个是字符串、一个是数字，则按照字符串规则进行拼接</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object, object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object-隐式转换规则\"><a href=\"#Object-隐式转换规则\" class=\"headerlink\" title=\"Object 隐式转换规则\"></a>Object 隐式转换规则</h3><ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  value<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 优先调用 Symbol.toPrimitive 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object Object] 调用 toString 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11,2,,3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"JS 什么是类数组","date":"2022-01-08T01:54:59.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154802.jpg","_content":"## 对象是类数组常见情况\n- 对象是类数组的情况\n\t- 函数参数对象 arguments\n\t- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\t- 用 `querySelector` 获得的 NodeList\n\n- 函数参数对象 arguments 特点\n\t- `Object.prototype.toString.call` 返回 `[object arguments]`，代表不是数组\n\t- 具有 length 属性\n\t- callee 属性：获取当前的函数\n\n- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\t- `Object.prototype.toString.call` 返回 `[object HTMLFormElement]`，代表不是数组\n\t- HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类\n\t- DOM 更新时会实时更新\n\n- 用 `querySelector` 获得的 NodeList\n\t- `Object.prototype.toString.call` 返回 `[object NodeList]`，代表不是数组\n\t- 实时更新\n\n\n## 类数组应用场景\n- 遍历函数参数\n- 定义链接字符串函数\n```js\nfunction myConcat(separa) {\n\tlet args = Array.prototype.slice.call(arguments, 1);\n\treturn args.join(separa);\n}\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n```\n- 函数间传递参数\n```js\nfunction foo(a, b, c) {\n\tconsole.log(a, b, c);\n}\n// 通过 apply 方法传递函数参数\nfunction bar() {\n\tfoo.apply(this, arguments);\n}\nbar(1, 2, 3); // 1 2 3\n```\n\n## 类数组转化为数组的方式\n- 借用数组方法转化为数组\n```js\nlet arrayLike = {\n\t0: \"java\",\n\t1: \"script\",\n\tlength: 2,\n};\n\n// 借用 push 方法\nArray.prototype.push.call(arrayLike, \"wujie\");\nconsole.log(arrayLike); // { '0': 'java', '1': 'script', '2': 'wujie', length: 3 }\n```\n- 借用 ES6 展开运算符或 `Array.from` 转化为数组\n```js\nfunction sum(a, b) {\n\t// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果\n\tconst args = [...arguments];\n\treturn args.reduce((sum, cur) => sum + cur);\n}\n\nconsole.log(sum(1, 2)); // 3\n```","source":"_posts/JS-什么是类数组.md","raw":"---\ntitle: JS 什么是类数组\ndate: 2022-01-08 09:54:59\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211225154802.jpg\n---\n## 对象是类数组常见情况\n- 对象是类数组的情况\n\t- 函数参数对象 arguments\n\t- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\t- 用 `querySelector` 获得的 NodeList\n\n- 函数参数对象 arguments 特点\n\t- `Object.prototype.toString.call` 返回 `[object arguments]`，代表不是数组\n\t- 具有 length 属性\n\t- callee 属性：获取当前的函数\n\n- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\t- `Object.prototype.toString.call` 返回 `[object HTMLFormElement]`，代表不是数组\n\t- HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类\n\t- DOM 更新时会实时更新\n\n- 用 `querySelector` 获得的 NodeList\n\t- `Object.prototype.toString.call` 返回 `[object NodeList]`，代表不是数组\n\t- 实时更新\n\n\n## 类数组应用场景\n- 遍历函数参数\n- 定义链接字符串函数\n```js\nfunction myConcat(separa) {\n\tlet args = Array.prototype.slice.call(arguments, 1);\n\treturn args.join(separa);\n}\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n```\n- 函数间传递参数\n```js\nfunction foo(a, b, c) {\n\tconsole.log(a, b, c);\n}\n// 通过 apply 方法传递函数参数\nfunction bar() {\n\tfoo.apply(this, arguments);\n}\nbar(1, 2, 3); // 1 2 3\n```\n\n## 类数组转化为数组的方式\n- 借用数组方法转化为数组\n```js\nlet arrayLike = {\n\t0: \"java\",\n\t1: \"script\",\n\tlength: 2,\n};\n\n// 借用 push 方法\nArray.prototype.push.call(arrayLike, \"wujie\");\nconsole.log(arrayLike); // { '0': 'java', '1': 'script', '2': 'wujie', length: 3 }\n```\n- 借用 ES6 展开运算符或 `Array.from` 转化为数组\n```js\nfunction sum(a, b) {\n\t// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果\n\tconst args = [...arguments];\n\treturn args.reduce((sum, cur) => sum + cur);\n}\n\nconsole.log(sum(1, 2)); // 3\n```","slug":"JS-什么是类数组","published":1,"updated":"2022-01-08T01:58:55.004Z","_id":"cky56grgn0000va0e9woid48p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"对象是类数组常见情况\"><a href=\"#对象是类数组常见情况\" class=\"headerlink\" title=\"对象是类数组常见情况\"></a>对象是类数组常见情况</h2><ul>\n<li><p>对象是类数组的情况</p>\n<ul>\n<li>函数参数对象 arguments</li>\n<li>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</li>\n<li>用 <code>querySelector</code> 获得的 NodeList</li>\n</ul>\n</li>\n<li><p>函数参数对象 arguments 特点</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object arguments]</code>，代表不是数组</li>\n<li>具有 length 属性</li>\n<li>callee 属性：获取当前的函数</li>\n</ul>\n</li>\n<li><p>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object HTMLFormElement]</code>，代表不是数组</li>\n<li>HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类</li>\n<li>DOM 更新时会实时更新</li>\n</ul>\n</li>\n<li><p>用 <code>querySelector</code> 获得的 NodeList</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object NodeList]</code>，代表不是数组</li>\n<li>实时更新</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类数组应用场景\"><a href=\"#类数组应用场景\" class=\"headerlink\" title=\"类数组应用场景\"></a>类数组应用场景</h2><ul>\n<li>遍历函数参数</li>\n<li>定义链接字符串函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separa</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数间传递参数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 apply 方法传递函数参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"类数组转化为数组的方式\"><a href=\"#类数组转化为数组的方式\" class=\"headerlink\" title=\"类数组转化为数组的方式\"></a>类数组转化为数组的方式</h2><ul>\n<li>借用数组方法转化为数组<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span>\n\tlength<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 借用 push 方法</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; '0': 'java', '1': 'script', '2': 'wujie', length: 3 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>借用 ES6 展开运算符或 <code>Array.from</code> 转化为数组<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果</span>\n\t<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对象是类数组常见情况\"><a href=\"#对象是类数组常见情况\" class=\"headerlink\" title=\"对象是类数组常见情况\"></a>对象是类数组常见情况</h2><ul>\n<li><p>对象是类数组的情况</p>\n<ul>\n<li>函数参数对象 arguments</li>\n<li>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</li>\n<li>用 <code>querySelector</code> 获得的 NodeList</li>\n</ul>\n</li>\n<li><p>函数参数对象 arguments 特点</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object arguments]</code>，代表不是数组</li>\n<li>具有 length 属性</li>\n<li>callee 属性：获取当前的函数</li>\n</ul>\n</li>\n<li><p>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object HTMLFormElement]</code>，代表不是数组</li>\n<li>HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类</li>\n<li>DOM 更新时会实时更新</li>\n</ul>\n</li>\n<li><p>用 <code>querySelector</code> 获得的 NodeList</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object NodeList]</code>，代表不是数组</li>\n<li>实时更新</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类数组应用场景\"><a href=\"#类数组应用场景\" class=\"headerlink\" title=\"类数组应用场景\"></a>类数组应用场景</h2><ul>\n<li>遍历函数参数</li>\n<li>定义链接字符串函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separa</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数间传递参数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 apply 方法传递函数参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"类数组转化为数组的方式\"><a href=\"#类数组转化为数组的方式\" class=\"headerlink\" title=\"类数组转化为数组的方式\"></a>类数组转化为数组的方式</h2><ul>\n<li>借用数组方法转化为数组<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span>\n\tlength<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 借用 push 方法</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; '0': 'java', '1': 'script', '2': 'wujie', length: 3 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>借用 ES6 展开运算符或 <code>Array.from</code> 转化为数组<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果</span>\n\t<span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"你不知道的 JS 学习笔记：作用域和闭包","date":"2022-02-04T06:50:04.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg","_content":"## 第一章：作用域是什么\n### 1.1 编译原理\n- 编译过程\n\t- 分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元\n\t\t- 比如： `let a = 2;` 被分解为：`let、a、=、2、；` 5 个词法单元\n\t\t- 分词：无状态解析规则，词法分析：有状态解析规则\n\t- 解析 / 语法分析：词法单元 -> 抽象语法树（Abstract Syntax Tree，AST）\n\t- 代码生成：AST -> 可执行代码\n- JS 代码在执行前都需要编译\n\n### 1.2 理解作用域\n- 编译过程重要参与对象\n\t- 引擎：负责 JS 编译和执行过程\n\t- 编译器：负责编译过程\n\t- 作用域：**收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限**\n- 变量赋值的两个操作\n\t- 在当前作用域中声明一个变量（如果之前存在则忽略）\n\t- 运行时引擎在作用域中查找该变量，找到了就赋值\n- 编译器基础术语\n\t- 赋值操作使用 LHS，获取目标变量的值使用 RHS\n\t\t- LHS：从左侧查找，即：查找某个容器本身\n\t\t\t- 比如：`a = 2`，需要找到为 = 2 赋值的目标\n\t\t- RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）\n\t\t\t- 比如：`console.log(a);`，这里 a 没有被赋值，但需要找到 a 对应的 value\n\n### 1.3 作用域嵌套\n- 在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止\n\n### 1.4 异常\n- 如果在 RHS 在任何作用域都找不到，会抛出 `ReferenceError` 异常\n- 非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量\n- **严格模式禁止自动隐式或自动创建全局变量**\n- 如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 `TypeError` 异常\n- `ReferenceError` 说明作用域判断异常，`TypeError` 说明作用域判断成功但对值的操作失败了\n\n## 第二章：词法作用域\n### 2.1 词法阶段\n- 词法作用域由变量和块作用于写在哪里决定\n- 作用域查找会在匹配第一个标识符时停止\n\n### 2.2 欺骗词法\n- 欺骗词法作用域会导致性能下降\n- `eval([str]) `函数：\n\t- 通常被用来执行动态创建的代码\n\t- 字符串作为参数，内容视未好行书写时就存在于程序中的位置\n\t- 可以修改词法作用域\n- with 关键字\n\t- 重复引用同一个对象中多个属性的快捷方式\n\t- 将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域\n\t- 非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量\n\t```js\n\t  var obj = {\n\t\ta: 1,\n\t\tb: 2\n\t  }\n\n\t  function foo(obj) {\n\t\twith (obj) {\n\t\t  a = 2;\n\t\t}\n\t  }\n\n\t  console.log(foo(obj.a)); // undefined\n\t  console.log(foo(a)); // 2\n\n\t  ```\n\t- with 根据传递的对象凭空创建了一个全新的词法作用域\n\n### 2.3 性能\n- JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的\n\n## 第三章：函数作用域和块作用域\n### 3.1 函数中的作用域\n- 函数的全部变量在函数内部都可以被访问，从外部则无法访问\n\n### 3.2 隐藏内部实现\n- 最小特权原则：软件设计中，应该**最小限度**的暴露必要的内容，比如内部函数或者内部类\n- 隐藏作用域的变量和函数可以避免同名标识符的冲突\n\t- 避免全局变量的使用\n\t- 全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性\n\t- 模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中\n\n### 3.3 函数作用域\n- 函数表达式\n\t- 声明函数的 function 不在第一个位置\n\t```js\n\t  var a = 2;\n\n\t  (function foo() {\n\t\tvar a = 3;\n\t\tconsole.log( a );\n\t  })();\n\n\t  console.log( a ) // 2\n\t  ```\n\t- 函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域\n- 匿名函数：省略函数名称\n\t```js\n\t  setTimeout( function() {\n\t\tconsole.log( 1 );\n\t  }, 1000);\n\t  ```\n- 具名函数：声明函数名称\n- 立即执行函数表达式（IIFE，Immediately Invoked Function Expression）\n\t- 函数表达式末尾加上一个  `()` 让函数立即执行\n\t- 可以当作函数调用并传递参数\n\t```js\n\t  var a = 2;\n\n\t  (function foo( global) {\n\t\tvar a = 3;\n\t\tconsole.log( a ); // 3\n\t\tconsole.log( global.a ); // 2\n\t  })(window);\n\t  ```\n\n### 3.4 块作用域\n- 使用 var 申明变量会属于外部作用域\n- try ... catch 的 catch 部分会创建块作用域\n- let 关键字\n\t- 将变量绑定到所在的作用域中，外部变量无法访问\n\t- let 声明的代码在 let 之前无法被访问\n\t```js\n\t  {\n\t\tconsole.log( bar ); // ReferenceError\n\t\tlet bar = 2;\n\t  }\n\t  ```\n- const 关键字\n\t- 可以创建块作用域变量，但值是固定的\n\n## 第四章：提升\n- `var a = 2;` ，`var 2` 属于编译阶段任务，`a = 2` 属于解释阶段任务\n- 提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端\n- var 的变量声明会被提升\n- 函数的声明会被提升，**函数表达式的声明不会被提升**\n\t- 因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError\n\n## 第五章：作用域闭包\n- 当函数可以记住并访问所在的词法作用域时，就产生了**闭包**，即使函数是在当前词法作用域之外执行\n\t```js\n\t  function foo() {\n\t    var a = 2;\n\n\t    function bar() {\n\t      console.log( a );\n\t    }\n\n\t    return bar;\n\t  }\n\n\t  var baz = foo();\n\t  baz(); // 2\n\t  ```\n\t- bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递\n\t- **在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包**\n\t- **函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包**\n\t- 闭包使得函数可以继续访问定义时对词法作用域\n- 闭包应用示例：setTimeout\n\t```js\n\t  function wait(message) {\n\t    setTimeout( function timer() {\n\t      console.log( message );\n\t    }, 1000);\n\t  }\n\t  wait(\"hello message\");\n\t  ```\n\t- timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用\n- 循环和闭包\n\t- 循环输出问题\n\t\t```js\n\t\t  for (var i = 1; i <= 5; i++) {\n\t\t    setTimeout(function timer() {\n\t\t      console.log(i);\n\t\t    }, i * 1000);\n\t\t  }\n\t\t  ```\n\t\t- 以上代码会连续输出 5 个 6\n\t\t- **延迟函数的回调会在循环结束时执行**，即使延迟时间为 0\n\t\t- 问题原因：**i 是共享的全局作用域**，所以即使循环了 5 次，也相当于只有一个变量\n\t\t- 解决方案\n\t\t\t- 使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）\n\t\t\t```js\n\t\t\t  for (var i = 1; i <= 5; i++) {\n\t\t\t\t(function (j) {\n\t\t\t\t  setTimeout(function timer() {\n\t\t\t\t\tconsole.log(j);\n\t\t\t\t  }, i * 1000);\n\t\t\t\t})(i);\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- 使用 let 关键字\n\t\t\t\t- 将一个块转换成一个可以被关闭的作用域\n            ```js\n            for (let i = 1; i <= 5; i++) {\n            setTimeout(function timer() {\n                console.log(i);\n            }, i * 1000);\n            }\n            ```\n- 模块\n\t- 返回一个含有属性引用的对象将函数传递到词发作用域外部\n\t- 类似 React 和 Vue 的 hook 模式\n\t```js\n\t  function useState() {\n\t    var someThing = \"wujie\";\n\n\t    function getSomeThing() {\n\t      return someThing;\n\t    }\n\n\t    return {\n\t      getSomeThing: getSomeThing,\n\t    };\n\t  }\n\n\t  var state = useState();\n\t  console.log(state.getSomeThing()); // wujie\n\t  ```\n\t- 模块模式的两个必备条件\n\t\t- 必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）\n\t\t- 封闭函数必须返回至少一个内部函数（闭包）","source":"_posts/作用域和闭包.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：作用域和闭包\ndate: 2022-02-04 14:50:04\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg\n---\n## 第一章：作用域是什么\n### 1.1 编译原理\n- 编译过程\n\t- 分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元\n\t\t- 比如： `let a = 2;` 被分解为：`let、a、=、2、；` 5 个词法单元\n\t\t- 分词：无状态解析规则，词法分析：有状态解析规则\n\t- 解析 / 语法分析：词法单元 -> 抽象语法树（Abstract Syntax Tree，AST）\n\t- 代码生成：AST -> 可执行代码\n- JS 代码在执行前都需要编译\n\n### 1.2 理解作用域\n- 编译过程重要参与对象\n\t- 引擎：负责 JS 编译和执行过程\n\t- 编译器：负责编译过程\n\t- 作用域：**收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限**\n- 变量赋值的两个操作\n\t- 在当前作用域中声明一个变量（如果之前存在则忽略）\n\t- 运行时引擎在作用域中查找该变量，找到了就赋值\n- 编译器基础术语\n\t- 赋值操作使用 LHS，获取目标变量的值使用 RHS\n\t\t- LHS：从左侧查找，即：查找某个容器本身\n\t\t\t- 比如：`a = 2`，需要找到为 = 2 赋值的目标\n\t\t- RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）\n\t\t\t- 比如：`console.log(a);`，这里 a 没有被赋值，但需要找到 a 对应的 value\n\n### 1.3 作用域嵌套\n- 在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止\n\n### 1.4 异常\n- 如果在 RHS 在任何作用域都找不到，会抛出 `ReferenceError` 异常\n- 非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量\n- **严格模式禁止自动隐式或自动创建全局变量**\n- 如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 `TypeError` 异常\n- `ReferenceError` 说明作用域判断异常，`TypeError` 说明作用域判断成功但对值的操作失败了\n\n## 第二章：词法作用域\n### 2.1 词法阶段\n- 词法作用域由变量和块作用于写在哪里决定\n- 作用域查找会在匹配第一个标识符时停止\n\n### 2.2 欺骗词法\n- 欺骗词法作用域会导致性能下降\n- `eval([str]) `函数：\n\t- 通常被用来执行动态创建的代码\n\t- 字符串作为参数，内容视未好行书写时就存在于程序中的位置\n\t- 可以修改词法作用域\n- with 关键字\n\t- 重复引用同一个对象中多个属性的快捷方式\n\t- 将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域\n\t- 非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量\n\t```js\n\t  var obj = {\n\t\ta: 1,\n\t\tb: 2\n\t  }\n\n\t  function foo(obj) {\n\t\twith (obj) {\n\t\t  a = 2;\n\t\t}\n\t  }\n\n\t  console.log(foo(obj.a)); // undefined\n\t  console.log(foo(a)); // 2\n\n\t  ```\n\t- with 根据传递的对象凭空创建了一个全新的词法作用域\n\n### 2.3 性能\n- JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的\n\n## 第三章：函数作用域和块作用域\n### 3.1 函数中的作用域\n- 函数的全部变量在函数内部都可以被访问，从外部则无法访问\n\n### 3.2 隐藏内部实现\n- 最小特权原则：软件设计中，应该**最小限度**的暴露必要的内容，比如内部函数或者内部类\n- 隐藏作用域的变量和函数可以避免同名标识符的冲突\n\t- 避免全局变量的使用\n\t- 全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性\n\t- 模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中\n\n### 3.3 函数作用域\n- 函数表达式\n\t- 声明函数的 function 不在第一个位置\n\t```js\n\t  var a = 2;\n\n\t  (function foo() {\n\t\tvar a = 3;\n\t\tconsole.log( a );\n\t  })();\n\n\t  console.log( a ) // 2\n\t  ```\n\t- 函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域\n- 匿名函数：省略函数名称\n\t```js\n\t  setTimeout( function() {\n\t\tconsole.log( 1 );\n\t  }, 1000);\n\t  ```\n- 具名函数：声明函数名称\n- 立即执行函数表达式（IIFE，Immediately Invoked Function Expression）\n\t- 函数表达式末尾加上一个  `()` 让函数立即执行\n\t- 可以当作函数调用并传递参数\n\t```js\n\t  var a = 2;\n\n\t  (function foo( global) {\n\t\tvar a = 3;\n\t\tconsole.log( a ); // 3\n\t\tconsole.log( global.a ); // 2\n\t  })(window);\n\t  ```\n\n### 3.4 块作用域\n- 使用 var 申明变量会属于外部作用域\n- try ... catch 的 catch 部分会创建块作用域\n- let 关键字\n\t- 将变量绑定到所在的作用域中，外部变量无法访问\n\t- let 声明的代码在 let 之前无法被访问\n\t```js\n\t  {\n\t\tconsole.log( bar ); // ReferenceError\n\t\tlet bar = 2;\n\t  }\n\t  ```\n- const 关键字\n\t- 可以创建块作用域变量，但值是固定的\n\n## 第四章：提升\n- `var a = 2;` ，`var 2` 属于编译阶段任务，`a = 2` 属于解释阶段任务\n- 提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端\n- var 的变量声明会被提升\n- 函数的声明会被提升，**函数表达式的声明不会被提升**\n\t- 因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError\n\n## 第五章：作用域闭包\n- 当函数可以记住并访问所在的词法作用域时，就产生了**闭包**，即使函数是在当前词法作用域之外执行\n\t```js\n\t  function foo() {\n\t    var a = 2;\n\n\t    function bar() {\n\t      console.log( a );\n\t    }\n\n\t    return bar;\n\t  }\n\n\t  var baz = foo();\n\t  baz(); // 2\n\t  ```\n\t- bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递\n\t- **在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包**\n\t- **函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包**\n\t- 闭包使得函数可以继续访问定义时对词法作用域\n- 闭包应用示例：setTimeout\n\t```js\n\t  function wait(message) {\n\t    setTimeout( function timer() {\n\t      console.log( message );\n\t    }, 1000);\n\t  }\n\t  wait(\"hello message\");\n\t  ```\n\t- timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用\n- 循环和闭包\n\t- 循环输出问题\n\t\t```js\n\t\t  for (var i = 1; i <= 5; i++) {\n\t\t    setTimeout(function timer() {\n\t\t      console.log(i);\n\t\t    }, i * 1000);\n\t\t  }\n\t\t  ```\n\t\t- 以上代码会连续输出 5 个 6\n\t\t- **延迟函数的回调会在循环结束时执行**，即使延迟时间为 0\n\t\t- 问题原因：**i 是共享的全局作用域**，所以即使循环了 5 次，也相当于只有一个变量\n\t\t- 解决方案\n\t\t\t- 使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）\n\t\t\t```js\n\t\t\t  for (var i = 1; i <= 5; i++) {\n\t\t\t\t(function (j) {\n\t\t\t\t  setTimeout(function timer() {\n\t\t\t\t\tconsole.log(j);\n\t\t\t\t  }, i * 1000);\n\t\t\t\t})(i);\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- 使用 let 关键字\n\t\t\t\t- 将一个块转换成一个可以被关闭的作用域\n            ```js\n            for (let i = 1; i <= 5; i++) {\n            setTimeout(function timer() {\n                console.log(i);\n            }, i * 1000);\n            }\n            ```\n- 模块\n\t- 返回一个含有属性引用的对象将函数传递到词发作用域外部\n\t- 类似 React 和 Vue 的 hook 模式\n\t```js\n\t  function useState() {\n\t    var someThing = \"wujie\";\n\n\t    function getSomeThing() {\n\t      return someThing;\n\t    }\n\n\t    return {\n\t      getSomeThing: getSomeThing,\n\t    };\n\t  }\n\n\t  var state = useState();\n\t  console.log(state.getSomeThing()); // wujie\n\t  ```\n\t- 模块模式的两个必备条件\n\t\t- 必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）\n\t\t- 封闭函数必须返回至少一个内部函数（闭包）","slug":"作用域和闭包","published":1,"updated":"2022-02-05T12:19:07.535Z","_id":"ckz81tgdt000036sj1zgi6ave","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：作用域是什么\"><a href=\"#第一章：作用域是什么\" class=\"headerlink\" title=\"第一章：作用域是什么\"></a>第一章：作用域是什么</h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><ul>\n<li>编译过程<ul>\n<li>分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元<ul>\n<li>比如： <code>let a = 2;</code> 被分解为：<code>let、a、=、2、；</code> 5 个词法单元</li>\n<li>分词：无状态解析规则，词法分析：有状态解析规则</li>\n</ul>\n</li>\n<li>解析 / 语法分析：词法单元 -&gt; 抽象语法树（Abstract Syntax Tree，AST）</li>\n<li>代码生成：AST -&gt; 可执行代码</li>\n</ul>\n</li>\n<li>JS 代码在执行前都需要编译</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><ul>\n<li>编译过程重要参与对象<ul>\n<li>引擎：负责 JS 编译和执行过程</li>\n<li>编译器：负责编译过程</li>\n<li>作用域：<strong>收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限</strong></li>\n</ul>\n</li>\n<li>变量赋值的两个操作<ul>\n<li>在当前作用域中声明一个变量（如果之前存在则忽略）</li>\n<li>运行时引擎在作用域中查找该变量，找到了就赋值</li>\n</ul>\n</li>\n<li>编译器基础术语<ul>\n<li>赋值操作使用 LHS，获取目标变量的值使用 RHS<ul>\n<li>LHS：从左侧查找，即：查找某个容器本身<ul>\n<li>比如：<code>a = 2</code>，需要找到为 = 2 赋值的目标</li>\n</ul>\n</li>\n<li>RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）<ul>\n<li>比如：<code>console.log(a);</code>，这里 a 没有被赋值，但需要找到 a 对应的 value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-作用域嵌套\"><a href=\"#1-3-作用域嵌套\" class=\"headerlink\" title=\"1.3 作用域嵌套\"></a>1.3 作用域嵌套</h3><ul>\n<li>在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止</li>\n</ul>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><ul>\n<li>如果在 RHS 在任何作用域都找不到，会抛出 <code>ReferenceError</code> 异常</li>\n<li>非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量</li>\n<li><strong>严格模式禁止自动隐式或自动创建全局变量</strong></li>\n<li>如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 <code>TypeError</code> 异常</li>\n<li><code>ReferenceError</code> 说明作用域判断异常，<code>TypeError</code> 说明作用域判断成功但对值的操作失败了</li>\n</ul>\n<h2 id=\"第二章：词法作用域\"><a href=\"#第二章：词法作用域\" class=\"headerlink\" title=\"第二章：词法作用域\"></a>第二章：词法作用域</h2><h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><ul>\n<li>词法作用域由变量和块作用于写在哪里决定</li>\n<li>作用域查找会在匹配第一个标识符时停止</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><ul>\n<li>欺骗词法作用域会导致性能下降</li>\n<li><code>eval([str]) </code>函数：<ul>\n<li>通常被用来执行动态创建的代码</li>\n<li>字符串作为参数，内容视未好行书写时就存在于程序中的位置</li>\n<li>可以修改词法作用域</li>\n</ul>\n</li>\n<li>with 关键字<ul>\n<li>重复引用同一个对象中多个属性的快捷方式</li>\n<li>将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域</li>\n<li>非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\nb<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>with 根据传递的对象凭空创建了一个全新的词法作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-性能\"><a href=\"#2-3-性能\" class=\"headerlink\" title=\"2.3 性能\"></a>2.3 性能</h3><ul>\n<li>JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的</li>\n</ul>\n<h2 id=\"第三章：函数作用域和块作用域\"><a href=\"#第三章：函数作用域和块作用域\" class=\"headerlink\" title=\"第三章：函数作用域和块作用域\"></a>第三章：函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>函数的全部变量在函数内部都可以被访问，从外部则无法访问</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><ul>\n<li>最小特权原则：软件设计中，应该<strong>最小限度</strong>的暴露必要的内容，比如内部函数或者内部类</li>\n<li>隐藏作用域的变量和函数可以避免同名标识符的冲突<ul>\n<li>避免全局变量的使用</li>\n<li>全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性</li>\n<li>模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><ul>\n<li>函数表达式<ul>\n<li>声明函数的 function 不在第一个位置<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域</li>\n</ul>\n</li>\n<li>匿名函数：省略函数名称  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>具名函数：声明函数名称</li>\n<li>立即执行函数表达式（IIFE，Immediately Invoked Function Expression）<ul>\n<li>函数表达式末尾加上一个  <code>()</code> 让函数立即执行</li>\n<li>可以当作函数调用并传递参数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> global<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><ul>\n<li>使用 var 申明变量会属于外部作用域</li>\n<li>try … catch 的 catch 部分会创建块作用域</li>\n<li>let 关键字<ul>\n<li>将变量绑定到所在的作用域中，外部变量无法访问</li>\n<li>let 声明的代码在 let 之前无法被访问<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>const 关键字<ul>\n<li>可以创建块作用域变量，但值是固定的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：提升\"><a href=\"#第四章：提升\" class=\"headerlink\" title=\"第四章：提升\"></a>第四章：提升</h2><ul>\n<li><code>var a = 2;</code> ，<code>var 2</code> 属于编译阶段任务，<code>a = 2</code> 属于解释阶段任务</li>\n<li>提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端</li>\n<li>var 的变量声明会被提升</li>\n<li>函数的声明会被提升，<strong>函数表达式的声明不会被提升</strong><ul>\n<li>因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：作用域闭包\"><a href=\"#第五章：作用域闭包\" class=\"headerlink\" title=\"第五章：作用域闭包\"></a>第五章：作用域闭包</h2><ul>\n<li>当函数可以记住并访问所在的词法作用域时，就产生了<strong>闭包</strong>，即使函数是在当前词法作用域之外执行  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递</li>\n<li><strong>在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包</strong></li>\n<li><strong>函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包</strong></li>\n<li>闭包使得函数可以继续访问定义时对词法作用域</li>\n</ul>\n</li>\n<li>闭包应用示例：setTimeout  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> message <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用</li>\n</ul>\n</li>\n<li>循环和闭包<ul>\n<li>循环输出问题  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>以上代码会连续输出 5 个 6</li>\n<li><strong>延迟函数的回调会在循环结束时执行</strong>，即使延迟时间为 0</li>\n<li>问题原因：<strong>i 是共享的全局作用域</strong>，所以即使循环了 5 次，也相当于只有一个变量</li>\n<li>解决方案<ul>\n<li>使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用 let 关键字<ul>\n<li>将一个块转换成一个可以被关闭的作用域<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块<ul>\n<li>返回一个含有属性引用的对象将函数传递到词发作用域外部</li>\n<li>类似 React 和 Vue 的 hook 模式<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> someThing <span class=\"token operator\">=</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> someThing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    getSomeThing<span class=\"token operator\">:</span> getSomeThing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wujie</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>模块模式的两个必备条件<ul>\n<li>必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）</li>\n<li>封闭函数必须返回至少一个内部函数（闭包）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：作用域是什么\"><a href=\"#第一章：作用域是什么\" class=\"headerlink\" title=\"第一章：作用域是什么\"></a>第一章：作用域是什么</h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><ul>\n<li>编译过程<ul>\n<li>分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元<ul>\n<li>比如： <code>let a = 2;</code> 被分解为：<code>let、a、=、2、；</code> 5 个词法单元</li>\n<li>分词：无状态解析规则，词法分析：有状态解析规则</li>\n</ul>\n</li>\n<li>解析 / 语法分析：词法单元 -&gt; 抽象语法树（Abstract Syntax Tree，AST）</li>\n<li>代码生成：AST -&gt; 可执行代码</li>\n</ul>\n</li>\n<li>JS 代码在执行前都需要编译</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><ul>\n<li>编译过程重要参与对象<ul>\n<li>引擎：负责 JS 编译和执行过程</li>\n<li>编译器：负责编译过程</li>\n<li>作用域：<strong>收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限</strong></li>\n</ul>\n</li>\n<li>变量赋值的两个操作<ul>\n<li>在当前作用域中声明一个变量（如果之前存在则忽略）</li>\n<li>运行时引擎在作用域中查找该变量，找到了就赋值</li>\n</ul>\n</li>\n<li>编译器基础术语<ul>\n<li>赋值操作使用 LHS，获取目标变量的值使用 RHS<ul>\n<li>LHS：从左侧查找，即：查找某个容器本身<ul>\n<li>比如：<code>a = 2</code>，需要找到为 = 2 赋值的目标</li>\n</ul>\n</li>\n<li>RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）<ul>\n<li>比如：<code>console.log(a);</code>，这里 a 没有被赋值，但需要找到 a 对应的 value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-作用域嵌套\"><a href=\"#1-3-作用域嵌套\" class=\"headerlink\" title=\"1.3 作用域嵌套\"></a>1.3 作用域嵌套</h3><ul>\n<li>在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止</li>\n</ul>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><ul>\n<li>如果在 RHS 在任何作用域都找不到，会抛出 <code>ReferenceError</code> 异常</li>\n<li>非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量</li>\n<li><strong>严格模式禁止自动隐式或自动创建全局变量</strong></li>\n<li>如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 <code>TypeError</code> 异常</li>\n<li><code>ReferenceError</code> 说明作用域判断异常，<code>TypeError</code> 说明作用域判断成功但对值的操作失败了</li>\n</ul>\n<h2 id=\"第二章：词法作用域\"><a href=\"#第二章：词法作用域\" class=\"headerlink\" title=\"第二章：词法作用域\"></a>第二章：词法作用域</h2><h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><ul>\n<li>词法作用域由变量和块作用于写在哪里决定</li>\n<li>作用域查找会在匹配第一个标识符时停止</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><ul>\n<li>欺骗词法作用域会导致性能下降</li>\n<li><code>eval([str]) </code>函数：<ul>\n<li>通常被用来执行动态创建的代码</li>\n<li>字符串作为参数，内容视未好行书写时就存在于程序中的位置</li>\n<li>可以修改词法作用域</li>\n</ul>\n</li>\n<li>with 关键字<ul>\n<li>重复引用同一个对象中多个属性的快捷方式</li>\n<li>将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域</li>\n<li>非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\nb<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>with 根据传递的对象凭空创建了一个全新的词法作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-性能\"><a href=\"#2-3-性能\" class=\"headerlink\" title=\"2.3 性能\"></a>2.3 性能</h3><ul>\n<li>JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的</li>\n</ul>\n<h2 id=\"第三章：函数作用域和块作用域\"><a href=\"#第三章：函数作用域和块作用域\" class=\"headerlink\" title=\"第三章：函数作用域和块作用域\"></a>第三章：函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>函数的全部变量在函数内部都可以被访问，从外部则无法访问</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><ul>\n<li>最小特权原则：软件设计中，应该<strong>最小限度</strong>的暴露必要的内容，比如内部函数或者内部类</li>\n<li>隐藏作用域的变量和函数可以避免同名标识符的冲突<ul>\n<li>避免全局变量的使用</li>\n<li>全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性</li>\n<li>模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><ul>\n<li>函数表达式<ul>\n<li>声明函数的 function 不在第一个位置<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域</li>\n</ul>\n</li>\n<li>匿名函数：省略函数名称  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>具名函数：声明函数名称</li>\n<li>立即执行函数表达式（IIFE，Immediately Invoked Function Expression）<ul>\n<li>函数表达式末尾加上一个  <code>()</code> 让函数立即执行</li>\n<li>可以当作函数调用并传递参数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> global<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><ul>\n<li>使用 var 申明变量会属于外部作用域</li>\n<li>try … catch 的 catch 部分会创建块作用域</li>\n<li>let 关键字<ul>\n<li>将变量绑定到所在的作用域中，外部变量无法访问</li>\n<li>let 声明的代码在 let 之前无法被访问<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>const 关键字<ul>\n<li>可以创建块作用域变量，但值是固定的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：提升\"><a href=\"#第四章：提升\" class=\"headerlink\" title=\"第四章：提升\"></a>第四章：提升</h2><ul>\n<li><code>var a = 2;</code> ，<code>var 2</code> 属于编译阶段任务，<code>a = 2</code> 属于解释阶段任务</li>\n<li>提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端</li>\n<li>var 的变量声明会被提升</li>\n<li>函数的声明会被提升，<strong>函数表达式的声明不会被提升</strong><ul>\n<li>因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：作用域闭包\"><a href=\"#第五章：作用域闭包\" class=\"headerlink\" title=\"第五章：作用域闭包\"></a>第五章：作用域闭包</h2><ul>\n<li>当函数可以记住并访问所在的词法作用域时，就产生了<strong>闭包</strong>，即使函数是在当前词法作用域之外执行  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递</li>\n<li><strong>在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包</strong></li>\n<li><strong>函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包</strong></li>\n<li>闭包使得函数可以继续访问定义时对词法作用域</li>\n</ul>\n</li>\n<li>闭包应用示例：setTimeout  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> message <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用</li>\n</ul>\n</li>\n<li>循环和闭包<ul>\n<li>循环输出问题  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>以上代码会连续输出 5 个 6</li>\n<li><strong>延迟函数的回调会在循环结束时执行</strong>，即使延迟时间为 0</li>\n<li>问题原因：<strong>i 是共享的全局作用域</strong>，所以即使循环了 5 次，也相当于只有一个变量</li>\n<li>解决方案<ul>\n<li>使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用 let 关键字<ul>\n<li>将一个块转换成一个可以被关闭的作用域<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块<ul>\n<li>返回一个含有属性引用的对象将函数传递到词发作用域外部</li>\n<li>类似 React 和 Vue 的 hook 模式<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> someThing <span class=\"token operator\">=</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> someThing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    getSomeThing<span class=\"token operator\">:</span> getSomeThing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wujie</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>模块模式的两个必备条件<ul>\n<li>必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）</li>\n<li>封闭函数必须返回至少一个内部函数（闭包）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"你不知道的 JS 学习笔记：this和对象原型","date":"2022-02-05T12:18:01.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg","_content":"## 第一章：关于 this\n- 误解\n\t- this 不是指向函数自身\n\t- this 在任何情况下都不指向函数的词法作用域\n- this 是函数被调用时发生的绑定，**指向什么完全取决于在哪里被调用**\n\n## 第二章 this 全面解析\n### 2.1 调用位置\n- 确认函数的调用位置的方式是：分析调用栈\n\n### 2.2 绑定规则\n- 默认绑定\n\t- 在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined\n\t- 非严格模式示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var a = 2;\n\n\t  foo(); // 2\n\t  ```\n- 隐式绑定\n\t- 当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象\n\t- 示例代码\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo\n\t  }\n\n\t  obj.foo(); // 2\n\t  ```\n\t- 隐式丢失：丢失隐式绑定对象，从而使用默认绑定\n\t- 非严格模式的隐式丢失示例\n\t\t- 此时 bar 引用的 foo 函数本身\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  bar(); // 2\n\n\t  ```\n\t- 传入回调参数是同样会存在隐式丢失问题\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  function doFoo(fn) {\n\t\t// fn 引用的就是 foo\n\t\tfn();\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  doFoo(obj.foo);\n\t  ```\n- 显式绑定\n\t- 使用 call 函数或者 apply 函数实现\n\t- 第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this\n\t- call 函数示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  foo.call(obj); // 2\n\t  ```\n\t- 硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象\n\t\t- 应用：创建包裹函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = function () {\n\t\treturn foo.apply(obj, arguments);\n\t  };\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n\t\t- 应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = foo.bind(obj); // bar 是一个新的函数，this 指向 obj\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n- new 绑定\n\t- new 调用函数（发生构造函数调用）过程\n\t\t- 创建一个全新的对象\n\t\t- 新对象被执行`[[原型]]`连接\n\t\t- 新对象被绑定到函数调用的 this\n\t\t- 如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象\n\t- 示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上\n\t  ```js\n\t  function foo(a) {\n\t\tthis.a = a;\n\t  }\n\n\t  var bar = new foo(2);\n\t  console.log(bar.a); // 2\n\t  ```\n\n### 2.3 优先级\n- 显式绑定优先级 > 隐式绑定\n- new 绑定优先级 > 隐式绑定\n- **判断 this 规则的方式**\n\t- 是否在 new 中调用，是的话 this 绑定的是新创建的对象\n\t- 是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象\n\t- 是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象\n\t- 以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象\n\t- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png)\n\n### 2.4 绑定例外\n- 如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定\n\t- 应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符\n\t```js\n\t  function foo(a, b) {\n\t\tconsole.log(`a: ${a}, b: ${b}`);\n\t  }\n\n\t  // 数组展开为参数\n\t  foo.apply(null, [2, 3]); // a: 2, b: 3\n\n\t  // 使用 bind 进行柯里化\n\t  var bar = foo.bind(null, 2); // a: 2, b: 5\n\t  bar(5);\n\t  ```\n\t- 可以使用 `Object.create(null)` 创建空对象（不会创建 `Object.prototype`，比 `{}` 更空），称作 DMZ 对象\n- 间接引用情况会导致绑定例外\n  ```js\n  function foo(a) {\n\tconsole.log(a);\n  }\n\n  var a = 2;\n  var o = { a: 3, foo: foo };\n  var p = { a: 4 };\n  o.foo(); // 3\n  // 注意：返回值是目标函数的引用，相当于直接调用 foo 函数\n  (p.foo = o.foo)(); // 2\n  ```\n- 软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定\n  ```js\n  if (!Function.prototype.softBind) {\n\tFunction.prototype.softBind = function (obj) {\n\t  var fn = this;\n\t  // 获取所用 curried 参数\n\t  var curried = [].slice.call(arguments, 1);\n\t  var bound = function () {\n\t\treturn fn.apply(\n\t\t  !this || this === (window || global) ? obj : this,\n\t\t  curried.concat.apply(curried, arguments)\n\t\t);\n\t  };\n\t  bound.prototype = Object.create(fn.prototype);\n\t  return bound;\n\t};\n  }\n  ```\n\n### 2.5 this 词法\n- **箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定**\n  - 箭头函数会继承外层函数调用的 this 绑定\n  - 内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1\n  ```js\n  function foo() {\n\treturn (a) => {\n\t  // 注意：this 继承自 foo\n\t  console.log(this.a);\n\t};\n  }\n\n  var obj1 = { a: 2 };\n  var obj2 = { a: 3 };\n\n  var bar = foo.call(obj1);\n  bar.call(obj2); // 2\n  ```\n\n## 第三章：对象\n### 3.1 对象\n- 可以通过 `{}` 或者 new 关键字声明对象\n\n### 3.2 类型\n- 内置对象\n\t- String\n\t- Number\n\t- Boolean\n\t- Object\n\t- Function\n\t- Array\n\t- Date\n\t- RegExp\n\t- Error\n- JS 会自动把字面量转换为一个对象\n\t- 比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法\n- null 、undefined 只有文字形式\n- Date 只有构造形式（对象）\n- Object、Array、Function、RegExp，只有构造形式，都是对象\n\n### 3.3 内容\n- 可以通过 `.` 或者 `[]` 来访问对象中的属性，\n- 属性名都是字符串，所以传入的值会被自动转化为字符串\n- 可计算属性名称\n\t- 使用 [] 包裹的表达式作为属性名\n\t- 常用于 Symbol\n  ```js\n  var MyObject = {\n\t[Symbol.Something]: \"wujieli\"\n  }\n  ```\n- 复制对象\n\t- 浅拷贝\n\t\t- 引用类型还是指向原来的对象\n\t\t- `JSON.parse(JSON.stringify(someObj))` 和 `Object.assign()` 可以实现浅拷贝\n\t- 深拷贝\n\t\t- 引用类型复制一套独立的\n- 属性操作符（数据描述符）\n\t- 除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）\n\t\t- writable 为 false 则不可修改\n\t\t- configurable 为 false 则不可以通过 `Object.defineProperty()` 修改属性描述符，不能删除属性\n\t\t- enumerable 为 false，属性不会出现在循环枚举中\n\t- Object.defineProperty()： 添加新属性或者修改已有属性\n\t  ```js\n\t  var obj = {};\n\n\t  Object.defineProperty(obj, \"a\", {\n\t\tvalue: 2,\n\t\twritable: true,\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t  });\n\n\t  console.log(obj.a); // 2\n\t  ```\n- 对象不变性\n\t- 通过 `writable: false` 和 `configurable: false` 可以创建一个常量属性，不可修改、重定义、删除\n\t- Object.preventExtensions( obj ) ：禁止添加新属性\n\t- Object.seal( obj ) ：创建一个密封对象，在现有对象调用 `Object.preventExtensions` 且 `configurable: false`\n\t- Object.freeze( obj ) ：现有对象调用 `Object.seal` 且 `writable: false`\n- `[[get]]` 属性\n\t- 在对象中查找同名属性，找到了就返回\n\t- 如果没找到就根据原型链找，找不到则返回 undefined\n- `[[put]]` 属性\n\t- 属性是否是访问描述符，如果是并存在 setter 就调用 setter\n\t- writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常\n\t- 以上都不是，将值设置为该属性的值\n- 访问描述符\n\t- 通过 getter 获取属性，通过 setter 设置属性，通常成对出现\n\t- 访问描述符只有：set、get、configurable、enumerable 属性\n- 属性存在性\n\t- `[属性名称]` in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链\n\t- Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链\n\n### 3.4 遍历\n- for...in 循环：遍历对象可枚举属性，包括原型链\n- for...of 循环：循环遍历对象的所有 value\n\t- 向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值\n\t- 数组内置 `@@iterator` 返回迭代器对象的函数\n\t- 普通对象没有 `@@terator` 目的是为了避免影响未来对象类型\n\n\n## 第四章：混合对象“类”\n### 4.1 类理论\n- 数据及对数据的操作应该封装打包作为数据结构\n- 使用**类（class）**对数据结构进行分类\n- 类的核心概念\n\t- 实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同\n\t- 继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法\n\t- 多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为\n\n### 4.2 类的机制\n- 如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例\n- 构造函数：\n\t- 用于构造类实例，一个特殊的类方法，通常和类同名\n\t- 返回一个对象（即：类实例）\n\n### 4.3 类的继承\n- 子类和父类是完全不同的类，子类会包含**父类原始行为的副本**，但也可以重复父类的行为甚至定义新的行为\n- 多态：\n\t- 子类可以重写父类方法\n\t- 继承链中不同层次的方法名可以被多次定义\n- 子类可以相对引用它继承的父类，这种相对引用称为 super\n- JS 自身不提供多重继承\n\n### 4.4 混入\n- JS 中对象没有自动复制的行为\n- 显式混入\n\t- 如果子对象中不存在对应属性则复制父亲对象属性\n\t  ```js\n\t  function mixin(souceObj, targetObj) {\n\t\tfor (let key in souceObj) {\n\t\t  // 只会在不存在的情况下复制\n\t\t  if (!(key in targetObj)) {\n\t\t\ttargetObj[key] = souceObj[key];\n\t\t  }\n\t\t}\n\n\t\treturn targetObj;\n\t  }\n\n\t  let Vehicle = {\n\t\tengines: 1,\n\n\t\tignition: function () {\n\t\t  console.log(\"发动引擎！\");\n\t\t},\n\t\tdrive: function () {\n\t\t  this.ignition();\n\t\t  console.log(\"启动！\");\n\t\t},\n\t  };\n\n\t  let Car = mixin(Vehicle, {\n\t\twheels: 4,\n\n\t\tdrive: function () {\n\t\t  Vehicle.drive.call(this); // 显式多态\n\t\t  console.log(`启动${this.wheels}个轮子的这辆车`);\n\t\t},\n\t  });\n\n\t  console.log(Car.drive());\n\t  ```\n\t- 显示混入的变体：寄生继承\n\t\t- 先通过潜拷贝获取父对象，再添加新的方法\n- 隐式混入\n\t- 通过 `call(this)` 方法把父对象方法绑定到子对象\n- 尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患\n\n## 第五章：原型\n### 5.1 [[Prototype]]\n- `[[Prototype]]`：JS 对象的内置属性，是对于其他对象的引用\n- 对于属性查找操作（如：`[[Get]]`，for...in，in），**如果在对象本身找不到需要的属性，就通过 `[[Prototype]]` 访问对象的原型链向上查找**，找不到就返回 undefined\n- 所有普通的 `[[Prototype]]` 最终都会指向内置的 Object.prototype\n- 原型链 = `[[Prototype]]` 链\n- 属性设置\n\t- 对于 `obj.foo = \"bar\";` 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 `[[Prototype]]` 查找原型链，如果原型链找不到则直接赋值在 obj 上\n\t- 屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：**选择最底层的属性**），但分为三种情况讨论\n\t\t- 原型链属性 `writable: true` ，会直接在底层对象新增一个属性，**属于屏蔽属性**\n\t\t- 原型链属性 `writable: false` ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值\n\t\t- 原型链存在该属性并且是一个 setter，则直接调用该 setter\n\n### 5.2 ”类“\n- JS 中不会把一个对象（类）复制到另一个对象（实例），**只是关联起来**\n- `new Foo()` 会生成一个新对象，新对象的内部链接 `[[Prototype]]` 关联到的是 `Foo.prototype` 对象\n- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png)\n- 构造函数：\n\t- 函数原型的 construtor 默认指向自己，即：`Foo.prototype.constructor === Foo` 是 true\n\t- 调用 `new` 创建的对象的 constructor 属性指向 -> 创建这个对象的函数\n\t- 参考代码\n\t  ```js\n\t  function Foo() {}\n\n\t  console.log(Foo.prototype.constructor === Foo); // true\n\n\t  var a = new Foo();\n\t  console.log(a.constructor === Foo); // true\n\t  ```\n\t- JS 中的函数就是普通函数\n\t- new 会劫持所有所有的普通函数，并通过构造对象调用它\n\t- 注意：`.constructor` 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了\n\n### 5.3 （原型）继承\n- 在 ES6 之前，将子对象的 prototype 通过 `Object.create()` 指向父亲对象\n- ES6 可以通过 `Object.setPrototypeOf` 直接修改子对象原型，两种方式效果相同\n  ```js\n  // ES 6 之前\n  Bar.prototype = Object.create( Foo.prototype );\n  // ES 6\n  Object.setPrototypeOf( Bar.prototype, Foo.prototype );\n  ```\n- 查找”类“关系\n\t- 反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）\n\t- 通过 instanceof 查找反射（不建议使用）：`a instanceof Foo;` ，a 的整条原型链是否有指向 Foo.prototype 的对象\n\t- 通过 `Foo.prototype.isPrototypeOf( a );` 查找反射：a 的原型链是否出现过 Foo.prototype\n\t- `.__proto__` 不是一个属性，而是一个 getter / setter\n\t\t- 通过 ES6 的方式实现 `.__proto__` 参考\n\t ```js\n\t  Object.defineProperty(Object.prototype, \"__proto__\", {\n\t\tget: function () {\n\t\t  return Object.getPrototypeOf(this);\n\t\t},\n\t\tset: function (o) {\n\t\t  Object.setPrototypeOf(this, o);\n\t\t  return o;\n\t\t},\n\t  });\n\t  ```\n\n### 5.4 对象关联\n- `let bar = Object.create( obj )` 可以将新对象 bar 原型指向 obj\n- Object.create() 在 ES5 中的实现代码\n  ```js\n  if (!Object.create) {\n\tObject.create = function(o) {\n\t  function F(){}\n\t  F.prototype = o;\n\t  return new F();\n\t}\n  }\n  ```\n\n\n## 第六章：行为委托\n- 在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法\n- 委托理论\n    - 对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系\n    - 定义的都是对象，一个对象通过 `Object.create()` 创建，把 `[[Prototype]]` 委托给另一个对象\n    - 示例代码\n      ```js\n      Task = {\n      setID: function (ID) {\n          this.id = ID;\n      },\n      outputID: function () {\n          console.log(this.id);\n      },\n      };\n      // 让XYZ委托Task\n      XYZ = Object.create(Task);\n\n      XYZ.prepareTask = function (ID, Label) {\n      this.setID(ID);\n      this.label = Label;\n      };\n      XYZ.outputTaskDetails = function () {\n      this.outputID();\n      console.log(this.label);\n      };\n      ```\n- 这类编码风格称为 对象关联（OLOO，objects linked to other objects）\n\t- 对于实例化后的属性数据都存储于子对象上\n\t- 尽量避免原型链上存在相同的命名\n\t- 子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象\n- 禁止双向委托\n\n## 附录：ES6 中的 Class\n- ES6 中的 class 语法糖解决的问题\n\t- 不再使用 .prototype\n\t- 子类通过 extends 直接继承父类，不需要再通过 Object.create()\n\t- 可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法\n\t- class 语法不能声明属性（需要通过 constructor），避免错误\n- class 语法糖存在的问题\n\t- 如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式\n\t- super 不是动态绑定的，而是在声明时静态绑定的\n","source":"_posts/你不知道的-JS-学习笔记：第二部分-this和对象原型.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：this和对象原型\ndate: 2022-02-05 20:18:01\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg\n---\n## 第一章：关于 this\n- 误解\n\t- this 不是指向函数自身\n\t- this 在任何情况下都不指向函数的词法作用域\n- this 是函数被调用时发生的绑定，**指向什么完全取决于在哪里被调用**\n\n## 第二章 this 全面解析\n### 2.1 调用位置\n- 确认函数的调用位置的方式是：分析调用栈\n\n### 2.2 绑定规则\n- 默认绑定\n\t- 在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined\n\t- 非严格模式示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var a = 2;\n\n\t  foo(); // 2\n\t  ```\n- 隐式绑定\n\t- 当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象\n\t- 示例代码\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo\n\t  }\n\n\t  obj.foo(); // 2\n\t  ```\n\t- 隐式丢失：丢失隐式绑定对象，从而使用默认绑定\n\t- 非严格模式的隐式丢失示例\n\t\t- 此时 bar 引用的 foo 函数本身\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  bar(); // 2\n\n\t  ```\n\t- 传入回调参数是同样会存在隐式丢失问题\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  function doFoo(fn) {\n\t\t// fn 引用的就是 foo\n\t\tfn();\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  doFoo(obj.foo);\n\t  ```\n- 显式绑定\n\t- 使用 call 函数或者 apply 函数实现\n\t- 第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this\n\t- call 函数示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  foo.call(obj); // 2\n\t  ```\n\t- 硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象\n\t\t- 应用：创建包裹函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = function () {\n\t\treturn foo.apply(obj, arguments);\n\t  };\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n\t\t- 应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = foo.bind(obj); // bar 是一个新的函数，this 指向 obj\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n- new 绑定\n\t- new 调用函数（发生构造函数调用）过程\n\t\t- 创建一个全新的对象\n\t\t- 新对象被执行`[[原型]]`连接\n\t\t- 新对象被绑定到函数调用的 this\n\t\t- 如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象\n\t- 示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上\n\t  ```js\n\t  function foo(a) {\n\t\tthis.a = a;\n\t  }\n\n\t  var bar = new foo(2);\n\t  console.log(bar.a); // 2\n\t  ```\n\n### 2.3 优先级\n- 显式绑定优先级 > 隐式绑定\n- new 绑定优先级 > 隐式绑定\n- **判断 this 规则的方式**\n\t- 是否在 new 中调用，是的话 this 绑定的是新创建的对象\n\t- 是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象\n\t- 是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象\n\t- 以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象\n\t- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png)\n\n### 2.4 绑定例外\n- 如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定\n\t- 应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符\n\t```js\n\t  function foo(a, b) {\n\t\tconsole.log(`a: ${a}, b: ${b}`);\n\t  }\n\n\t  // 数组展开为参数\n\t  foo.apply(null, [2, 3]); // a: 2, b: 3\n\n\t  // 使用 bind 进行柯里化\n\t  var bar = foo.bind(null, 2); // a: 2, b: 5\n\t  bar(5);\n\t  ```\n\t- 可以使用 `Object.create(null)` 创建空对象（不会创建 `Object.prototype`，比 `{}` 更空），称作 DMZ 对象\n- 间接引用情况会导致绑定例外\n  ```js\n  function foo(a) {\n\tconsole.log(a);\n  }\n\n  var a = 2;\n  var o = { a: 3, foo: foo };\n  var p = { a: 4 };\n  o.foo(); // 3\n  // 注意：返回值是目标函数的引用，相当于直接调用 foo 函数\n  (p.foo = o.foo)(); // 2\n  ```\n- 软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定\n  ```js\n  if (!Function.prototype.softBind) {\n\tFunction.prototype.softBind = function (obj) {\n\t  var fn = this;\n\t  // 获取所用 curried 参数\n\t  var curried = [].slice.call(arguments, 1);\n\t  var bound = function () {\n\t\treturn fn.apply(\n\t\t  !this || this === (window || global) ? obj : this,\n\t\t  curried.concat.apply(curried, arguments)\n\t\t);\n\t  };\n\t  bound.prototype = Object.create(fn.prototype);\n\t  return bound;\n\t};\n  }\n  ```\n\n### 2.5 this 词法\n- **箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定**\n  - 箭头函数会继承外层函数调用的 this 绑定\n  - 内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1\n  ```js\n  function foo() {\n\treturn (a) => {\n\t  // 注意：this 继承自 foo\n\t  console.log(this.a);\n\t};\n  }\n\n  var obj1 = { a: 2 };\n  var obj2 = { a: 3 };\n\n  var bar = foo.call(obj1);\n  bar.call(obj2); // 2\n  ```\n\n## 第三章：对象\n### 3.1 对象\n- 可以通过 `{}` 或者 new 关键字声明对象\n\n### 3.2 类型\n- 内置对象\n\t- String\n\t- Number\n\t- Boolean\n\t- Object\n\t- Function\n\t- Array\n\t- Date\n\t- RegExp\n\t- Error\n- JS 会自动把字面量转换为一个对象\n\t- 比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法\n- null 、undefined 只有文字形式\n- Date 只有构造形式（对象）\n- Object、Array、Function、RegExp，只有构造形式，都是对象\n\n### 3.3 内容\n- 可以通过 `.` 或者 `[]` 来访问对象中的属性，\n- 属性名都是字符串，所以传入的值会被自动转化为字符串\n- 可计算属性名称\n\t- 使用 [] 包裹的表达式作为属性名\n\t- 常用于 Symbol\n  ```js\n  var MyObject = {\n\t[Symbol.Something]: \"wujieli\"\n  }\n  ```\n- 复制对象\n\t- 浅拷贝\n\t\t- 引用类型还是指向原来的对象\n\t\t- `JSON.parse(JSON.stringify(someObj))` 和 `Object.assign()` 可以实现浅拷贝\n\t- 深拷贝\n\t\t- 引用类型复制一套独立的\n- 属性操作符（数据描述符）\n\t- 除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）\n\t\t- writable 为 false 则不可修改\n\t\t- configurable 为 false 则不可以通过 `Object.defineProperty()` 修改属性描述符，不能删除属性\n\t\t- enumerable 为 false，属性不会出现在循环枚举中\n\t- Object.defineProperty()： 添加新属性或者修改已有属性\n\t  ```js\n\t  var obj = {};\n\n\t  Object.defineProperty(obj, \"a\", {\n\t\tvalue: 2,\n\t\twritable: true,\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t  });\n\n\t  console.log(obj.a); // 2\n\t  ```\n- 对象不变性\n\t- 通过 `writable: false` 和 `configurable: false` 可以创建一个常量属性，不可修改、重定义、删除\n\t- Object.preventExtensions( obj ) ：禁止添加新属性\n\t- Object.seal( obj ) ：创建一个密封对象，在现有对象调用 `Object.preventExtensions` 且 `configurable: false`\n\t- Object.freeze( obj ) ：现有对象调用 `Object.seal` 且 `writable: false`\n- `[[get]]` 属性\n\t- 在对象中查找同名属性，找到了就返回\n\t- 如果没找到就根据原型链找，找不到则返回 undefined\n- `[[put]]` 属性\n\t- 属性是否是访问描述符，如果是并存在 setter 就调用 setter\n\t- writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常\n\t- 以上都不是，将值设置为该属性的值\n- 访问描述符\n\t- 通过 getter 获取属性，通过 setter 设置属性，通常成对出现\n\t- 访问描述符只有：set、get、configurable、enumerable 属性\n- 属性存在性\n\t- `[属性名称]` in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链\n\t- Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链\n\n### 3.4 遍历\n- for...in 循环：遍历对象可枚举属性，包括原型链\n- for...of 循环：循环遍历对象的所有 value\n\t- 向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值\n\t- 数组内置 `@@iterator` 返回迭代器对象的函数\n\t- 普通对象没有 `@@terator` 目的是为了避免影响未来对象类型\n\n\n## 第四章：混合对象“类”\n### 4.1 类理论\n- 数据及对数据的操作应该封装打包作为数据结构\n- 使用**类（class）**对数据结构进行分类\n- 类的核心概念\n\t- 实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同\n\t- 继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法\n\t- 多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为\n\n### 4.2 类的机制\n- 如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例\n- 构造函数：\n\t- 用于构造类实例，一个特殊的类方法，通常和类同名\n\t- 返回一个对象（即：类实例）\n\n### 4.3 类的继承\n- 子类和父类是完全不同的类，子类会包含**父类原始行为的副本**，但也可以重复父类的行为甚至定义新的行为\n- 多态：\n\t- 子类可以重写父类方法\n\t- 继承链中不同层次的方法名可以被多次定义\n- 子类可以相对引用它继承的父类，这种相对引用称为 super\n- JS 自身不提供多重继承\n\n### 4.4 混入\n- JS 中对象没有自动复制的行为\n- 显式混入\n\t- 如果子对象中不存在对应属性则复制父亲对象属性\n\t  ```js\n\t  function mixin(souceObj, targetObj) {\n\t\tfor (let key in souceObj) {\n\t\t  // 只会在不存在的情况下复制\n\t\t  if (!(key in targetObj)) {\n\t\t\ttargetObj[key] = souceObj[key];\n\t\t  }\n\t\t}\n\n\t\treturn targetObj;\n\t  }\n\n\t  let Vehicle = {\n\t\tengines: 1,\n\n\t\tignition: function () {\n\t\t  console.log(\"发动引擎！\");\n\t\t},\n\t\tdrive: function () {\n\t\t  this.ignition();\n\t\t  console.log(\"启动！\");\n\t\t},\n\t  };\n\n\t  let Car = mixin(Vehicle, {\n\t\twheels: 4,\n\n\t\tdrive: function () {\n\t\t  Vehicle.drive.call(this); // 显式多态\n\t\t  console.log(`启动${this.wheels}个轮子的这辆车`);\n\t\t},\n\t  });\n\n\t  console.log(Car.drive());\n\t  ```\n\t- 显示混入的变体：寄生继承\n\t\t- 先通过潜拷贝获取父对象，再添加新的方法\n- 隐式混入\n\t- 通过 `call(this)` 方法把父对象方法绑定到子对象\n- 尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患\n\n## 第五章：原型\n### 5.1 [[Prototype]]\n- `[[Prototype]]`：JS 对象的内置属性，是对于其他对象的引用\n- 对于属性查找操作（如：`[[Get]]`，for...in，in），**如果在对象本身找不到需要的属性，就通过 `[[Prototype]]` 访问对象的原型链向上查找**，找不到就返回 undefined\n- 所有普通的 `[[Prototype]]` 最终都会指向内置的 Object.prototype\n- 原型链 = `[[Prototype]]` 链\n- 属性设置\n\t- 对于 `obj.foo = \"bar\";` 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 `[[Prototype]]` 查找原型链，如果原型链找不到则直接赋值在 obj 上\n\t- 屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：**选择最底层的属性**），但分为三种情况讨论\n\t\t- 原型链属性 `writable: true` ，会直接在底层对象新增一个属性，**属于屏蔽属性**\n\t\t- 原型链属性 `writable: false` ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值\n\t\t- 原型链存在该属性并且是一个 setter，则直接调用该 setter\n\n### 5.2 ”类“\n- JS 中不会把一个对象（类）复制到另一个对象（实例），**只是关联起来**\n- `new Foo()` 会生成一个新对象，新对象的内部链接 `[[Prototype]]` 关联到的是 `Foo.prototype` 对象\n- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png)\n- 构造函数：\n\t- 函数原型的 construtor 默认指向自己，即：`Foo.prototype.constructor === Foo` 是 true\n\t- 调用 `new` 创建的对象的 constructor 属性指向 -> 创建这个对象的函数\n\t- 参考代码\n\t  ```js\n\t  function Foo() {}\n\n\t  console.log(Foo.prototype.constructor === Foo); // true\n\n\t  var a = new Foo();\n\t  console.log(a.constructor === Foo); // true\n\t  ```\n\t- JS 中的函数就是普通函数\n\t- new 会劫持所有所有的普通函数，并通过构造对象调用它\n\t- 注意：`.constructor` 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了\n\n### 5.3 （原型）继承\n- 在 ES6 之前，将子对象的 prototype 通过 `Object.create()` 指向父亲对象\n- ES6 可以通过 `Object.setPrototypeOf` 直接修改子对象原型，两种方式效果相同\n  ```js\n  // ES 6 之前\n  Bar.prototype = Object.create( Foo.prototype );\n  // ES 6\n  Object.setPrototypeOf( Bar.prototype, Foo.prototype );\n  ```\n- 查找”类“关系\n\t- 反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）\n\t- 通过 instanceof 查找反射（不建议使用）：`a instanceof Foo;` ，a 的整条原型链是否有指向 Foo.prototype 的对象\n\t- 通过 `Foo.prototype.isPrototypeOf( a );` 查找反射：a 的原型链是否出现过 Foo.prototype\n\t- `.__proto__` 不是一个属性，而是一个 getter / setter\n\t\t- 通过 ES6 的方式实现 `.__proto__` 参考\n\t ```js\n\t  Object.defineProperty(Object.prototype, \"__proto__\", {\n\t\tget: function () {\n\t\t  return Object.getPrototypeOf(this);\n\t\t},\n\t\tset: function (o) {\n\t\t  Object.setPrototypeOf(this, o);\n\t\t  return o;\n\t\t},\n\t  });\n\t  ```\n\n### 5.4 对象关联\n- `let bar = Object.create( obj )` 可以将新对象 bar 原型指向 obj\n- Object.create() 在 ES5 中的实现代码\n  ```js\n  if (!Object.create) {\n\tObject.create = function(o) {\n\t  function F(){}\n\t  F.prototype = o;\n\t  return new F();\n\t}\n  }\n  ```\n\n\n## 第六章：行为委托\n- 在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法\n- 委托理论\n    - 对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系\n    - 定义的都是对象，一个对象通过 `Object.create()` 创建，把 `[[Prototype]]` 委托给另一个对象\n    - 示例代码\n      ```js\n      Task = {\n      setID: function (ID) {\n          this.id = ID;\n      },\n      outputID: function () {\n          console.log(this.id);\n      },\n      };\n      // 让XYZ委托Task\n      XYZ = Object.create(Task);\n\n      XYZ.prepareTask = function (ID, Label) {\n      this.setID(ID);\n      this.label = Label;\n      };\n      XYZ.outputTaskDetails = function () {\n      this.outputID();\n      console.log(this.label);\n      };\n      ```\n- 这类编码风格称为 对象关联（OLOO，objects linked to other objects）\n\t- 对于实例化后的属性数据都存储于子对象上\n\t- 尽量避免原型链上存在相同的命名\n\t- 子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象\n- 禁止双向委托\n\n## 附录：ES6 中的 Class\n- ES6 中的 class 语法糖解决的问题\n\t- 不再使用 .prototype\n\t- 子类通过 extends 直接继承父类，不需要再通过 Object.create()\n\t- 可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法\n\t- class 语法不能声明属性（需要通过 constructor），避免错误\n- class 语法糖存在的问题\n\t- 如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式\n\t- super 不是动态绑定的，而是在声明时静态绑定的\n","slug":"你不知道的-JS-学习笔记：第二部分-this和对象原型","published":1,"updated":"2022-02-05T12:39:23.532Z","_id":"ckz9sytq800001u0e6cbg52sb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：关于-this\"><a href=\"#第一章：关于-this\" class=\"headerlink\" title=\"第一章：关于 this\"></a>第一章：关于 this</h2><ul>\n<li>误解<ul>\n<li>this 不是指向函数自身</li>\n<li>this 在任何情况下都不指向函数的词法作用域</li>\n</ul>\n</li>\n<li>this 是函数被调用时发生的绑定，<strong>指向什么完全取决于在哪里被调用</strong></li>\n</ul>\n<h2 id=\"第二章-this-全面解析\"><a href=\"#第二章-this-全面解析\" class=\"headerlink\" title=\"第二章 this 全面解析\"></a>第二章 this 全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><ul>\n<li>确认函数的调用位置的方式是：分析调用栈</li>\n</ul>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><ul>\n<li>默认绑定<ul>\n<li>在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined</li>\n<li>非严格模式示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>隐式绑定<ul>\n<li>当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo\n <span class=\"token punctuation\">&#125;</span>\n\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>隐式丢失：丢失隐式绑定对象，从而使用默认绑定</li>\n<li>非严格模式的隐式丢失示例<ul>\n<li>此时 bar 引用的 foo 函数本身<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>传入回调参数是同样会存在隐式丢失问题<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// fn 引用的就是 foo</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>显式绑定<ul>\n<li>使用 call 函数或者 apply 函数实现</li>\n<li>第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this</li>\n<li>call 函数示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象<ul>\n<li>应用：创建包裹函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar 是一个新的函数，this 指向 obj</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>new 绑定<ul>\n<li>new 调用函数（发生构造函数调用）过程<ul>\n<li>创建一个全新的对象</li>\n<li>新对象被执行<code>[[原型]]</code>连接</li>\n<li>新对象被绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象</li>\n</ul>\n</li>\n<li>示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><ul>\n<li>显式绑定优先级 &gt; 隐式绑定</li>\n<li>new 绑定优先级 &gt; 隐式绑定</li>\n<li><strong>判断 this 规则的方式</strong><ul>\n<li>是否在 new 中调用，是的话 this 绑定的是新创建的对象</li>\n<li>是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象</li>\n<li>是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象</li>\n<li>以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象</li>\n<li><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><ul>\n<li>如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定<ul>\n<li>应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token comment\">// 数组展开为参数</span>\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 3</span>\n\n <span class=\"token comment\">// 使用 bind 进行柯里化</span>\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 5</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以使用 <code>Object.create(null)</code> 创建空对象（不会创建 <code>Object.prototype</code>，比 <code>&#123;&#125;</code> 更空），称作 DMZ 对象</li>\n</ul>\n</li>\n<li>间接引用情况会导致绑定例外<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> foo<span class=\"token operator\">:</span> foo <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n o<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n <span class=\"token comment\">// 注意：返回值是目标函数的引用，相当于直接调用 foo 函数</span>\n <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>softBind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">softBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取所用 curried 参数</span>\n  <span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n\t  <span class=\"token operator\">!</span><span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>window <span class=\"token operator\">||</span> global<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t  curried<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>curried<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-5-this-词法\"><a href=\"#2-5-this-词法\" class=\"headerlink\" title=\"2.5 this 词法\"></a>2.5 this 词法</h3><ul>\n<li><strong>箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定</strong><ul>\n<li>箭头函数会继承外层函数调用的 this 绑定</li>\n<li>内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 注意：this 继承自 foo</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：对象\"><a href=\"#第三章：对象\" class=\"headerlink\" title=\"第三章：对象\"></a>第三章：对象</h2><h3 id=\"3-1-对象\"><a href=\"#3-1-对象\" class=\"headerlink\" title=\"3.1 对象\"></a>3.1 对象</h3><ul>\n<li>可以通过 <code>&#123;&#125;</code> 或者 new 关键字声明对象</li>\n</ul>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><ul>\n<li>内置对象<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n</li>\n<li>JS 会自动把字面量转换为一个对象<ul>\n<li>比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法</li>\n</ul>\n</li>\n<li>null 、undefined 只有文字形式</li>\n<li>Date 只有构造形式（对象）</li>\n<li>Object、Array、Function、RegExp，只有构造形式，都是对象</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><ul>\n<li>可以通过 <code>.</code> 或者 <code>[]</code> 来访问对象中的属性，</li>\n<li>属性名都是字符串，所以传入的值会被自动转化为字符串</li>\n<li>可计算属性名称<ul>\n<li>使用 [] 包裹的表达式作为属性名</li>\n<li>常用于 Symbol<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> MyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>Something<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wujieli\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>复制对象<ul>\n<li>浅拷贝<ul>\n<li>引用类型还是指向原来的对象</li>\n<li><code>JSON.parse(JSON.stringify(someObj))</code> 和 <code>Object.assign()</code> 可以实现浅拷贝</li>\n</ul>\n</li>\n<li>深拷贝<ul>\n<li>引用类型复制一套独立的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性操作符（数据描述符）<ul>\n<li>除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）<ul>\n<li>writable 为 false 则不可修改</li>\n<li>configurable 为 false 则不可以通过 <code>Object.defineProperty()</code> 修改属性描述符，不能删除属性</li>\n<li>enumerable 为 false，属性不会出现在循环枚举中</li>\n</ul>\n</li>\n<li>Object.defineProperty()： 添加新属性或者修改已有属性<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\nvalue<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nwritable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nconfigurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nenumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>对象不变性<ul>\n<li>通过 <code>writable: false</code> 和 <code>configurable: false</code> 可以创建一个常量属性，不可修改、重定义、删除</li>\n<li>Object.preventExtensions( obj ) ：禁止添加新属性</li>\n<li>Object.seal( obj ) ：创建一个密封对象，在现有对象调用 <code>Object.preventExtensions</code> 且 <code>configurable: false</code></li>\n<li>Object.freeze( obj ) ：现有对象调用 <code>Object.seal</code> 且 <code>writable: false</code></li>\n</ul>\n</li>\n<li><code>[[get]]</code> 属性<ul>\n<li>在对象中查找同名属性，找到了就返回</li>\n<li>如果没找到就根据原型链找，找不到则返回 undefined</li>\n</ul>\n</li>\n<li><code>[[put]]</code> 属性<ul>\n<li>属性是否是访问描述符，如果是并存在 setter 就调用 setter</li>\n<li>writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常</li>\n<li>以上都不是，将值设置为该属性的值</li>\n</ul>\n</li>\n<li>访问描述符<ul>\n<li>通过 getter 获取属性，通过 setter 设置属性，通常成对出现</li>\n<li>访问描述符只有：set、get、configurable、enumerable 属性</li>\n</ul>\n</li>\n<li>属性存在性<ul>\n<li><code>[属性名称]</code> in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链</li>\n<li>Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><ul>\n<li>for…in 循环：遍历对象可枚举属性，包括原型链</li>\n<li>for…of 循环：循环遍历对象的所有 value<ul>\n<li>向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值</li>\n<li>数组内置 <code>@@iterator</code> 返回迭代器对象的函数</li>\n<li>普通对象没有 <code>@@terator</code> 目的是为了避免影响未来对象类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：混合对象“类”\"><a href=\"#第四章：混合对象“类”\" class=\"headerlink\" title=\"第四章：混合对象“类”\"></a>第四章：混合对象“类”</h2><h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><ul>\n<li>数据及对数据的操作应该封装打包作为数据结构</li>\n<li>使用<strong>类（class）</strong>对数据结构进行分类</li>\n<li>类的核心概念<ul>\n<li>实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同</li>\n<li>继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法</li>\n<li>多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 类的机制</h3><ul>\n<li>如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例</li>\n<li>构造函数：<ul>\n<li>用于构造类实例，一个特殊的类方法，通常和类同名</li>\n<li>返回一个对象（即：类实例）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><ul>\n<li>子类和父类是完全不同的类，子类会包含<strong>父类原始行为的副本</strong>，但也可以重复父类的行为甚至定义新的行为</li>\n<li>多态：<ul>\n<li>子类可以重写父类方法</li>\n<li>继承链中不同层次的方法名可以被多次定义</li>\n</ul>\n</li>\n<li>子类可以相对引用它继承的父类，这种相对引用称为 super</li>\n<li>JS 自身不提供多重继承</li>\n</ul>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 混入</h3><ul>\n<li>JS 中对象没有自动复制的行为</li>\n<li>显式混入<ul>\n<li>如果子对象中不存在对应属性则复制父亲对象属性<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">souceObj<span class=\"token punctuation\">,</span> targetObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> souceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 只会在不存在的情况下复制</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> targetObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttargetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> souceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">let</span> Vehicle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\nengines<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">ignition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发动引擎！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">let</span> Car <span class=\"token operator\">=</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\nwheels<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式多态</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">启动</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个轮子的这辆车</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>显示混入的变体：寄生继承<ul>\n<li>先通过潜拷贝获取父对象，再添加新的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隐式混入<ul>\n<li>通过 <code>call(this)</code> 方法把父对象方法绑定到子对象</li>\n</ul>\n</li>\n<li>尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患</li>\n</ul>\n<h2 id=\"第五章：原型\"><a href=\"#第五章：原型\" class=\"headerlink\" title=\"第五章：原型\"></a>第五章：原型</h2><h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 [[Prototype]]</h3><ul>\n<li><code>[[Prototype]]</code>：JS 对象的内置属性，是对于其他对象的引用</li>\n<li>对于属性查找操作（如：<code>[[Get]]</code>，for…in，in），<strong>如果在对象本身找不到需要的属性，就通过 <code>[[Prototype]]</code> 访问对象的原型链向上查找</strong>，找不到就返回 undefined</li>\n<li>所有普通的 <code>[[Prototype]]</code> 最终都会指向内置的 Object.prototype</li>\n<li>原型链 = <code>[[Prototype]]</code> 链</li>\n<li>属性设置<ul>\n<li>对于 <code>obj.foo = &quot;bar&quot;;</code> 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 <code>[[Prototype]]</code> 查找原型链，如果原型链找不到则直接赋值在 obj 上</li>\n<li>屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：<strong>选择最底层的属性</strong>），但分为三种情况讨论<ul>\n<li>原型链属性 <code>writable: true</code> ，会直接在底层对象新增一个属性，<strong>属于屏蔽属性</strong></li>\n<li>原型链属性 <code>writable: false</code> ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值</li>\n<li>原型链存在该属性并且是一个 setter，则直接调用该 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-”类“\"><a href=\"#5-2-”类“\" class=\"headerlink\" title=\"5.2 ”类“\"></a>5.2 ”类“</h3><ul>\n<li>JS 中不会把一个对象（类）复制到另一个对象（实例），<strong>只是关联起来</strong></li>\n<li><code>new Foo()</code> 会生成一个新对象，新对象的内部链接 <code>[[Prototype]]</code> 关联到的是 <code>Foo.prototype</code> 对象</li>\n<li><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png\"></li>\n<li>构造函数：<ul>\n<li>函数原型的 construtor 默认指向自己，即：<code>Foo.prototype.constructor === Foo</code> 是 true</li>\n<li>调用 <code>new</code> 创建的对象的 constructor 属性指向 -&gt; 创建这个对象的函数</li>\n<li>参考代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>JS 中的函数就是普通函数</li>\n<li>new 会劫持所有所有的普通函数，并通过构造对象调用它</li>\n<li>注意：<code>.constructor</code> 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-（原型）继承\"><a href=\"#5-3-（原型）继承\" class=\"headerlink\" title=\"5.3 （原型）继承\"></a>5.3 （原型）继承</h3><ul>\n<li>在 ES6 之前，将子对象的 prototype 通过 <code>Object.create()</code> 指向父亲对象</li>\n<li>ES6 可以通过 <code>Object.setPrototypeOf</code> 直接修改子对象原型，两种方式效果相同<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// ES 6 之前</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES 6</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查找”类“关系<ul>\n<li>反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）</li>\n<li>通过 instanceof 查找反射（不建议使用）：<code>a instanceof Foo;</code> ，a 的整条原型链是否有指向 Foo.prototype 的对象</li>\n<li>通过 <code>Foo.prototype.isPrototypeOf( a );</code> 查找反射：a 的原型链是否出现过 Foo.prototype</li>\n<li><code>.__proto__</code> 不是一个属性，而是一个 getter / setter<ul>\n<li>通过 ES6 的方式实现 <code>.__proto__</code> 参考<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><ul>\n<li><code>let bar = Object.create( obj )</code> 可以将新对象 bar 原型指向 obj</li>\n<li>Object.create() 在 ES5 中的实现代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"第六章：行为委托\"><a href=\"#第六章：行为委托\" class=\"headerlink\" title=\"第六章：行为委托\"></a>第六章：行为委托</h2><ul>\n<li>在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法</li>\n<li>委托理论<ul>\n<li>对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系</li>\n<li>定义的都是对象，一个对象通过 <code>Object.create()</code> 创建，把 <code>[[Prototype]]</code> 委托给另一个对象</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Task <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">setID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">outputID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让XYZ委托Task</span>\n<span class=\"token constant\">XYZ</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prepareTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> Label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setID</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> Label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">outputTaskDetails</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">outputID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>这类编码风格称为 对象关联（OLOO，objects linked to other objects）<ul>\n<li>对于实例化后的属性数据都存储于子对象上</li>\n<li>尽量避免原型链上存在相同的命名</li>\n<li>子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象</li>\n</ul>\n</li>\n<li>禁止双向委托</li>\n</ul>\n<h2 id=\"附录：ES6-中的-Class\"><a href=\"#附录：ES6-中的-Class\" class=\"headerlink\" title=\"附录：ES6 中的 Class\"></a>附录：ES6 中的 Class</h2><ul>\n<li>ES6 中的 class 语法糖解决的问题<ul>\n<li>不再使用 .prototype</li>\n<li>子类通过 extends 直接继承父类，不需要再通过 Object.create()</li>\n<li>可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法</li>\n<li>class 语法不能声明属性（需要通过 constructor），避免错误</li>\n</ul>\n</li>\n<li>class 语法糖存在的问题<ul>\n<li>如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式</li>\n<li>super 不是动态绑定的，而是在声明时静态绑定的</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：关于-this\"><a href=\"#第一章：关于-this\" class=\"headerlink\" title=\"第一章：关于 this\"></a>第一章：关于 this</h2><ul>\n<li>误解<ul>\n<li>this 不是指向函数自身</li>\n<li>this 在任何情况下都不指向函数的词法作用域</li>\n</ul>\n</li>\n<li>this 是函数被调用时发生的绑定，<strong>指向什么完全取决于在哪里被调用</strong></li>\n</ul>\n<h2 id=\"第二章-this-全面解析\"><a href=\"#第二章-this-全面解析\" class=\"headerlink\" title=\"第二章 this 全面解析\"></a>第二章 this 全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><ul>\n<li>确认函数的调用位置的方式是：分析调用栈</li>\n</ul>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><ul>\n<li>默认绑定<ul>\n<li>在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined</li>\n<li>非严格模式示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>隐式绑定<ul>\n<li>当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo\n <span class=\"token punctuation\">&#125;</span>\n\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>隐式丢失：丢失隐式绑定对象，从而使用默认绑定</li>\n<li>非严格模式的隐式丢失示例<ul>\n<li>此时 bar 引用的 foo 函数本身<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>传入回调参数是同样会存在隐式丢失问题<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// fn 引用的就是 foo</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nfoo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>显式绑定<ul>\n<li>使用 call 函数或者 apply 函数实现</li>\n<li>第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this</li>\n<li>call 函数示例<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象<ul>\n<li>应用：创建包裹函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\na<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar 是一个新的函数，this 指向 obj</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>new 绑定<ul>\n<li>new 调用函数（发生构造函数调用）过程<ul>\n<li>创建一个全新的对象</li>\n<li>新对象被执行<code>[[原型]]</code>连接</li>\n<li>新对象被绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象</li>\n</ul>\n</li>\n<li>示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><ul>\n<li>显式绑定优先级 &gt; 隐式绑定</li>\n<li>new 绑定优先级 &gt; 隐式绑定</li>\n<li><strong>判断 this 规则的方式</strong><ul>\n<li>是否在 new 中调用，是的话 this 绑定的是新创建的对象</li>\n<li>是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象</li>\n<li>是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象</li>\n<li>以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象</li>\n<li><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><ul>\n<li>如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定<ul>\n<li>应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token comment\">// 数组展开为参数</span>\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 3</span>\n\n <span class=\"token comment\">// 使用 bind 进行柯里化</span>\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 5</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以使用 <code>Object.create(null)</code> 创建空对象（不会创建 <code>Object.prototype</code>，比 <code>&#123;&#125;</code> 更空），称作 DMZ 对象</li>\n</ul>\n</li>\n<li>间接引用情况会导致绑定例外<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> foo<span class=\"token operator\">:</span> foo <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n o<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n <span class=\"token comment\">// 注意：返回值是目标函数的引用，相当于直接调用 foo 函数</span>\n <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>softBind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">softBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取所用 curried 参数</span>\n  <span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n\t  <span class=\"token operator\">!</span><span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>window <span class=\"token operator\">||</span> global<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t  curried<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>curried<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-5-this-词法\"><a href=\"#2-5-this-词法\" class=\"headerlink\" title=\"2.5 this 词法\"></a>2.5 this 词法</h3><ul>\n<li><strong>箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定</strong><ul>\n<li>箭头函数会继承外层函数调用的 this 绑定</li>\n<li>内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 注意：this 继承自 foo</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：对象\"><a href=\"#第三章：对象\" class=\"headerlink\" title=\"第三章：对象\"></a>第三章：对象</h2><h3 id=\"3-1-对象\"><a href=\"#3-1-对象\" class=\"headerlink\" title=\"3.1 对象\"></a>3.1 对象</h3><ul>\n<li>可以通过 <code>&#123;&#125;</code> 或者 new 关键字声明对象</li>\n</ul>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><ul>\n<li>内置对象<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n</li>\n<li>JS 会自动把字面量转换为一个对象<ul>\n<li>比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法</li>\n</ul>\n</li>\n<li>null 、undefined 只有文字形式</li>\n<li>Date 只有构造形式（对象）</li>\n<li>Object、Array、Function、RegExp，只有构造形式，都是对象</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><ul>\n<li>可以通过 <code>.</code> 或者 <code>[]</code> 来访问对象中的属性，</li>\n<li>属性名都是字符串，所以传入的值会被自动转化为字符串</li>\n<li>可计算属性名称<ul>\n<li>使用 [] 包裹的表达式作为属性名</li>\n<li>常用于 Symbol<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> MyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>Something<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wujieli\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>复制对象<ul>\n<li>浅拷贝<ul>\n<li>引用类型还是指向原来的对象</li>\n<li><code>JSON.parse(JSON.stringify(someObj))</code> 和 <code>Object.assign()</code> 可以实现浅拷贝</li>\n</ul>\n</li>\n<li>深拷贝<ul>\n<li>引用类型复制一套独立的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性操作符（数据描述符）<ul>\n<li>除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）<ul>\n<li>writable 为 false 则不可修改</li>\n<li>configurable 为 false 则不可以通过 <code>Object.defineProperty()</code> 修改属性描述符，不能删除属性</li>\n<li>enumerable 为 false，属性不会出现在循环枚举中</li>\n</ul>\n</li>\n<li>Object.defineProperty()： 添加新属性或者修改已有属性<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\nvalue<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\nwritable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nconfigurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\nenumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>对象不变性<ul>\n<li>通过 <code>writable: false</code> 和 <code>configurable: false</code> 可以创建一个常量属性，不可修改、重定义、删除</li>\n<li>Object.preventExtensions( obj ) ：禁止添加新属性</li>\n<li>Object.seal( obj ) ：创建一个密封对象，在现有对象调用 <code>Object.preventExtensions</code> 且 <code>configurable: false</code></li>\n<li>Object.freeze( obj ) ：现有对象调用 <code>Object.seal</code> 且 <code>writable: false</code></li>\n</ul>\n</li>\n<li><code>[[get]]</code> 属性<ul>\n<li>在对象中查找同名属性，找到了就返回</li>\n<li>如果没找到就根据原型链找，找不到则返回 undefined</li>\n</ul>\n</li>\n<li><code>[[put]]</code> 属性<ul>\n<li>属性是否是访问描述符，如果是并存在 setter 就调用 setter</li>\n<li>writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常</li>\n<li>以上都不是，将值设置为该属性的值</li>\n</ul>\n</li>\n<li>访问描述符<ul>\n<li>通过 getter 获取属性，通过 setter 设置属性，通常成对出现</li>\n<li>访问描述符只有：set、get、configurable、enumerable 属性</li>\n</ul>\n</li>\n<li>属性存在性<ul>\n<li><code>[属性名称]</code> in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链</li>\n<li>Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><ul>\n<li>for…in 循环：遍历对象可枚举属性，包括原型链</li>\n<li>for…of 循环：循环遍历对象的所有 value<ul>\n<li>向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值</li>\n<li>数组内置 <code>@@iterator</code> 返回迭代器对象的函数</li>\n<li>普通对象没有 <code>@@terator</code> 目的是为了避免影响未来对象类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：混合对象“类”\"><a href=\"#第四章：混合对象“类”\" class=\"headerlink\" title=\"第四章：混合对象“类”\"></a>第四章：混合对象“类”</h2><h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><ul>\n<li>数据及对数据的操作应该封装打包作为数据结构</li>\n<li>使用<strong>类（class）</strong>对数据结构进行分类</li>\n<li>类的核心概念<ul>\n<li>实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同</li>\n<li>继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法</li>\n<li>多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 类的机制</h3><ul>\n<li>如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例</li>\n<li>构造函数：<ul>\n<li>用于构造类实例，一个特殊的类方法，通常和类同名</li>\n<li>返回一个对象（即：类实例）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><ul>\n<li>子类和父类是完全不同的类，子类会包含<strong>父类原始行为的副本</strong>，但也可以重复父类的行为甚至定义新的行为</li>\n<li>多态：<ul>\n<li>子类可以重写父类方法</li>\n<li>继承链中不同层次的方法名可以被多次定义</li>\n</ul>\n</li>\n<li>子类可以相对引用它继承的父类，这种相对引用称为 super</li>\n<li>JS 自身不提供多重继承</li>\n</ul>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 混入</h3><ul>\n<li>JS 中对象没有自动复制的行为</li>\n<li>显式混入<ul>\n<li>如果子对象中不存在对应属性则复制父亲对象属性<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">souceObj<span class=\"token punctuation\">,</span> targetObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> souceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 只会在不存在的情况下复制</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> targetObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttargetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> souceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">let</span> Vehicle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\nengines<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">ignition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发动引擎！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">let</span> Car <span class=\"token operator\">=</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\nwheels<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式多态</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">启动</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个轮子的这辆车</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>显示混入的变体：寄生继承<ul>\n<li>先通过潜拷贝获取父对象，再添加新的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隐式混入<ul>\n<li>通过 <code>call(this)</code> 方法把父对象方法绑定到子对象</li>\n</ul>\n</li>\n<li>尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患</li>\n</ul>\n<h2 id=\"第五章：原型\"><a href=\"#第五章：原型\" class=\"headerlink\" title=\"第五章：原型\"></a>第五章：原型</h2><h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 [[Prototype]]</h3><ul>\n<li><code>[[Prototype]]</code>：JS 对象的内置属性，是对于其他对象的引用</li>\n<li>对于属性查找操作（如：<code>[[Get]]</code>，for…in，in），<strong>如果在对象本身找不到需要的属性，就通过 <code>[[Prototype]]</code> 访问对象的原型链向上查找</strong>，找不到就返回 undefined</li>\n<li>所有普通的 <code>[[Prototype]]</code> 最终都会指向内置的 Object.prototype</li>\n<li>原型链 = <code>[[Prototype]]</code> 链</li>\n<li>属性设置<ul>\n<li>对于 <code>obj.foo = &quot;bar&quot;;</code> 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 <code>[[Prototype]]</code> 查找原型链，如果原型链找不到则直接赋值在 obj 上</li>\n<li>屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：<strong>选择最底层的属性</strong>），但分为三种情况讨论<ul>\n<li>原型链属性 <code>writable: true</code> ，会直接在底层对象新增一个属性，<strong>属于屏蔽属性</strong></li>\n<li>原型链属性 <code>writable: false</code> ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值</li>\n<li>原型链存在该属性并且是一个 setter，则直接调用该 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-”类“\"><a href=\"#5-2-”类“\" class=\"headerlink\" title=\"5.2 ”类“\"></a>5.2 ”类“</h3><ul>\n<li>JS 中不会把一个对象（类）复制到另一个对象（实例），<strong>只是关联起来</strong></li>\n<li><code>new Foo()</code> 会生成一个新对象，新对象的内部链接 <code>[[Prototype]]</code> 关联到的是 <code>Foo.prototype</code> 对象</li>\n<li><img src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png\"></li>\n<li>构造函数：<ul>\n<li>函数原型的 construtor 默认指向自己，即：<code>Foo.prototype.constructor === Foo</code> 是 true</li>\n<li>调用 <code>new</code> 创建的对象的 constructor 属性指向 -&gt; 创建这个对象的函数</li>\n<li>参考代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>JS 中的函数就是普通函数</li>\n<li>new 会劫持所有所有的普通函数，并通过构造对象调用它</li>\n<li>注意：<code>.constructor</code> 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-（原型）继承\"><a href=\"#5-3-（原型）继承\" class=\"headerlink\" title=\"5.3 （原型）继承\"></a>5.3 （原型）继承</h3><ul>\n<li>在 ES6 之前，将子对象的 prototype 通过 <code>Object.create()</code> 指向父亲对象</li>\n<li>ES6 可以通过 <code>Object.setPrototypeOf</code> 直接修改子对象原型，两种方式效果相同<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// ES 6 之前</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES 6</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查找”类“关系<ul>\n<li>反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）</li>\n<li>通过 instanceof 查找反射（不建议使用）：<code>a instanceof Foo;</code> ，a 的整条原型链是否有指向 Foo.prototype 的对象</li>\n<li>通过 <code>Foo.prototype.isPrototypeOf( a );</code> 查找反射：a 的原型链是否出现过 Foo.prototype</li>\n<li><code>.__proto__</code> 不是一个属性，而是一个 getter / setter<ul>\n<li>通过 ES6 的方式实现 <code>.__proto__</code> 参考<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><ul>\n<li><code>let bar = Object.create( obj )</code> 可以将新对象 bar 原型指向 obj</li>\n<li>Object.create() 在 ES5 中的实现代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"第六章：行为委托\"><a href=\"#第六章：行为委托\" class=\"headerlink\" title=\"第六章：行为委托\"></a>第六章：行为委托</h2><ul>\n<li>在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法</li>\n<li>委托理论<ul>\n<li>对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系</li>\n<li>定义的都是对象，一个对象通过 <code>Object.create()</code> 创建，把 <code>[[Prototype]]</code> 委托给另一个对象</li>\n<li>示例代码<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Task <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">setID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">outputID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让XYZ委托Task</span>\n<span class=\"token constant\">XYZ</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prepareTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> Label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setID</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> Label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">outputTaskDetails</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">outputID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>这类编码风格称为 对象关联（OLOO，objects linked to other objects）<ul>\n<li>对于实例化后的属性数据都存储于子对象上</li>\n<li>尽量避免原型链上存在相同的命名</li>\n<li>子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象</li>\n</ul>\n</li>\n<li>禁止双向委托</li>\n</ul>\n<h2 id=\"附录：ES6-中的-Class\"><a href=\"#附录：ES6-中的-Class\" class=\"headerlink\" title=\"附录：ES6 中的 Class\"></a>附录：ES6 中的 Class</h2><ul>\n<li>ES6 中的 class 语法糖解决的问题<ul>\n<li>不再使用 .prototype</li>\n<li>子类通过 extends 直接继承父类，不需要再通过 Object.create()</li>\n<li>可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法</li>\n<li>class 语法不能声明属性（需要通过 constructor），避免错误</li>\n</ul>\n</li>\n<li>class 语法糖存在的问题<ul>\n<li>如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式</li>\n<li>super 不是动态绑定的，而是在声明时静态绑定的</li>\n</ul>\n</li>\n</ul>\n"},{"title":"你不知道的 JS 学习笔记：类型和语法","date":"2022-02-21T11:40:23.000Z","img":"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg","_content":"## 第一章：类型\n- **JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值**\n- JS 的七种内置类型\n  - number 数字\n  - string 字符串\n  - boolean 布尔值\n  - null 空值\n  - undefined 未定义\n  - symbol 符号\n  - object 对象（除了 object 其他都是基本类型）\n- 可以使用 typeof 检查基本类型\n    ``` js\n        console.log(typeof \"42\" === \"string\"); // true\n        console.log(typeof 42 === \"number\"); // true\n        console.log(typeof true === \"boolean\"); // true\n        console.log(typeof null === \"object\"); // true 注意 null 是 object，这是 JS 的 BUG\n        console.log(typeof undefined === \"undefined\"); // true\n        // ES6中新加入的类型\n        console.log(typeof Symbol() === \"symbol\"); // true\n        console.log(typeof { life: 42 } === \"object\"); // true\n    ```\n- Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）\n- JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言\n- undefined\n\t- 已经在作用域声明，但还没被赋值\n\t- 在作用域中没有被声明是 undeclared\n\t- **注意**：对于上面两种情况，typeof 返回的都是 undefined\n\n## 第二章：值\n- 2.1 数组\n\t- 数组可以存放任何类型的值\n\t- JS 中数组不用预先声明大小\n\t- 数组也是对象，可以包含自己的键值属性，但不会计算在 length 中\n\t- 类数组\n\t\t- 一组通过数字索引的值，比如：DOM 查询操作返回结果\n\t\t- 可以使用 `Array.slice` 或 `Array.from` 将类数组转化为数组\n- 2.2 字符串\n\t- 字符串可以借用数组方法\n\t\t- 借用 join 方法示例：`let b = Array.prototype.join( a, \"-\");`\n\t\t- 无法直接借用 reverse 方法，需要先转化为字符数组才能使用\n            ``` js\n                let c = a\n                .split( \"\" )\n                .reverse()\n                .join( \"\" );\n            ```\n- 2.3 数字\n\t- 数字以十进制的方式显示，小数后的 0 会被省略\n\t- `tofiexed()` 方法可以指定小数部分的显示位数，结果是字符串形式\n\t- `toprecision()` 方法可以指定有效位数的显示位数\n        ``` js\n            var a = 42.59; a.toPrecision(1); // \"4e+1\"\n            a.toPrecision(2); // \"43\"\n            a.toPrecision(3); // \"42.6\"\n            a.toPrecision(4); // \"42.59\"\n            a.toPrecision(5); // \"42.590\"\n            a.toPrecision(6); // \"42.5900\"\n        ```\n\t- 存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）\n        ``` js\n            console.log(0.1 + 0.2 === 0.3); // false\n        ```\n\t\t- 原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false\n\t\t- 解决方案：使用误差范围值\n\t\t\t- ES6 中定义为 `Number.EPSILON`,通常为：2^-52 (2.220446049250313e-16)\n\t\t\t- 使用误差范围判断两个数字是否相等\n                ``` js\n                    function numbersCloseEnoughToEqual(n1, n2) {\n                    return Math.abs(n1 - n2) < Number.EPSILON;\n                    }\n\n                    console.log(numbersCloseEnoughToEqual(0.1 + 0.2, 0.3)); // true\n                    console.log(numbersCloseEnoughToEqual(0.0000001, 0.0000002)); // false\n                ```\n\t- 整数的安全范围\n\t\t- ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]\n\t\t- 即：[-(2^53  -  1), 2^53  -  1]\n\t- 判断是否是整数\n\t\t- 使用 `Number.isInteger()` 判断是否是整数\n\t\t- 使用 `Number.isSafeInteger()` 判断是否是安全范围内的整数\n- 2.4 特殊数值\n\t- undefined 和 null\n\t\t- undefined 类型只有一个值，即：undefined\n\t\t- null 类型只有一个值，即：null\n\t\t- undefined 指未被赋值，null 指曾被赋值，但目前没有值\n\t\t- undefined 可以作为变量声明和赋值（**不要这么做**）\n\t- void\n\t\t- 指没有返回值，多用于函数没有返回结果\n\t\t- **可以使用 `void 0` 获取真正的 undefined**（非严格模式 undefined 可以被赋值，而 `void 0` 必定返回 undefined）\n\t- 特殊的数字\n\t\t- NAN：\n\t\t\t- 无效数值（仍然是一个数字类型，但指数字类型中的错误情况）\n\t\t\t- NAN 和谁比较都是 false，包括自己\n\t\t\t- 使用 `Number.isNaN()` 判断一个数字是否为 NAN\n                ``` js\n                    if (!Number.isNaN) {\n                    Number.isNaN = function (n) {\n                        return typeof n === \"number\" && window.isNaN(n);\n                    };\n                    }\n                ```\n\t\t- 无穷数字：Infinity\n\t\t\t- ES6 中定义为：`Number.POSITIVE_INFINITY`，`Number.NEGATIVE_INFINITY`\n\t\t\t- 计算结果一旦溢出为无穷数，就无法再转换为有穷数\n\t\t- 零值：0、-0\n\t\t\t- 乘法和除法运算会得到 -0\n\t\t\t- 存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）\n\t\t\t- 0 === -0\n\t- 特殊等式\n\t\t- `Object.is(a, b)` 可以判断两个值是否绝对相等\n\t\t- 优先使用 == 和 ===，因为效率更高\n- 2.5 值和引用\n\t- JS 中没有指针，JS 的变量不可能指向另一个变量的引用，**JS 引用指向的是值**\n\t- 基本类型通过**复制**方式复制或传递，引用类型通过**引用**方式复制或传递\n\t- 函数中的引用问题\n\t\t- 函数参数 a 通过**复制**的方式复制给函数内的 x\n\t\t- **引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值**\n            ``` js\n                function foo(x) {\n                x.push(4);\n                console.log(x);\n\n                // 注意引用 x 指向了其他的值\n                x = [4, 5, 6];\n                x.push(7);\n                console.log(x);\n                }\n\n                const a = [1, 2, 3];\n                foo(a); // 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]\n                console.log(a); // [ 1, 2, 3, 4 ]\n            ```\n\t- 我们无法自行决定使用复制赋值还是引用赋值，**一切由值的类型决定**\n\n## 第三章：原生函数\n- JS 常用的原生函数\n\t- String()\n\t- Number()\n\t- Boolean()\n\t- Array()\n\t- Object()\n\t- Function()\n\t- RegExp()\n\t- Date()\n\t- Error()\n\t- Symbol()\n- 3.1 内部属性 `[[Class]]`\n\t- 所有 typeof 返回为 “object” 的对象都包含内部属性 `[[Class]]`，可以通过 toString 方法查看\n        ``` js\n            console.log(Object.prototype.toString.call([1, 2, 3])); // [object Array]\n            console.log(Object.prototype.toString.call(() => {})); // [object Function]\n        ```\n- 3.2 封装对象包装\n\t- 基本类型没有如：`length` 属性和 `toString()` 方法，**JS 会自动为基本类型包装一个封装对象**\n\t- 浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率\n- 3.3 拆封\n\t- 可以使用 `valuOf()` 获取封装对象中基本类型的值\n        ``` js\n            let a = new String(\"abc\");\n            let b = new Number(12);\n            let c = new Boolean(true);\n\n            console.log(a.valueOf()); // abc\n            console.log(b.valueOf()); // 12\n            console.log(c.valueOf()); // true\n        ```\n- 3.4 原生函数作为构造函数\n\t- 尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题\n\t- 尽量不要创建和使用空单元数组\n\t- 对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）\n\t- Symbol\n\t\t- 具有唯一性的特殊值，用于声名对象属性不容易导致重名\n\t\t- 使用 Symbol() 原声构造函数自定义符号**不能**带 `new` 关键字\n\t\t- 注意：Symbol 不是对象，而是**一个基本类型**\n\t- 原生原型\n\t\t- 可以将 `Array.prototype.join()` 写作 `Array#join()`\n\t\t- 三个特殊的默认类型\n\t\t\t- Function.prototype 默认是一个函数\n\t\t\t- RegExp.prototype 默认是一个正则表达式\n\t\t\t- Array. prototype 默认是一个数组\n\t\t\t- 默认值在使用的时候只创建一次，可以节约资源\n\n## 第四章：强制类型转换\n- 4.1 值类型转换\n\t- 类型转换：值的类型从一种类型转换为另一种类型，为显式转换\n\t- 隐式的类型转换即强制类型转换\n\t- 类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时\n    ``` js\n        const a = 31;\n        console.log(a + \"\"); // 隐式类型转换\n        console.log(String(a)); // 显式类型转换\n    ```\n- 4.2 抽象值操作\n\t- 抽象操作 ToString\n\t\t- null -> \"null\"\n\t\t- undefined -> \"undefined\"\n\t\t- true -> \"true\"\n\t\t- 6 -> \"6\"\n\t\t- 数组特殊：[1,2,3] -> \"1,2,3\"\n\t\t- `JSON.stringfy()` 转化为字符串也用了 ToString\n\t\t\t- 结果总是字符串：`JSON.stringify(\"42\"); // \"\"42\"\" 包含双引号`\n\t\t\t- 字符串、数字、布尔值、null 的规则和 TOString 相同\n\t\t\t- 遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null\n\t\t\t- 包含循环引用会报错\n\t\t\t- 如果对象存在 `toJSON()` 方法，调用 `JSON.stringfy()` 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值\n\t- 抽象操作 ToNumber\n\t\t- 数字 -> 自身\n\t\t- 布尔值：false -> 0，true -> 1\n\t\t- null -> 0\n\t\t- undefined -> NaN\n\t\t- 对象 -> 抽象操作 ToPrimitive 规则\n\t- 抽象操作 ToBoolean\n\t\t- undefined、null、false、\"\"、0 / -0、NaN -> false\n\t\t- 上述以外 -> true\n\t- 抽象操作 ToPrimitive\n\t\t- 如果有 `Symbol.toPrimitive` 方法，优先调用\n\t\t- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n\t\t- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n\t\t- 以上三种没有转换成功则报错\n\n- 4.3 显式强制类型转换\n\t- 字符串、数字间的相互转换\n\t\t- 使用 `String()`、`Number()`、`.toString()` 方法\n\t\t- 使用 `+` 可以将字符串转化为数字\n\t\t- 字符串 -> 数字\n\t\t\t- 如果只有数字 -> 十进制数字\n\t\t\t- 如果包含有效浮点数数字 -> 浮点数数字\n\t\t\t- \"\" -> 0\n\t\t\t- 以上三种以外为 NaN\n\t\t- parseInt(string, radix) 方法\n\t\t\t- 如果 string 开头是 x / X -> 16 进制数字，开头是 0 -> 8 进制数字\n\t\t\t- 最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）\n\t\t\t- ES5 之后默认转化为 10 进制\n\t- `+` 可以将日期显示转化为数字，比如获取当前时间戳：`+new Date()`，但做好还是使用 `new Date().getTime()` 和 `Date.now()` 的方式\n\t- `~` 非运算符\n\t\t- `~x` 大致等同于 `-(x+1)`，`console.log(~42); // 43`\n\t\t- `~-1` -> `0`，可以用于如：`indexOf()` 方法返回为 -1 情况\n\t- 显示转化为布尔值\n\t\t- 使用 `Boolean()` 方法\n\t\t- 使用 `!!` ，第一个 `!` 将值显式转化为布尔值，第二个 `!` 将结果反转回原值\n\n- 4.4 隐式强制类型转换\n\t- 字符串与数字之间隐式强制类型转换\n\t\t- 使用 `+` 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法\n            ``` js\n                console.log(1 + 2); // 3\n                console.log(1 + \"2\"); // 12\n                console.log([1, 2] + [3, 4]); // 1,23,4\n            ```\n\t\t- `数字 + \"\"` 将数字转化为字符串，使用是 `valueOf()` 方法\n\t\t- 使用 `String(数字)` 的方式将数字转化为字符串使用的是 `toString()` 方法\n\t\t- 所以在定制 `valueOf()` 和 `toString()` 方法要注意，因为会影响强制类型转换的结果\n\t\t- `字符串 - 0` 可以将字符串转化为数字\n\t- 注意：`[] + {}` 和 `{} + []`，它们返回不同的结果，分别是 `[object Object]` 和 0\n\t\t- `{}` 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 `[]` 会被强制类型转换为 `\"\"`，而 {} 会被强制类型转换为 `[object Object]`\n\t\t- `{}` 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 `[]` 显式强制类型转换为 0\n\t- 布尔值 -> 数字的隐式强制类型转换\n\t\t- undefined、null、false、\"\"、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1\n\t- 转换为布尔值的隐式强制类型转换\n\t\t- 以下五种情况非布尔值会被强制转换为布尔值\n\t\t\t- `if()` 判断表达式\n\t\t\t- `for ( .. ; .. ; .. )` 语句中的第二个条件判断表达式\n\t\t\t- `while()` 和 `do...while()` 判断表达式\n\t\t\t- `?:` 判断表达式\n\t\t\t- `||` 和 `&& ` 判断表达式\n\t- `&&` 和 `||` 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值\n\t\t- `let a = b || \"123\";` 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123\n\t\t- `a && foo()` 等价于 `if (a) { foo() };`\n\t- Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误\n        ``` js\n            let s1 = Symbol(\"cool\");\n            String(s1); // \"Symbol(cool)\"\n            let s2 = Symbol(\"not cool\");\n            s2 + \"\"; // TypeError\n        ```\n- 4.5 宽松相等和严格相等\n\t- **`==` 允许在相等比较中进行强制类型转换，而 `===` 不允许**\n\t- 抽象相等（`==` 的行为）\n\t\t- 如果两个值的类型相同，就仅比较它们是否相等\n\t\t\t- 注意：`NaN` 不等于 `NaN`，`+0` 不等于 `-0`\n\t\t- 两个对象指向同一个值时即视为相等，不发生强制类型转换\n\t\t- `==` 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较\n\t\t- 在 `==` 中 null 和 undefined 相等\n\n- 4.6 抽象关系比较\n\t- 对于 `a < b` 的比较规则\n\t\t- 双方先调用 ToPrimitive 转化为字符串，\n\t\t\t- 如果存在数字就转化为数字比较\n\t\t\t- 如果双方都是字符串就按字母顺序比较\n\n## 第五章：语法\n- 5.1 语句和表达式\n\t- 语句和表达式示例\n        ``` js\n            let a = 3 * 5; // 声明语句\n            let b;\n            b = a; // 赋值表达式\n            b; // 表达式语句\n        ```\n\t- 语句都有一个结果值，结果值也包括 undefined\n\t\t- 在浏览器 console 输入语句，默认会显示最后一条语句的结果值\n\t- 表达式的副作用：造成其他的改变\n\t\t- 函数调用产生的副作用\n            ``` js\n                function foo() {\n                a = a + 1;\n                }\n\n                var a = 1;\n                foo(); // 结果值：undefined，副作用：a 的值被改变\n            ```\n\t\t- `delete` 操作对象的副作用是属性从对象中被删除\n\t- 上下文规则\n\t\t- 同样的语法在不同的情况会有不同的解释\n\t\t- 大括号 `{}` 规则\n\t\t\t- 定义对象常量\n\t\t\t\t- a 是赋值的对象（左值），{...} 好似所赋予的值（右值）\n                    ``` js\n                        let a = {\n                        foo: bar() // 假设 bar 已经声明\n                        }\n                    ```\n\t\t\t- 标签\n\t\t\t\t- `{}` 在此是为一个普通的代码块\n\t\t\t\t- 标签语句：`foo` 是 `bar()` 的标签，即通过 `foo` 能够跳转到 `bar()` 函数\n\t\t\t\t\t- 比如 `break` 语句可以从内层循环条装到外层循环或者结束循环，所以 `break` 也是一个标签\n                        ``` js\n                            {\n                            foo: bar() // 假设 bar 已经声明\n                            }\n                        ```\n\t\t\t- 对象解构\n\t\t\t- `if...else` 的代码块\n- 5.2 运算符优先级\n\t- `,` 连接一系列语句时，它的优先级最低\n\t- `&&` 运算符的优先级 > `=`\n\t- `&&` 运算符优先级 > `||`\n\t- 短路特性：进行 `&&` 或 `||` 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断\n\t- 三元运算符的执行方式\n\t\t- `a ? b : c ? d : e;` 等价于 `a ? b : (c ? d : e)`\n- 5.3 自动分号\n\t- 分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号\n- 5.4 错误\n\t- 暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况\n- 5.5 函数参数\n\t- 不要同时访问命名参数和其对应的arguments数组单元\n- 5.6 try...finally\n\t- 如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃\n- 5.7 switch\n\t- switch 使用的是 `===` 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题\n        ``` js\n            var a = \"hello world\";\n            var b = 10;\n            switch (true) {\n            case a || b == 10: // 返回的是 \"hello world\"\n                // 永远执行不到这里\n                break;\n            default:\n                console.log(\"Oops\");\n            }\n        ```\n\n## 附录A：混合环境 JS\n- JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现\n- 由于浏览器兼容性问题存在可能导致与官方规范的差异\n\t- 在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）\n\t- `window.escape(..)` 和 `window.unescape(..)` 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，`window.escape( \"? foo=97%&bar=3%\" )` 结果为 `\"%3Ffoo%3D97%25%26bar%3D3%25\"`\n\t- `String.prototype.substr` 第二个参数是结束位置索引（非自包含）， `String.prototype.substring`  第二个参数是长度（需要包含的字符数）\n- 宿主对象\n\t- 内建对象和函数，比如：DOM 元素，内部的 `[[class]]` 来自预定义属性\n\t- 和普通对象的行为差异\n\t\t- 无法正常访问 object 的内建方法，如 `toString()`\n\t\t- 无法写覆盖\n\t\t- 包含一些预定义的只读属性\n\t\t- 包含无法将 this 重载为其他对象的方法\n- 声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性\n\t- 由于浏览器历史问题，**在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量**\n- 不要扩展原生原型，可能产生冲突\n- 使用 `<script> .. </script>` 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用\n\t- 下面的代码都无法运行（foo() 还未被声明）\n        ``` html\n            <script>\n                foo();\n            </script>\n            <script>\n                function foo() { .. }\n            </script>\n        ```","source":"_posts/你不知道的-JS-学习笔记：类型和语法.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：类型和语法\ndate: 2022-02-21 19:40:23\ncategories: 前端\ntags: JavaScript\nimg: https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220204150854.jpg\n---\n## 第一章：类型\n- **JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值**\n- JS 的七种内置类型\n  - number 数字\n  - string 字符串\n  - boolean 布尔值\n  - null 空值\n  - undefined 未定义\n  - symbol 符号\n  - object 对象（除了 object 其他都是基本类型）\n- 可以使用 typeof 检查基本类型\n    ``` js\n        console.log(typeof \"42\" === \"string\"); // true\n        console.log(typeof 42 === \"number\"); // true\n        console.log(typeof true === \"boolean\"); // true\n        console.log(typeof null === \"object\"); // true 注意 null 是 object，这是 JS 的 BUG\n        console.log(typeof undefined === \"undefined\"); // true\n        // ES6中新加入的类型\n        console.log(typeof Symbol() === \"symbol\"); // true\n        console.log(typeof { life: 42 } === \"object\"); // true\n    ```\n- Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）\n- JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言\n- undefined\n\t- 已经在作用域声明，但还没被赋值\n\t- 在作用域中没有被声明是 undeclared\n\t- **注意**：对于上面两种情况，typeof 返回的都是 undefined\n\n## 第二章：值\n- 2.1 数组\n\t- 数组可以存放任何类型的值\n\t- JS 中数组不用预先声明大小\n\t- 数组也是对象，可以包含自己的键值属性，但不会计算在 length 中\n\t- 类数组\n\t\t- 一组通过数字索引的值，比如：DOM 查询操作返回结果\n\t\t- 可以使用 `Array.slice` 或 `Array.from` 将类数组转化为数组\n- 2.2 字符串\n\t- 字符串可以借用数组方法\n\t\t- 借用 join 方法示例：`let b = Array.prototype.join( a, \"-\");`\n\t\t- 无法直接借用 reverse 方法，需要先转化为字符数组才能使用\n            ``` js\n                let c = a\n                .split( \"\" )\n                .reverse()\n                .join( \"\" );\n            ```\n- 2.3 数字\n\t- 数字以十进制的方式显示，小数后的 0 会被省略\n\t- `tofiexed()` 方法可以指定小数部分的显示位数，结果是字符串形式\n\t- `toprecision()` 方法可以指定有效位数的显示位数\n        ``` js\n            var a = 42.59; a.toPrecision(1); // \"4e+1\"\n            a.toPrecision(2); // \"43\"\n            a.toPrecision(3); // \"42.6\"\n            a.toPrecision(4); // \"42.59\"\n            a.toPrecision(5); // \"42.590\"\n            a.toPrecision(6); // \"42.5900\"\n        ```\n\t- 存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）\n        ``` js\n            console.log(0.1 + 0.2 === 0.3); // false\n        ```\n\t\t- 原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false\n\t\t- 解决方案：使用误差范围值\n\t\t\t- ES6 中定义为 `Number.EPSILON`,通常为：2^-52 (2.220446049250313e-16)\n\t\t\t- 使用误差范围判断两个数字是否相等\n                ``` js\n                    function numbersCloseEnoughToEqual(n1, n2) {\n                    return Math.abs(n1 - n2) < Number.EPSILON;\n                    }\n\n                    console.log(numbersCloseEnoughToEqual(0.1 + 0.2, 0.3)); // true\n                    console.log(numbersCloseEnoughToEqual(0.0000001, 0.0000002)); // false\n                ```\n\t- 整数的安全范围\n\t\t- ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]\n\t\t- 即：[-(2^53  -  1), 2^53  -  1]\n\t- 判断是否是整数\n\t\t- 使用 `Number.isInteger()` 判断是否是整数\n\t\t- 使用 `Number.isSafeInteger()` 判断是否是安全范围内的整数\n- 2.4 特殊数值\n\t- undefined 和 null\n\t\t- undefined 类型只有一个值，即：undefined\n\t\t- null 类型只有一个值，即：null\n\t\t- undefined 指未被赋值，null 指曾被赋值，但目前没有值\n\t\t- undefined 可以作为变量声明和赋值（**不要这么做**）\n\t- void\n\t\t- 指没有返回值，多用于函数没有返回结果\n\t\t- **可以使用 `void 0` 获取真正的 undefined**（非严格模式 undefined 可以被赋值，而 `void 0` 必定返回 undefined）\n\t- 特殊的数字\n\t\t- NAN：\n\t\t\t- 无效数值（仍然是一个数字类型，但指数字类型中的错误情况）\n\t\t\t- NAN 和谁比较都是 false，包括自己\n\t\t\t- 使用 `Number.isNaN()` 判断一个数字是否为 NAN\n                ``` js\n                    if (!Number.isNaN) {\n                    Number.isNaN = function (n) {\n                        return typeof n === \"number\" && window.isNaN(n);\n                    };\n                    }\n                ```\n\t\t- 无穷数字：Infinity\n\t\t\t- ES6 中定义为：`Number.POSITIVE_INFINITY`，`Number.NEGATIVE_INFINITY`\n\t\t\t- 计算结果一旦溢出为无穷数，就无法再转换为有穷数\n\t\t- 零值：0、-0\n\t\t\t- 乘法和除法运算会得到 -0\n\t\t\t- 存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）\n\t\t\t- 0 === -0\n\t- 特殊等式\n\t\t- `Object.is(a, b)` 可以判断两个值是否绝对相等\n\t\t- 优先使用 == 和 ===，因为效率更高\n- 2.5 值和引用\n\t- JS 中没有指针，JS 的变量不可能指向另一个变量的引用，**JS 引用指向的是值**\n\t- 基本类型通过**复制**方式复制或传递，引用类型通过**引用**方式复制或传递\n\t- 函数中的引用问题\n\t\t- 函数参数 a 通过**复制**的方式复制给函数内的 x\n\t\t- **引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值**\n            ``` js\n                function foo(x) {\n                x.push(4);\n                console.log(x);\n\n                // 注意引用 x 指向了其他的值\n                x = [4, 5, 6];\n                x.push(7);\n                console.log(x);\n                }\n\n                const a = [1, 2, 3];\n                foo(a); // 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]\n                console.log(a); // [ 1, 2, 3, 4 ]\n            ```\n\t- 我们无法自行决定使用复制赋值还是引用赋值，**一切由值的类型决定**\n\n## 第三章：原生函数\n- JS 常用的原生函数\n\t- String()\n\t- Number()\n\t- Boolean()\n\t- Array()\n\t- Object()\n\t- Function()\n\t- RegExp()\n\t- Date()\n\t- Error()\n\t- Symbol()\n- 3.1 内部属性 `[[Class]]`\n\t- 所有 typeof 返回为 “object” 的对象都包含内部属性 `[[Class]]`，可以通过 toString 方法查看\n        ``` js\n            console.log(Object.prototype.toString.call([1, 2, 3])); // [object Array]\n            console.log(Object.prototype.toString.call(() => {})); // [object Function]\n        ```\n- 3.2 封装对象包装\n\t- 基本类型没有如：`length` 属性和 `toString()` 方法，**JS 会自动为基本类型包装一个封装对象**\n\t- 浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率\n- 3.3 拆封\n\t- 可以使用 `valuOf()` 获取封装对象中基本类型的值\n        ``` js\n            let a = new String(\"abc\");\n            let b = new Number(12);\n            let c = new Boolean(true);\n\n            console.log(a.valueOf()); // abc\n            console.log(b.valueOf()); // 12\n            console.log(c.valueOf()); // true\n        ```\n- 3.4 原生函数作为构造函数\n\t- 尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题\n\t- 尽量不要创建和使用空单元数组\n\t- 对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）\n\t- Symbol\n\t\t- 具有唯一性的特殊值，用于声名对象属性不容易导致重名\n\t\t- 使用 Symbol() 原声构造函数自定义符号**不能**带 `new` 关键字\n\t\t- 注意：Symbol 不是对象，而是**一个基本类型**\n\t- 原生原型\n\t\t- 可以将 `Array.prototype.join()` 写作 `Array#join()`\n\t\t- 三个特殊的默认类型\n\t\t\t- Function.prototype 默认是一个函数\n\t\t\t- RegExp.prototype 默认是一个正则表达式\n\t\t\t- Array. prototype 默认是一个数组\n\t\t\t- 默认值在使用的时候只创建一次，可以节约资源\n\n## 第四章：强制类型转换\n- 4.1 值类型转换\n\t- 类型转换：值的类型从一种类型转换为另一种类型，为显式转换\n\t- 隐式的类型转换即强制类型转换\n\t- 类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时\n    ``` js\n        const a = 31;\n        console.log(a + \"\"); // 隐式类型转换\n        console.log(String(a)); // 显式类型转换\n    ```\n- 4.2 抽象值操作\n\t- 抽象操作 ToString\n\t\t- null -> \"null\"\n\t\t- undefined -> \"undefined\"\n\t\t- true -> \"true\"\n\t\t- 6 -> \"6\"\n\t\t- 数组特殊：[1,2,3] -> \"1,2,3\"\n\t\t- `JSON.stringfy()` 转化为字符串也用了 ToString\n\t\t\t- 结果总是字符串：`JSON.stringify(\"42\"); // \"\"42\"\" 包含双引号`\n\t\t\t- 字符串、数字、布尔值、null 的规则和 TOString 相同\n\t\t\t- 遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null\n\t\t\t- 包含循环引用会报错\n\t\t\t- 如果对象存在 `toJSON()` 方法，调用 `JSON.stringfy()` 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值\n\t- 抽象操作 ToNumber\n\t\t- 数字 -> 自身\n\t\t- 布尔值：false -> 0，true -> 1\n\t\t- null -> 0\n\t\t- undefined -> NaN\n\t\t- 对象 -> 抽象操作 ToPrimitive 规则\n\t- 抽象操作 ToBoolean\n\t\t- undefined、null、false、\"\"、0 / -0、NaN -> false\n\t\t- 上述以外 -> true\n\t- 抽象操作 ToPrimitive\n\t\t- 如果有 `Symbol.toPrimitive` 方法，优先调用\n\t\t- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n\t\t- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n\t\t- 以上三种没有转换成功则报错\n\n- 4.3 显式强制类型转换\n\t- 字符串、数字间的相互转换\n\t\t- 使用 `String()`、`Number()`、`.toString()` 方法\n\t\t- 使用 `+` 可以将字符串转化为数字\n\t\t- 字符串 -> 数字\n\t\t\t- 如果只有数字 -> 十进制数字\n\t\t\t- 如果包含有效浮点数数字 -> 浮点数数字\n\t\t\t- \"\" -> 0\n\t\t\t- 以上三种以外为 NaN\n\t\t- parseInt(string, radix) 方法\n\t\t\t- 如果 string 开头是 x / X -> 16 进制数字，开头是 0 -> 8 进制数字\n\t\t\t- 最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）\n\t\t\t- ES5 之后默认转化为 10 进制\n\t- `+` 可以将日期显示转化为数字，比如获取当前时间戳：`+new Date()`，但做好还是使用 `new Date().getTime()` 和 `Date.now()` 的方式\n\t- `~` 非运算符\n\t\t- `~x` 大致等同于 `-(x+1)`，`console.log(~42); // 43`\n\t\t- `~-1` -> `0`，可以用于如：`indexOf()` 方法返回为 -1 情况\n\t- 显示转化为布尔值\n\t\t- 使用 `Boolean()` 方法\n\t\t- 使用 `!!` ，第一个 `!` 将值显式转化为布尔值，第二个 `!` 将结果反转回原值\n\n- 4.4 隐式强制类型转换\n\t- 字符串与数字之间隐式强制类型转换\n\t\t- 使用 `+` 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法\n            ``` js\n                console.log(1 + 2); // 3\n                console.log(1 + \"2\"); // 12\n                console.log([1, 2] + [3, 4]); // 1,23,4\n            ```\n\t\t- `数字 + \"\"` 将数字转化为字符串，使用是 `valueOf()` 方法\n\t\t- 使用 `String(数字)` 的方式将数字转化为字符串使用的是 `toString()` 方法\n\t\t- 所以在定制 `valueOf()` 和 `toString()` 方法要注意，因为会影响强制类型转换的结果\n\t\t- `字符串 - 0` 可以将字符串转化为数字\n\t- 注意：`[] + {}` 和 `{} + []`，它们返回不同的结果，分别是 `[object Object]` 和 0\n\t\t- `{}` 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 `[]` 会被强制类型转换为 `\"\"`，而 {} 会被强制类型转换为 `[object Object]`\n\t\t- `{}` 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 `[]` 显式强制类型转换为 0\n\t- 布尔值 -> 数字的隐式强制类型转换\n\t\t- undefined、null、false、\"\"、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1\n\t- 转换为布尔值的隐式强制类型转换\n\t\t- 以下五种情况非布尔值会被强制转换为布尔值\n\t\t\t- `if()` 判断表达式\n\t\t\t- `for ( .. ; .. ; .. )` 语句中的第二个条件判断表达式\n\t\t\t- `while()` 和 `do...while()` 判断表达式\n\t\t\t- `?:` 判断表达式\n\t\t\t- `||` 和 `&& ` 判断表达式\n\t- `&&` 和 `||` 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值\n\t\t- `let a = b || \"123\";` 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123\n\t\t- `a && foo()` 等价于 `if (a) { foo() };`\n\t- Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误\n        ``` js\n            let s1 = Symbol(\"cool\");\n            String(s1); // \"Symbol(cool)\"\n            let s2 = Symbol(\"not cool\");\n            s2 + \"\"; // TypeError\n        ```\n- 4.5 宽松相等和严格相等\n\t- **`==` 允许在相等比较中进行强制类型转换，而 `===` 不允许**\n\t- 抽象相等（`==` 的行为）\n\t\t- 如果两个值的类型相同，就仅比较它们是否相等\n\t\t\t- 注意：`NaN` 不等于 `NaN`，`+0` 不等于 `-0`\n\t\t- 两个对象指向同一个值时即视为相等，不发生强制类型转换\n\t\t- `==` 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较\n\t\t- 在 `==` 中 null 和 undefined 相等\n\n- 4.6 抽象关系比较\n\t- 对于 `a < b` 的比较规则\n\t\t- 双方先调用 ToPrimitive 转化为字符串，\n\t\t\t- 如果存在数字就转化为数字比较\n\t\t\t- 如果双方都是字符串就按字母顺序比较\n\n## 第五章：语法\n- 5.1 语句和表达式\n\t- 语句和表达式示例\n        ``` js\n            let a = 3 * 5; // 声明语句\n            let b;\n            b = a; // 赋值表达式\n            b; // 表达式语句\n        ```\n\t- 语句都有一个结果值，结果值也包括 undefined\n\t\t- 在浏览器 console 输入语句，默认会显示最后一条语句的结果值\n\t- 表达式的副作用：造成其他的改变\n\t\t- 函数调用产生的副作用\n            ``` js\n                function foo() {\n                a = a + 1;\n                }\n\n                var a = 1;\n                foo(); // 结果值：undefined，副作用：a 的值被改变\n            ```\n\t\t- `delete` 操作对象的副作用是属性从对象中被删除\n\t- 上下文规则\n\t\t- 同样的语法在不同的情况会有不同的解释\n\t\t- 大括号 `{}` 规则\n\t\t\t- 定义对象常量\n\t\t\t\t- a 是赋值的对象（左值），{...} 好似所赋予的值（右值）\n                    ``` js\n                        let a = {\n                        foo: bar() // 假设 bar 已经声明\n                        }\n                    ```\n\t\t\t- 标签\n\t\t\t\t- `{}` 在此是为一个普通的代码块\n\t\t\t\t- 标签语句：`foo` 是 `bar()` 的标签，即通过 `foo` 能够跳转到 `bar()` 函数\n\t\t\t\t\t- 比如 `break` 语句可以从内层循环条装到外层循环或者结束循环，所以 `break` 也是一个标签\n                        ``` js\n                            {\n                            foo: bar() // 假设 bar 已经声明\n                            }\n                        ```\n\t\t\t- 对象解构\n\t\t\t- `if...else` 的代码块\n- 5.2 运算符优先级\n\t- `,` 连接一系列语句时，它的优先级最低\n\t- `&&` 运算符的优先级 > `=`\n\t- `&&` 运算符优先级 > `||`\n\t- 短路特性：进行 `&&` 或 `||` 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断\n\t- 三元运算符的执行方式\n\t\t- `a ? b : c ? d : e;` 等价于 `a ? b : (c ? d : e)`\n- 5.3 自动分号\n\t- 分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号\n- 5.4 错误\n\t- 暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况\n- 5.5 函数参数\n\t- 不要同时访问命名参数和其对应的arguments数组单元\n- 5.6 try...finally\n\t- 如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃\n- 5.7 switch\n\t- switch 使用的是 `===` 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题\n        ``` js\n            var a = \"hello world\";\n            var b = 10;\n            switch (true) {\n            case a || b == 10: // 返回的是 \"hello world\"\n                // 永远执行不到这里\n                break;\n            default:\n                console.log(\"Oops\");\n            }\n        ```\n\n## 附录A：混合环境 JS\n- JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现\n- 由于浏览器兼容性问题存在可能导致与官方规范的差异\n\t- 在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）\n\t- `window.escape(..)` 和 `window.unescape(..)` 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，`window.escape( \"? foo=97%&bar=3%\" )` 结果为 `\"%3Ffoo%3D97%25%26bar%3D3%25\"`\n\t- `String.prototype.substr` 第二个参数是结束位置索引（非自包含）， `String.prototype.substring`  第二个参数是长度（需要包含的字符数）\n- 宿主对象\n\t- 内建对象和函数，比如：DOM 元素，内部的 `[[class]]` 来自预定义属性\n\t- 和普通对象的行为差异\n\t\t- 无法正常访问 object 的内建方法，如 `toString()`\n\t\t- 无法写覆盖\n\t\t- 包含一些预定义的只读属性\n\t\t- 包含无法将 this 重载为其他对象的方法\n- 声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性\n\t- 由于浏览器历史问题，**在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量**\n- 不要扩展原生原型，可能产生冲突\n- 使用 `<script> .. </script>` 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用\n\t- 下面的代码都无法运行（foo() 还未被声明）\n        ``` html\n            <script>\n                foo();\n            </script>\n            <script>\n                function foo() { .. }\n            </script>\n        ```","slug":"你不知道的-JS-学习笔记：类型和语法","published":1,"updated":"2022-02-21T11:58:44.003Z","_id":"ckzwn9lz20000ie0egbqv1nln","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：类型\"><a href=\"#第一章：类型\" class=\"headerlink\" title=\"第一章：类型\"></a>第一章：类型</h2><ul>\n<li><strong>JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值</strong></li>\n<li>JS 的七种内置类型<ul>\n<li>number 数字</li>\n<li>string 字符串</li>\n<li>boolean 布尔值</li>\n<li>null 空值</li>\n<li>undefined 未定义</li>\n<li>symbol 符号</li>\n<li>object 对象（除了 object 其他都是基本类型）</li>\n</ul>\n</li>\n<li>可以使用 typeof 检查基本类型  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true 注意 null 是 object，这是 JS 的 BUG</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// ES6中新加入的类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span> life<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）</li>\n<li>JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言</li>\n<li>undefined<ul>\n<li>已经在作用域声明，但还没被赋值</li>\n<li>在作用域中没有被声明是 undeclared</li>\n<li><strong>注意</strong>：对于上面两种情况，typeof 返回的都是 undefined</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章：值\"><a href=\"#第二章：值\" class=\"headerlink\" title=\"第二章：值\"></a>第二章：值</h2><ul>\n<li>2.1 数组<ul>\n<li>数组可以存放任何类型的值</li>\n<li>JS 中数组不用预先声明大小</li>\n<li>数组也是对象，可以包含自己的键值属性，但不会计算在 length 中</li>\n<li>类数组<ul>\n<li>一组通过数字索引的值，比如：DOM 查询操作返回结果</li>\n<li>可以使用 <code>Array.slice</code> 或 <code>Array.from</code> 将类数组转化为数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.2 字符串<ul>\n<li>字符串可以借用数组方法<ul>\n<li>借用 join 方法示例：<code>let b = Array.prototype.join( a, &quot;-&quot;);</code></li>\n<li>无法直接借用 reverse 方法，需要先转化为字符数组才能使用  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 数字<ul>\n<li>数字以十进制的方式显示，小数后的 0 会被省略</li>\n<li><code>tofiexed()</code> 方法可以指定小数部分的显示位数，结果是字符串形式</li>\n<li><code>toprecision()</code> 方法可以指定有效位数的显示位数  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4e+1\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false</li>\n<li>解决方案：使用误差范围值<ul>\n<li>ES6 中定义为 <code>Number.EPSILON</code>,通常为：2^-52 (2.220446049250313e-16)</li>\n<li>使用误差范围判断两个数字是否相等  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0000002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整数的安全范围<ul>\n<li>ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]</li>\n<li>即：[-(2^53  -  1), 2^53  -  1]</li>\n</ul>\n</li>\n<li>判断是否是整数<ul>\n<li>使用 <code>Number.isInteger()</code> 判断是否是整数</li>\n<li>使用 <code>Number.isSafeInteger()</code> 判断是否是安全范围内的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.4 特殊数值<ul>\n<li>undefined 和 null<ul>\n<li>undefined 类型只有一个值，即：undefined</li>\n<li>null 类型只有一个值，即：null</li>\n<li>undefined 指未被赋值，null 指曾被赋值，但目前没有值</li>\n<li>undefined 可以作为变量声明和赋值（<strong>不要这么做</strong>）</li>\n</ul>\n</li>\n<li>void<ul>\n<li>指没有返回值，多用于函数没有返回结果</li>\n<li><strong>可以使用 <code>void 0</code> 获取真正的 undefined</strong>（非严格模式 undefined 可以被赋值，而 <code>void 0</code> 必定返回 undefined）</li>\n</ul>\n</li>\n<li>特殊的数字<ul>\n<li>NAN：<ul>\n<li>无效数值（仍然是一个数字类型，但指数字类型中的错误情况）</li>\n<li>NAN 和谁比较都是 false，包括自己</li>\n<li>使用 <code>Number.isNaN()</code> 判断一个数字是否为 NAN  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span>isNaN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>无穷数字：Infinity<ul>\n<li>ES6 中定义为：<code>Number.POSITIVE_INFINITY</code>，<code>Number.NEGATIVE_INFINITY</code></li>\n<li>计算结果一旦溢出为无穷数，就无法再转换为有穷数</li>\n</ul>\n</li>\n<li>零值：0、-0<ul>\n<li>乘法和除法运算会得到 -0</li>\n<li>存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）</li>\n<li>0 === -0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊等式<ul>\n<li><code>Object.is(a, b)</code> 可以判断两个值是否绝对相等</li>\n<li>优先使用 == 和 ===，因为效率更高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.5 值和引用<ul>\n<li>JS 中没有指针，JS 的变量不可能指向另一个变量的引用，<strong>JS 引用指向的是值</strong></li>\n<li>基本类型通过<strong>复制</strong>方式复制或传递，引用类型通过<strong>引用</strong>方式复制或传递</li>\n<li>函数中的引用问题<ul>\n<li>函数参数 a 通过<strong>复制</strong>的方式复制给函数内的 x</li>\n<li><strong>引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值</strong>  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注意引用 x 指向了其他的值</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>我们无法自行决定使用复制赋值还是引用赋值，<strong>一切由值的类型决定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：原生函数\"><a href=\"#第三章：原生函数\" class=\"headerlink\" title=\"第三章：原生函数\"></a>第三章：原生函数</h2><ul>\n<li>JS 常用的原生函数<ul>\n<li>String()</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>Array()</li>\n<li>Object()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Date()</li>\n<li>Error()</li>\n<li>Symbol()</li>\n</ul>\n</li>\n<li>3.1 内部属性 <code>[[Class]]</code><ul>\n<li>所有 typeof 返回为 “object” 的对象都包含内部属性 <code>[[Class]]</code>，可以通过 toString 方法查看  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.2 封装对象包装<ul>\n<li>基本类型没有如：<code>length</code> 属性和 <code>toString()</code> 方法，<strong>JS 会自动为基本类型包装一个封装对象</strong></li>\n<li>浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率</li>\n</ul>\n</li>\n<li>3.3 拆封<ul>\n<li>可以使用 <code>valuOf()</code> 获取封装对象中基本类型的值  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.4 原生函数作为构造函数<ul>\n<li>尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题</li>\n<li>尽量不要创建和使用空单元数组</li>\n<li>对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）</li>\n<li>Symbol<ul>\n<li>具有唯一性的特殊值，用于声名对象属性不容易导致重名</li>\n<li>使用 Symbol() 原声构造函数自定义符号<strong>不能</strong>带 <code>new</code> 关键字</li>\n<li>注意：Symbol 不是对象，而是<strong>一个基本类型</strong></li>\n</ul>\n</li>\n<li>原生原型<ul>\n<li>可以将 <code>Array.prototype.join()</code> 写作 <code>Array#join()</code></li>\n<li>三个特殊的默认类型<ul>\n<li>Function.prototype 默认是一个函数</li>\n<li>RegExp.prototype 默认是一个正则表达式</li>\n<li>Array. prototype 默认是一个数组</li>\n<li>默认值在使用的时候只创建一次，可以节约资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：强制类型转换\"><a href=\"#第四章：强制类型转换\" class=\"headerlink\" title=\"第四章：强制类型转换\"></a>第四章：强制类型转换</h2><ul>\n<li><p>4.1 值类型转换</p>\n<ul>\n<li>类型转换：值的类型从一种类型转换为另一种类型，为显式转换</li>\n<li>隐式的类型转换即强制类型转换</li>\n<li>类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式类型转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式类型转换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.2 抽象值操作</p>\n<ul>\n<li>抽象操作 ToString<ul>\n<li>null -&gt; “null”</li>\n<li>undefined -&gt; “undefined”</li>\n<li>true -&gt; “true”</li>\n<li>6 -&gt; “6”</li>\n<li>数组特殊：[1,2,3] -&gt; “1,2,3”</li>\n<li><code>JSON.stringfy()</code> 转化为字符串也用了 ToString<ul>\n<li>结果总是字符串：<code>JSON.stringify(&quot;42&quot;); // &quot;&quot;42&quot;&quot; 包含双引号</code></li>\n<li>字符串、数字、布尔值、null 的规则和 TOString 相同</li>\n<li>遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null</li>\n<li>包含循环引用会报错</li>\n<li>如果对象存在 <code>toJSON()</code> 方法，调用 <code>JSON.stringfy()</code> 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>抽象操作 ToNumber<ul>\n<li>数字 -&gt; 自身</li>\n<li>布尔值：false -&gt; 0，true -&gt; 1</li>\n<li>null -&gt; 0</li>\n<li>undefined -&gt; NaN</li>\n<li>对象 -&gt; 抽象操作 ToPrimitive 规则</li>\n</ul>\n</li>\n<li>抽象操作 ToBoolean<ul>\n<li>undefined、null、false、””、0 / -0、NaN -&gt; false</li>\n<li>上述以外 -&gt; true</li>\n</ul>\n</li>\n<li>抽象操作 ToPrimitive<ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.3 显式强制类型转换</p>\n<ul>\n<li>字符串、数字间的相互转换<ul>\n<li>使用 <code>String()</code>、<code>Number()</code>、<code>.toString()</code> 方法</li>\n<li>使用 <code>+</code> 可以将字符串转化为数字</li>\n<li>字符串 -&gt; 数字<ul>\n<li>如果只有数字 -&gt; 十进制数字</li>\n<li>如果包含有效浮点数数字 -&gt; 浮点数数字</li>\n<li>“” -&gt; 0</li>\n<li>以上三种以外为 NaN</li>\n</ul>\n</li>\n<li>parseInt(string, radix) 方法<ul>\n<li>如果 string 开头是 x / X -&gt; 16 进制数字，开头是 0 -&gt; 8 进制数字</li>\n<li>最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）</li>\n<li>ES5 之后默认转化为 10 进制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>+</code> 可以将日期显示转化为数字，比如获取当前时间戳：<code>+new Date()</code>，但做好还是使用 <code>new Date().getTime()</code> 和 <code>Date.now()</code> 的方式</li>\n<li><code>~</code> 非运算符<ul>\n<li><code>~x</code> 大致等同于 <code>-(x+1)</code>，<code>console.log(~42); // 43</code></li>\n<li><code>~-1</code> -&gt; <code>0</code>，可以用于如：<code>indexOf()</code> 方法返回为 -1 情况</li>\n</ul>\n</li>\n<li>显示转化为布尔值<ul>\n<li>使用 <code>Boolean()</code> 方法</li>\n<li>使用 <code>!!</code> ，第一个 <code>!</code> 将值显式转化为布尔值，第二个 <code>!</code> 将结果反转回原值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.4 隐式强制类型转换</p>\n<ul>\n<li>字符串与数字之间隐式强制类型转换<ul>\n<li>使用 <code>+</code> 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,23,4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><code>数字 + &quot;&quot;</code> 将数字转化为字符串，使用是 <code>valueOf()</code> 方法</li>\n<li>使用 <code>String(数字)</code> 的方式将数字转化为字符串使用的是 <code>toString()</code> 方法</li>\n<li>所以在定制 <code>valueOf()</code> 和 <code>toString()</code> 方法要注意，因为会影响强制类型转换的结果</li>\n<li><code>字符串 - 0</code> 可以将字符串转化为数字</li>\n</ul>\n</li>\n<li>注意：<code>[] + &#123;&#125;</code> 和 <code>&#123;&#125; + []</code>，它们返回不同的结果，分别是 <code>[object Object]</code> 和 0<ul>\n<li><code>&#123;&#125;</code> 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 <code>[]</code> 会被强制类型转换为 <code>&quot;&quot;</code>，而 {} 会被强制类型转换为 <code>[object Object]</code></li>\n<li><code>&#123;&#125;</code> 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 <code>[]</code> 显式强制类型转换为 0</li>\n</ul>\n</li>\n<li>布尔值 -&gt; 数字的隐式强制类型转换<ul>\n<li>undefined、null、false、””、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1</li>\n</ul>\n</li>\n<li>转换为布尔值的隐式强制类型转换<ul>\n<li>以下五种情况非布尔值会被强制转换为布尔值<ul>\n<li><code>if()</code> 判断表达式</li>\n<li><code>for ( .. ; .. ; .. )</code> 语句中的第二个条件判断表达式</li>\n<li><code>while()</code> 和 <code>do...while()</code> 判断表达式</li>\n<li><code>?:</code> 判断表达式</li>\n<li><code>||</code> 和 <code>&amp;&amp; </code> 判断表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&amp;&amp;</code> 和 <code>||</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值<ul>\n<li><code>let a = b || &quot;123&quot;;</code> 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123</li>\n<li><code>a &amp;&amp; foo()</code> 等价于 <code>if (a) &#123; foo() &#125;;</code></li>\n</ul>\n</li>\n<li>Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(cool)\"</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.5 宽松相等和严格相等</p>\n<ul>\n<li><strong><code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许</strong></li>\n<li>抽象相等（<code>==</code> 的行为）<ul>\n<li>如果两个值的类型相同，就仅比较它们是否相等<ul>\n<li>注意：<code>NaN</code> 不等于 <code>NaN</code>，<code>+0</code> 不等于 <code>-0</code></li>\n</ul>\n</li>\n<li>两个对象指向同一个值时即视为相等，不发生强制类型转换</li>\n<li><code>==</code> 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较</li>\n<li>在 <code>==</code> 中 null 和 undefined 相等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.6 抽象关系比较</p>\n<ul>\n<li>对于 <code>a &lt; b</code> 的比较规则<ul>\n<li>双方先调用 ToPrimitive 转化为字符串，<ul>\n<li>如果存在数字就转化为数字比较</li>\n<li>如果双方都是字符串就按字母顺序比较</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：语法\"><a href=\"#第五章：语法\" class=\"headerlink\" title=\"第五章：语法\"></a>第五章：语法</h2><ul>\n<li>5.1 语句和表达式<ul>\n<li>语句和表达式示例  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明语句</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值表达式</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式语句</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>语句都有一个结果值，结果值也包括 undefined<ul>\n<li>在浏览器 console 输入语句，默认会显示最后一条语句的结果值</li>\n</ul>\n</li>\n<li>表达式的副作用：造成其他的改变<ul>\n<li>函数调用产生的副作用  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果值：undefined，副作用：a 的值被改变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><code>delete</code> 操作对象的副作用是属性从对象中被删除</li>\n</ul>\n</li>\n<li>上下文规则<ul>\n<li>同样的语法在不同的情况会有不同的解释</li>\n<li>大括号 <code>&#123;&#125;</code> 规则<ul>\n<li>定义对象常量<ul>\n<li>a 是赋值的对象（左值），{…} 好似所赋予的值（右值）  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\nfoo<span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标签<ul>\n<li><code>&#123;&#125;</code> 在此是为一个普通的代码块</li>\n<li>标签语句：<code>foo</code> 是 <code>bar()</code> 的标签，即通过 <code>foo</code> 能够跳转到 <code>bar()</code> 函数<ul>\n<li>比如 <code>break</code> 语句可以从内层循环条装到外层循环或者结束循环，所以 <code>break</code> 也是一个标签  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">&#123;</span>\nfoo<span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象解构</li>\n<li><code>if...else</code> 的代码块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.2 运算符优先级<ul>\n<li><code>,</code> 连接一系列语句时，它的优先级最低</li>\n<li><code>&amp;&amp;</code> 运算符的优先级 &gt; <code>=</code></li>\n<li><code>&amp;&amp;</code> 运算符优先级 &gt; <code>||</code></li>\n<li>短路特性：进行 <code>&amp;&amp;</code> 或 <code>||</code> 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断</li>\n<li>三元运算符的执行方式<ul>\n<li><code>a ? b : c ? d : e;</code> 等价于 <code>a ? b : (c ? d : e)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.3 自动分号<ul>\n<li>分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号</li>\n</ul>\n</li>\n<li>5.4 错误<ul>\n<li>暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况</li>\n</ul>\n</li>\n<li>5.5 函数参数<ul>\n<li>不要同时访问命名参数和其对应的arguments数组单元</li>\n</ul>\n</li>\n<li>5.6 try…finally<ul>\n<li>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃</li>\n</ul>\n</li>\n<li>5.7 switch<ul>\n<li>switch 使用的是 <code>===</code> 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> a <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 返回的是 \"hello world\"</span>\n    <span class=\"token comment\">// 永远执行不到这里</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录A：混合环境-JS\"><a href=\"#附录A：混合环境-JS\" class=\"headerlink\" title=\"附录A：混合环境 JS\"></a>附录A：混合环境 JS</h2><ul>\n<li>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现</li>\n<li>由于浏览器兼容性问题存在可能导致与官方规范的差异<ul>\n<li>在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）</li>\n<li><code>window.escape(..)</code> 和 <code>window.unescape(..)</code> 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，<code>window.escape( &quot;? foo=97%&amp;bar=3%&quot; )</code> 结果为 <code>&quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;</code></li>\n<li><code>String.prototype.substr</code> 第二个参数是结束位置索引（非自包含）， <code>String.prototype.substring</code>  第二个参数是长度（需要包含的字符数）</li>\n</ul>\n</li>\n<li>宿主对象<ul>\n<li>内建对象和函数，比如：DOM 元素，内部的 <code>[[class]]</code> 来自预定义属性</li>\n<li>和普通对象的行为差异<ul>\n<li>无法正常访问 object 的内建方法，如 <code>toString()</code></li>\n<li>无法写覆盖</li>\n<li>包含一些预定义的只读属性</li>\n<li>包含无法将 this 重载为其他对象的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性<ul>\n<li>由于浏览器历史问题，<strong>在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量</strong></li>\n</ul>\n</li>\n<li>不要扩展原生原型，可能产生冲突</li>\n<li>使用 <code>&lt;script&gt; .. &lt;/script&gt;</code> 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用<ul>\n<li>下面的代码都无法运行（foo() 还未被声明）  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：类型\"><a href=\"#第一章：类型\" class=\"headerlink\" title=\"第一章：类型\"></a>第一章：类型</h2><ul>\n<li><strong>JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值</strong></li>\n<li>JS 的七种内置类型<ul>\n<li>number 数字</li>\n<li>string 字符串</li>\n<li>boolean 布尔值</li>\n<li>null 空值</li>\n<li>undefined 未定义</li>\n<li>symbol 符号</li>\n<li>object 对象（除了 object 其他都是基本类型）</li>\n</ul>\n</li>\n<li>可以使用 typeof 检查基本类型  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true 注意 null 是 object，这是 JS 的 BUG</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// ES6中新加入的类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span> life<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）</li>\n<li>JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言</li>\n<li>undefined<ul>\n<li>已经在作用域声明，但还没被赋值</li>\n<li>在作用域中没有被声明是 undeclared</li>\n<li><strong>注意</strong>：对于上面两种情况，typeof 返回的都是 undefined</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章：值\"><a href=\"#第二章：值\" class=\"headerlink\" title=\"第二章：值\"></a>第二章：值</h2><ul>\n<li>2.1 数组<ul>\n<li>数组可以存放任何类型的值</li>\n<li>JS 中数组不用预先声明大小</li>\n<li>数组也是对象，可以包含自己的键值属性，但不会计算在 length 中</li>\n<li>类数组<ul>\n<li>一组通过数字索引的值，比如：DOM 查询操作返回结果</li>\n<li>可以使用 <code>Array.slice</code> 或 <code>Array.from</code> 将类数组转化为数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.2 字符串<ul>\n<li>字符串可以借用数组方法<ul>\n<li>借用 join 方法示例：<code>let b = Array.prototype.join( a, &quot;-&quot;);</code></li>\n<li>无法直接借用 reverse 方法，需要先转化为字符数组才能使用  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 数字<ul>\n<li>数字以十进制的方式显示，小数后的 0 会被省略</li>\n<li><code>tofiexed()</code> 方法可以指定小数部分的显示位数，结果是字符串形式</li>\n<li><code>toprecision()</code> 方法可以指定有效位数的显示位数  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4e+1\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false</li>\n<li>解决方案：使用误差范围值<ul>\n<li>ES6 中定义为 <code>Number.EPSILON</code>,通常为：2^-52 (2.220446049250313e-16)</li>\n<li>使用误差范围判断两个数字是否相等  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0000002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整数的安全范围<ul>\n<li>ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]</li>\n<li>即：[-(2^53  -  1), 2^53  -  1]</li>\n</ul>\n</li>\n<li>判断是否是整数<ul>\n<li>使用 <code>Number.isInteger()</code> 判断是否是整数</li>\n<li>使用 <code>Number.isSafeInteger()</code> 判断是否是安全范围内的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.4 特殊数值<ul>\n<li>undefined 和 null<ul>\n<li>undefined 类型只有一个值，即：undefined</li>\n<li>null 类型只有一个值，即：null</li>\n<li>undefined 指未被赋值，null 指曾被赋值，但目前没有值</li>\n<li>undefined 可以作为变量声明和赋值（<strong>不要这么做</strong>）</li>\n</ul>\n</li>\n<li>void<ul>\n<li>指没有返回值，多用于函数没有返回结果</li>\n<li><strong>可以使用 <code>void 0</code> 获取真正的 undefined</strong>（非严格模式 undefined 可以被赋值，而 <code>void 0</code> 必定返回 undefined）</li>\n</ul>\n</li>\n<li>特殊的数字<ul>\n<li>NAN：<ul>\n<li>无效数值（仍然是一个数字类型，但指数字类型中的错误情况）</li>\n<li>NAN 和谁比较都是 false，包括自己</li>\n<li>使用 <code>Number.isNaN()</code> 判断一个数字是否为 NAN  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span>isNaN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>无穷数字：Infinity<ul>\n<li>ES6 中定义为：<code>Number.POSITIVE_INFINITY</code>，<code>Number.NEGATIVE_INFINITY</code></li>\n<li>计算结果一旦溢出为无穷数，就无法再转换为有穷数</li>\n</ul>\n</li>\n<li>零值：0、-0<ul>\n<li>乘法和除法运算会得到 -0</li>\n<li>存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）</li>\n<li>0 === -0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊等式<ul>\n<li><code>Object.is(a, b)</code> 可以判断两个值是否绝对相等</li>\n<li>优先使用 == 和 ===，因为效率更高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.5 值和引用<ul>\n<li>JS 中没有指针，JS 的变量不可能指向另一个变量的引用，<strong>JS 引用指向的是值</strong></li>\n<li>基本类型通过<strong>复制</strong>方式复制或传递，引用类型通过<strong>引用</strong>方式复制或传递</li>\n<li>函数中的引用问题<ul>\n<li>函数参数 a 通过<strong>复制</strong>的方式复制给函数内的 x</li>\n<li><strong>引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值</strong>  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注意引用 x 指向了其他的值</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>我们无法自行决定使用复制赋值还是引用赋值，<strong>一切由值的类型决定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：原生函数\"><a href=\"#第三章：原生函数\" class=\"headerlink\" title=\"第三章：原生函数\"></a>第三章：原生函数</h2><ul>\n<li>JS 常用的原生函数<ul>\n<li>String()</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>Array()</li>\n<li>Object()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Date()</li>\n<li>Error()</li>\n<li>Symbol()</li>\n</ul>\n</li>\n<li>3.1 内部属性 <code>[[Class]]</code><ul>\n<li>所有 typeof 返回为 “object” 的对象都包含内部属性 <code>[[Class]]</code>，可以通过 toString 方法查看  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.2 封装对象包装<ul>\n<li>基本类型没有如：<code>length</code> 属性和 <code>toString()</code> 方法，<strong>JS 会自动为基本类型包装一个封装对象</strong></li>\n<li>浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率</li>\n</ul>\n</li>\n<li>3.3 拆封<ul>\n<li>可以使用 <code>valuOf()</code> 获取封装对象中基本类型的值  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.4 原生函数作为构造函数<ul>\n<li>尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题</li>\n<li>尽量不要创建和使用空单元数组</li>\n<li>对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）</li>\n<li>Symbol<ul>\n<li>具有唯一性的特殊值，用于声名对象属性不容易导致重名</li>\n<li>使用 Symbol() 原声构造函数自定义符号<strong>不能</strong>带 <code>new</code> 关键字</li>\n<li>注意：Symbol 不是对象，而是<strong>一个基本类型</strong></li>\n</ul>\n</li>\n<li>原生原型<ul>\n<li>可以将 <code>Array.prototype.join()</code> 写作 <code>Array#join()</code></li>\n<li>三个特殊的默认类型<ul>\n<li>Function.prototype 默认是一个函数</li>\n<li>RegExp.prototype 默认是一个正则表达式</li>\n<li>Array. prototype 默认是一个数组</li>\n<li>默认值在使用的时候只创建一次，可以节约资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：强制类型转换\"><a href=\"#第四章：强制类型转换\" class=\"headerlink\" title=\"第四章：强制类型转换\"></a>第四章：强制类型转换</h2><ul>\n<li><p>4.1 值类型转换</p>\n<ul>\n<li>类型转换：值的类型从一种类型转换为另一种类型，为显式转换</li>\n<li>隐式的类型转换即强制类型转换</li>\n<li>类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式类型转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式类型转换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.2 抽象值操作</p>\n<ul>\n<li>抽象操作 ToString<ul>\n<li>null -&gt; “null”</li>\n<li>undefined -&gt; “undefined”</li>\n<li>true -&gt; “true”</li>\n<li>6 -&gt; “6”</li>\n<li>数组特殊：[1,2,3] -&gt; “1,2,3”</li>\n<li><code>JSON.stringfy()</code> 转化为字符串也用了 ToString<ul>\n<li>结果总是字符串：<code>JSON.stringify(&quot;42&quot;); // &quot;&quot;42&quot;&quot; 包含双引号</code></li>\n<li>字符串、数字、布尔值、null 的规则和 TOString 相同</li>\n<li>遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null</li>\n<li>包含循环引用会报错</li>\n<li>如果对象存在 <code>toJSON()</code> 方法，调用 <code>JSON.stringfy()</code> 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>抽象操作 ToNumber<ul>\n<li>数字 -&gt; 自身</li>\n<li>布尔值：false -&gt; 0，true -&gt; 1</li>\n<li>null -&gt; 0</li>\n<li>undefined -&gt; NaN</li>\n<li>对象 -&gt; 抽象操作 ToPrimitive 规则</li>\n</ul>\n</li>\n<li>抽象操作 ToBoolean<ul>\n<li>undefined、null、false、””、0 / -0、NaN -&gt; false</li>\n<li>上述以外 -&gt; true</li>\n</ul>\n</li>\n<li>抽象操作 ToPrimitive<ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.3 显式强制类型转换</p>\n<ul>\n<li>字符串、数字间的相互转换<ul>\n<li>使用 <code>String()</code>、<code>Number()</code>、<code>.toString()</code> 方法</li>\n<li>使用 <code>+</code> 可以将字符串转化为数字</li>\n<li>字符串 -&gt; 数字<ul>\n<li>如果只有数字 -&gt; 十进制数字</li>\n<li>如果包含有效浮点数数字 -&gt; 浮点数数字</li>\n<li>“” -&gt; 0</li>\n<li>以上三种以外为 NaN</li>\n</ul>\n</li>\n<li>parseInt(string, radix) 方法<ul>\n<li>如果 string 开头是 x / X -&gt; 16 进制数字，开头是 0 -&gt; 8 进制数字</li>\n<li>最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）</li>\n<li>ES5 之后默认转化为 10 进制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>+</code> 可以将日期显示转化为数字，比如获取当前时间戳：<code>+new Date()</code>，但做好还是使用 <code>new Date().getTime()</code> 和 <code>Date.now()</code> 的方式</li>\n<li><code>~</code> 非运算符<ul>\n<li><code>~x</code> 大致等同于 <code>-(x+1)</code>，<code>console.log(~42); // 43</code></li>\n<li><code>~-1</code> -&gt; <code>0</code>，可以用于如：<code>indexOf()</code> 方法返回为 -1 情况</li>\n</ul>\n</li>\n<li>显示转化为布尔值<ul>\n<li>使用 <code>Boolean()</code> 方法</li>\n<li>使用 <code>!!</code> ，第一个 <code>!</code> 将值显式转化为布尔值，第二个 <code>!</code> 将结果反转回原值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.4 隐式强制类型转换</p>\n<ul>\n<li>字符串与数字之间隐式强制类型转换<ul>\n<li>使用 <code>+</code> 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,23,4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><code>数字 + &quot;&quot;</code> 将数字转化为字符串，使用是 <code>valueOf()</code> 方法</li>\n<li>使用 <code>String(数字)</code> 的方式将数字转化为字符串使用的是 <code>toString()</code> 方法</li>\n<li>所以在定制 <code>valueOf()</code> 和 <code>toString()</code> 方法要注意，因为会影响强制类型转换的结果</li>\n<li><code>字符串 - 0</code> 可以将字符串转化为数字</li>\n</ul>\n</li>\n<li>注意：<code>[] + &#123;&#125;</code> 和 <code>&#123;&#125; + []</code>，它们返回不同的结果，分别是 <code>[object Object]</code> 和 0<ul>\n<li><code>&#123;&#125;</code> 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 <code>[]</code> 会被强制类型转换为 <code>&quot;&quot;</code>，而 {} 会被强制类型转换为 <code>[object Object]</code></li>\n<li><code>&#123;&#125;</code> 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 <code>[]</code> 显式强制类型转换为 0</li>\n</ul>\n</li>\n<li>布尔值 -&gt; 数字的隐式强制类型转换<ul>\n<li>undefined、null、false、””、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1</li>\n</ul>\n</li>\n<li>转换为布尔值的隐式强制类型转换<ul>\n<li>以下五种情况非布尔值会被强制转换为布尔值<ul>\n<li><code>if()</code> 判断表达式</li>\n<li><code>for ( .. ; .. ; .. )</code> 语句中的第二个条件判断表达式</li>\n<li><code>while()</code> 和 <code>do...while()</code> 判断表达式</li>\n<li><code>?:</code> 判断表达式</li>\n<li><code>||</code> 和 <code>&amp;&amp; </code> 判断表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&amp;&amp;</code> 和 <code>||</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值<ul>\n<li><code>let a = b || &quot;123&quot;;</code> 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123</li>\n<li><code>a &amp;&amp; foo()</code> 等价于 <code>if (a) &#123; foo() &#125;;</code></li>\n</ul>\n</li>\n<li>Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(cool)\"</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.5 宽松相等和严格相等</p>\n<ul>\n<li><strong><code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许</strong></li>\n<li>抽象相等（<code>==</code> 的行为）<ul>\n<li>如果两个值的类型相同，就仅比较它们是否相等<ul>\n<li>注意：<code>NaN</code> 不等于 <code>NaN</code>，<code>+0</code> 不等于 <code>-0</code></li>\n</ul>\n</li>\n<li>两个对象指向同一个值时即视为相等，不发生强制类型转换</li>\n<li><code>==</code> 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较</li>\n<li>在 <code>==</code> 中 null 和 undefined 相等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.6 抽象关系比较</p>\n<ul>\n<li>对于 <code>a &lt; b</code> 的比较规则<ul>\n<li>双方先调用 ToPrimitive 转化为字符串，<ul>\n<li>如果存在数字就转化为数字比较</li>\n<li>如果双方都是字符串就按字母顺序比较</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：语法\"><a href=\"#第五章：语法\" class=\"headerlink\" title=\"第五章：语法\"></a>第五章：语法</h2><ul>\n<li>5.1 语句和表达式<ul>\n<li>语句和表达式示例  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明语句</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值表达式</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式语句</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>语句都有一个结果值，结果值也包括 undefined<ul>\n<li>在浏览器 console 输入语句，默认会显示最后一条语句的结果值</li>\n</ul>\n</li>\n<li>表达式的副作用：造成其他的改变<ul>\n<li>函数调用产生的副作用  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果值：undefined，副作用：a 的值被改变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><code>delete</code> 操作对象的副作用是属性从对象中被删除</li>\n</ul>\n</li>\n<li>上下文规则<ul>\n<li>同样的语法在不同的情况会有不同的解释</li>\n<li>大括号 <code>&#123;&#125;</code> 规则<ul>\n<li>定义对象常量<ul>\n<li>a 是赋值的对象（左值），{…} 好似所赋予的值（右值）  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\nfoo<span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标签<ul>\n<li><code>&#123;&#125;</code> 在此是为一个普通的代码块</li>\n<li>标签语句：<code>foo</code> 是 <code>bar()</code> 的标签，即通过 <code>foo</code> 能够跳转到 <code>bar()</code> 函数<ul>\n<li>比如 <code>break</code> 语句可以从内层循环条装到外层循环或者结束循环，所以 <code>break</code> 也是一个标签  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">&#123;</span>\nfoo<span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象解构</li>\n<li><code>if...else</code> 的代码块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.2 运算符优先级<ul>\n<li><code>,</code> 连接一系列语句时，它的优先级最低</li>\n<li><code>&amp;&amp;</code> 运算符的优先级 &gt; <code>=</code></li>\n<li><code>&amp;&amp;</code> 运算符优先级 &gt; <code>||</code></li>\n<li>短路特性：进行 <code>&amp;&amp;</code> 或 <code>||</code> 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断</li>\n<li>三元运算符的执行方式<ul>\n<li><code>a ? b : c ? d : e;</code> 等价于 <code>a ? b : (c ? d : e)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.3 自动分号<ul>\n<li>分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号</li>\n</ul>\n</li>\n<li>5.4 错误<ul>\n<li>暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况</li>\n</ul>\n</li>\n<li>5.5 函数参数<ul>\n<li>不要同时访问命名参数和其对应的arguments数组单元</li>\n</ul>\n</li>\n<li>5.6 try…finally<ul>\n<li>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃</li>\n</ul>\n</li>\n<li>5.7 switch<ul>\n<li>switch 使用的是 <code>===</code> 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题  <pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> a <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 返回的是 \"hello world\"</span>\n    <span class=\"token comment\">// 永远执行不到这里</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录A：混合环境-JS\"><a href=\"#附录A：混合环境-JS\" class=\"headerlink\" title=\"附录A：混合环境 JS\"></a>附录A：混合环境 JS</h2><ul>\n<li>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现</li>\n<li>由于浏览器兼容性问题存在可能导致与官方规范的差异<ul>\n<li>在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）</li>\n<li><code>window.escape(..)</code> 和 <code>window.unescape(..)</code> 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，<code>window.escape( &quot;? foo=97%&amp;bar=3%&quot; )</code> 结果为 <code>&quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;</code></li>\n<li><code>String.prototype.substr</code> 第二个参数是结束位置索引（非自包含）， <code>String.prototype.substring</code>  第二个参数是长度（需要包含的字符数）</li>\n</ul>\n</li>\n<li>宿主对象<ul>\n<li>内建对象和函数，比如：DOM 元素，内部的 <code>[[class]]</code> 来自预定义属性</li>\n<li>和普通对象的行为差异<ul>\n<li>无法正常访问 object 的内建方法，如 <code>toString()</code></li>\n<li>无法写覆盖</li>\n<li>包含一些预定义的只读属性</li>\n<li>包含无法将 this 重载为其他对象的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性<ul>\n<li>由于浏览器历史问题，<strong>在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量</strong></li>\n</ul>\n</li>\n<li>不要扩展原生原型，可能产生冲突</li>\n<li>使用 <code>&lt;script&gt; .. &lt;/script&gt;</code> 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用<ul>\n<li>下面的代码都无法运行（foo() 还未被声明）  <pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxlgzswy0006dqsjdxff19ad","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxmwwx7e00028csj4lgm7lng"},{"post_id":"ckxlj842d0000p1sj7fkphul9","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxmwwx7f00048csjgy937uvd"},{"post_id":"ckxliyes10000uusj3ijpaojm","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxmwwx7f00068csjck5bdukl"},{"post_id":"ckxlgzswv0003dqsjg4jk52sg","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxmwwx7f00078csj9917c1fp"},{"post_id":"ckxlgzswz0007dqsjh8237myl","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxmwwx7j000a8csj47alg2tk"},{"post_id":"ckxliuexj0000i0sj70t2142r","category_id":"ckxmwwx7f00058csj7fv4179u","_id":"ckxmwwx7k000b8csj1r3p2un1"},{"post_id":"ckxlgzsws0001dqsjgn6gfsr8","category_id":"ckxmwz2ti0000ersje7ute5hn","_id":"ckxmwz2tk0001ersj6z5y0gdh"},{"post_id":"ckxq4c5u80000hssjeqzl6to2","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckxq4c5ue0002hssj1159f1ph"},{"post_id":"cky56grgn0000va0e9woid48p","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"cky56grgt0002va0e6ejvdbpp"},{"post_id":"ckz81tgdt000036sj1zgi6ave","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckz81tgdx000236sjcmbucwky"},{"post_id":"ckz9sytq800001u0e6cbg52sb","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckz9sytqf00021u0eewl477sw"},{"post_id":"ckzwn9lz20000ie0egbqv1nln","category_id":"ckxmwwx7900008csj3xqa6ybf","_id":"ckzwn9lz70002ie0eanfpadl3"}],"PostTag":[{"post_id":"ckxlgzsws0001dqsjgn6gfsr8","tag_id":"ckxlgzsww0004dqsjbuua0v9d","_id":"ckxlgzsx00009dqsj84un8wa2"},{"post_id":"ckxlgzswv0003dqsjg4jk52sg","tag_id":"ckxlgzswz0008dqsj4wgr8mjl","_id":"ckxlgzsx0000bdqsjah2j8ds5"},{"post_id":"ckxlgzswy0006dqsjdxff19ad","tag_id":"ckxlgzsx0000adqsjc92k3r47","_id":"ckxlgzsx1000ddqsj7vhv0izo"},{"post_id":"ckxlgzswz0007dqsjh8237myl","tag_id":"ckxlgzsx0000adqsjc92k3r47","_id":"ckxlgzsx1000edqsjcpr5b5bk"},{"post_id":"ckxliyes10000uusj3ijpaojm","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckxliyes70002uusj3fhk71i0"},{"post_id":"ckxlj842d0000p1sj7fkphul9","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckxlj842i0001p1sj5d3xfqtz"},{"post_id":"ckxliuexj0000i0sj70t2142r","tag_id":"ckxmwwx7j00098csj8q1lcqvc","_id":"ckxmwwx7k000c8csj3t5m1bxn"},{"post_id":"ckxq4c5u80000hssjeqzl6to2","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckxq4c5ud0001hssj7y1l2q4x"},{"post_id":"cky56grgn0000va0e9woid48p","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"cky56grgs0001va0e2ovacxdj"},{"post_id":"ckz81tgdt000036sj1zgi6ave","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckz81tgdx000136sjet820nxz"},{"post_id":"ckz9sytq800001u0e6cbg52sb","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckz9sytqe00011u0e9vps9gv6"},{"post_id":"ckzwn9lz20000ie0egbqv1nln","tag_id":"ckxliyes50001uusj4o4yfmp0","_id":"ckzwn9lz70001ie0eds4h0btx"}],"Tag":[{"name":"程序人生","_id":"ckxlgzsww0004dqsjbuua0v9d"},{"name":"vue","_id":"ckxlgzswz0008dqsj4wgr8mjl"},{"name":"webpack","_id":"ckxlgzsx0000adqsjc92k3r47"},{"name":"JavaScript","_id":"ckxliyes50001uusj4o4yfmp0"},{"name":"复盘与总结","_id":"ckxmwwx7j00098csj8q1lcqvc"}]}}