{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/banner.png","path":"images/banner.png","modified":0,"renderable":0},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/upyun.png","path":"images/upyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"f856d43418c22a2e0acda0dc8dfc338c5f591fb4","modified":1640404850462},{"_id":"source/.DS_Store","hash":"aad440f9a9bf4a0ac3d808f18c92ff74601f6196","modified":1649753442197},{"_id":"source/categories/index.md","hash":"d3ecccf2f00b78038d7455b30f949c6c8a956daf","modified":1640416577797},{"_id":"source/about/index.md","hash":"cf7a5c971ee1928fad1ea9a8c738ebce325bf50a","modified":1661089172520},{"_id":"source/_posts/JS-什么是类数组.md","hash":"af3eda939cf16b44ef70d53136a8ecfcef1fbdb6","modified":1659176680353},{"_id":"source/_posts/JS-数据类型基础梳理.md","hash":"7e4a8f23aae82e0b0020fdf7443a6c7a41dd3c5c","modified":1659176677806},{"_id":"source/_posts/JS-数组方法总结.md","hash":"187c3edd3ea51f557396b8e84188977c3779e986","modified":1659176674990},{"_id":"source/_posts/JS-继承实现方式整理.md","hash":"5a58dafedee246df29db0ca4213818fc1548c009","modified":1659176683401},{"_id":"source/_posts/vue3个人常用通信方式总结.md","hash":"8ed6df06652585c7764ba839de97eea639eb210a","modified":1659176672154},{"_id":"source/_posts/hello-world.md","hash":"8e9265a1d24df80735318a8c4963ffc71ad44dfe","modified":1659176685663},{"_id":"source/_posts/webpack入门-loader.md","hash":"928aecb1ecf817b7666502331f04c32388dabd50","modified":1659176665826},{"_id":"source/_posts/作用域和闭包.md","hash":"563a663fb597a8d9e476b5adb77ee7ef39d35a11","modified":1659176688902},{"_id":"source/_posts/webpack入门-入口与出口.md","hash":"44349ad6a2ec3b945216de2df7b29c5b6e857e35","modified":1659176668951},{"_id":"source/_posts/你不知道的-JS-学习笔记：第二部分-this和对象原型.md","hash":"38be8a2c8ceac37fc83c8d7bfe5aee3d66efae98","modified":1659176705881},{"_id":"source/_posts/我的2021年总结.md","hash":"8c6e4a173a85f12c097be8a9242222eb26c035c6","modified":1659176697225},{"_id":"source/_posts/你不知道的-JS-学习笔记：类型和语法.md","hash":"f32f58554eadc2b71115658abe2d7e1447e4dca1","modified":1659176703044},{"_id":"source/tags/index.md","hash":"4767c7493033a7d163a4e9a71395c985779c5c05","modified":1638401544587},{"_id":"source/images/banner.png","hash":"ba710964e030db00d32e44a19234d6bbcf9162c3","modified":1640499214871},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1640402589494},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1640402589495},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1640402589497},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1640402589496},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1640402589498},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1640402589499},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1640402589501},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1640402589500},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"a81e463da567a007570153f02fbb44c3c67ede96","modified":1648011458858},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1640402589502},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1640402589696},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1640402589695},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1640402589694},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1640402589697},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1640402589699},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1640402589698},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1640402589698},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1640402589711},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1640402589712},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"d04e2d413f83d3d303c05e512809fcbf19133f0a","modified":1640412188889},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1640402589713},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1640402589711},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"2eb2dceddaec0f176324aa1d45780878b2f4385d","modified":1640418389654},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1640402589503},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1640402589503},{"_id":"themes/hexo-theme-matery/source/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1640402733885},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1640402589504},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1640402589505},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1640402589506},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1640402589504},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1640402589506},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1640402589507},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1640402589508},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"8e4ee373a682e06ce2e15467142bc230b08866f9","modified":1640412398823},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1640402589509},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1640402589510},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1640402589509},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1640402589512},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"f577d6892d7f4c22e19f965722f310c3da979d1f","modified":1640415628844},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1640402589513},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1640402589514},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"c97ebaef51b7ed0f827cecfddff5b1dbfbe5eb39","modified":1648011999941},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1640402589516},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1640402589515},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1640402589516},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1640411568452},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1640414873604},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1640402589519},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1640402589524},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1640402589517},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1640402589523},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1640402589521},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1640402589525},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1640402589679},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1640402589680},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1640402589684},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1640402589683},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1640402589531},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1640402589684},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1640402589682},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1640402589686},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1640402589685},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1640402589688},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1640402589687},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1640402589689},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1640402589691},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1640402589690},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1640402589691},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1640402589692},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1640402589731},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1640402589693},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1640402589730},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640402589714},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640402589715},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640402589717},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1640402589718},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"4070d67a4a28fc9e49c95d02a1cf54fb923c79a6","modified":1640501218683},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"f27d3492164147064b9748db58884b5febeacab1","modified":1640418389652},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640402589873},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1640402589874},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1640402589856},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640402589916},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640402589733},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640402589736},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640402589735},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640402589777},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640402589737},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640402589739},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640402589778},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640402589778},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640402589779},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640402589780},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640402589781},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640402589782},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640402589783},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640402589787},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640402589785},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1640402589797},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640402589802},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640402589806},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640402589808},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640402589809},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1640402589826},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640402589835},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1640402589833},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640402589836},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640402589839},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1640402589837},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1640402589850},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1640402589851},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"da9c0378e3344a0b1fe752af93a75612b9696fcd","modified":1640416065878},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.jpg","hash":"e69434ac20f95a51470deacf1ed22737f67c523b","modified":1640416065926},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1640402589756},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1640402589761},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1640402589759},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1640402589760},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1640402589815},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1640402589816},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1640402589818},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1640402589819},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1640402589817},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1640402589825},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640402589820},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640402589821},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640402589822},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640402589840},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640402589823},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640402589846},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640402589842},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640402589847},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640402589844},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640402589845},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640402589849},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1640402589789},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640402589805},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1640402589812},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640402589853},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640499214873},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1640402589741},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1640402589744},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1640402589750},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1640402589753},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1640402589755},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1640402589774},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1640402589775},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1640402589876},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1640402589799},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640402589829},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640402589831},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640402589854},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"0dd8ef34a6216b4af45d89cfb7454095e712c67d","modified":1640403772877},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1640402589758},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1640402589763},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1640402589771},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1640402589748},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640402589794},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1640402589768},{"_id":"public/atom.xml","hash":"81115a86b2b634d0e81ef90da208cc5966ac7191","modified":1665907462295},{"_id":"public/search.xml","hash":"9027df3fb5e3db18659261c940bbeb195486c5aa","modified":1648010787586},{"_id":"public/404/index.html","hash":"c32a2149c0658e6c6f6111296642fd25e1d67197","modified":1659177795262},{"_id":"public/about/index.html","hash":"1505bfb1a4c3501b64962d842d1e61ef9c2ecd66","modified":1661089182652},{"_id":"public/categories/index.html","hash":"7d0910669bdcc94ddb1e3f73bf1756b0a3e08cd4","modified":1665907462295},{"_id":"public/tags/index.html","hash":"e173b58697c873cf8032fbfbe1f54103ef1a8eb1","modified":1665907462295},{"_id":"public/2022/02/21/你不知道的-JS-学习笔记：类型和语法/index.html","hash":"ac3351520ceccc31857f9a541a40e329db43dec6","modified":1659177795262},{"_id":"public/2022/02/05/你不知道的-JS-学习笔记：第二部分-this和对象原型/index.html","hash":"44dc24dc40371378c1b23e6c4d47a1add93e87c4","modified":1659177795262},{"_id":"public/2022/02/04/作用域和闭包/index.html","hash":"e779af67f6656b54d97389c6401692937809570f","modified":1659177795262},{"_id":"public/2022/01/08/JS-什么是类数组/index.html","hash":"3a956b5710d46be47995672ef9536afb44cd00d1","modified":1659177795262},{"_id":"public/2021/12/28/JS-数据类型基础梳理/index.html","hash":"b5bec4190ba09a96ec49f7b16bc3a0ed23d76e1e","modified":1659177795262},{"_id":"public/2021/12/24/JS-继承实现方式整理/index.html","hash":"ea62fa8bbf4c384571cae13ce9cc5dc84b13be1e","modified":1659177795262},{"_id":"public/2021/12/23/JS-数组方法总结/index.html","hash":"8c1d898afa8880cda3aac108a48341a5f633ecb3","modified":1659177795262},{"_id":"public/2021/12/22/我的2021年总结/index.html","hash":"5305090df333ce519bcc528ffcbcf8ec8c13dd11","modified":1659177795262},{"_id":"public/2021/12/06/vue3个人常用通信方式总结/index.html","hash":"09efc2fa7b87bea180a660c6ba693258421a9531","modified":1659177795262},{"_id":"public/2021/12/05/webpack入门-loader/index.html","hash":"6e727478ba760b60a9e0f407027c21860f85d3d7","modified":1659177795262},{"_id":"public/2021/12/02/webpack入门-入口与出口/index.html","hash":"6c6e4eff455f6bc91cfed50c877a94a2e79b44cb","modified":1659177795262},{"_id":"public/2021/11/25/hello-world/index.html","hash":"9f7390211a0468fb62d286cafe6df4ef3458e424","modified":1659177795262},{"_id":"public/archives/index.html","hash":"1ed66e4bd6c168cc72be78da7bc3e2a3f3d90c98","modified":1665907462295},{"_id":"public/archives/page/2/index.html","hash":"1ed66e4bd6c168cc72be78da7bc3e2a3f3d90c98","modified":1665907462295},{"_id":"public/archives/2021/index.html","hash":"dc858f32af405d247f74b7dd4a3b2fb2316d0b6b","modified":1665907462295},{"_id":"public/archives/2021/page/2/index.html","hash":"dc858f32af405d247f74b7dd4a3b2fb2316d0b6b","modified":1665907462295},{"_id":"public/archives/2021/11/index.html","hash":"0bf3b403f7eeb19fc7d20027206abb3a82e7ed95","modified":1665907462295},{"_id":"public/archives/2021/12/index.html","hash":"90f8f19b793faa5f867cd7a9e1b642eab4d4a905","modified":1665907462295},{"_id":"public/archives/2021/12/page/2/index.html","hash":"90f8f19b793faa5f867cd7a9e1b642eab4d4a905","modified":1665907462295},{"_id":"public/archives/2022/index.html","hash":"c834752e368723cc5070fdc1574dd78a9ae2f133","modified":1665907462295},{"_id":"public/archives/2022/01/index.html","hash":"9520dcdc267ca5a7990aa5282d262e75a0ddfa52","modified":1665907462295},{"_id":"public/archives/2022/02/index.html","hash":"99d5958f17cd2021219a84fe4ca2a2489c18b6fb","modified":1665907462295},{"_id":"public/categories/前端/index.html","hash":"438554246e2543ec0c5d63021b25f25b8c809ec3","modified":1665907462295},{"_id":"public/categories/前端/page/2/index.html","hash":"883fb54810321c77471e7ee9b2b82f1810423fa2","modified":1665907462295},{"_id":"public/categories/无限进步/index.html","hash":"985459f9ef2ac87097829a20a05aacc7ef96fc90","modified":1659177795262},{"_id":"public/categories/其他/index.html","hash":"efa61f6a2c796d22531d962205b0ea193a6e8ce2","modified":1659177795262},{"_id":"public/tags/JavaScript/index.html","hash":"7b5811ce83c28a438f7c0a348d6d6fa21ba32544","modified":1661088208147},{"_id":"public/index.html","hash":"d6db72142a2a6ebcaa50673de15505d16cba2401","modified":1665907462295},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"bee9c637724d3bae2105c7489b94165323151ddf","modified":1661088208147},{"_id":"public/page/2/index.html","hash":"4b7086cbf85200515a51bf205f80ed26912381a9","modified":1665907462295},{"_id":"public/tags/程序人生/index.html","hash":"9b2a8282074ac0577faf2956552ece44ba492147","modified":1659177795262},{"_id":"public/tags/vue/index.html","hash":"ae1d2a0ed6a02442d020d0473d1a42a575aac5a5","modified":1665907462295},{"_id":"public/tags/webpack/index.html","hash":"98039e13d34464e38bcfba97580b2b7b9c330676","modified":1659177795262},{"_id":"public/tags/复盘与总结/index.html","hash":"83de0c2a36830e1e0f408ef7a9ed6bdaf36610e9","modified":1659177795262},{"_id":"public/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1646977753837},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1646977753837},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1646977753837},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1646977753837},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1646977753837},{"_id":"public/medias/reward/alipay.jpg","hash":"da9c0378e3344a0b1fe752af93a75612b9696fcd","modified":1646977753837},{"_id":"public/medias/reward/wechat.jpg","hash":"e69434ac20f95a51470deacf1ed22737f67c523b","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1646977753837},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1646977753837},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1646977753837},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1646977753837},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1646977753837},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1646977753837},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1646977753837},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1646977753837},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1646977753837},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1646977753837},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1646977753837},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1646977753837},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1646977753837},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1646977753837},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1646977753837},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1646977753837},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1646977753837},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1646977753837},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1646977753837},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1646977753837},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1646977753837},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1646977753837},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1646977753837},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1646977753837},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1646977753837},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1646977753837},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1646977753837},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1646977753837},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1646977753837},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1646977753837},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1646977753837},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1646977753837},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1646977753837},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1646977753837},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1646977753837},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1646977753837},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1646977753837},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1646977753837},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1646977753837},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1646977753837},{"_id":"public/css/matery.css","hash":"4070d67a4a28fc9e49c95d02a1cf54fb923c79a6","modified":1646977753837},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1646977753837},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1646977753837},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1646977753837},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1646977753837},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1646977753837},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1646977753837},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1646977753837},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1646977753837},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1646977753837},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1646977753837},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1646977753837},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1646977753837},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1646977753837},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1646977753837},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1646977753837},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1646977753837},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1646977753837},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1646977753837},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1646977753837},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1646977753837},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1646977753837},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1646977753837},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1646977753837},{"_id":"public/medias/banner/0.jpg","hash":"0dd8ef34a6216b4af45d89cfb7454095e712c67d","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1646977753837},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1646977753837},{"_id":"public/images/banner.png","hash":"ba710964e030db00d32e44a19234d6bbcf9162c3","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1646977753837},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1646977753837},{"_id":"themes/hexo-theme-Chic-master/ChangeLogs.md","hash":"0244985e7e4797e3d0a0e173dce4e341f6aa5dd0","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/_config.yml","hash":"1aaff30a23cb9e2b07813587d2ef69ccca70dc90","modified":1648005193238},{"_id":"themes/hexo-theme-Chic-master/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/layout.ejs","hash":"8565bbea5e904e75e8d1ff5186b3a53650a7fa70","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_page/profile.ejs","hash":"f49991a55cc08a1d90d8d6ae8d15a692163272e1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1648005101688},{"_id":"themes/hexo-theme-Chic-master/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/layout.styl","hash":"4d9f83b5a3bac81e7857358744858fae708320de","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/image/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1648005118609},{"_id":"themes/hexo-theme-Chic-master/source/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/profile.styl","hash":"057097e714284e72e97ab8a808a30df45555a342","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1644420196000},{"_id":"themes/hexo-theme-Chic-master/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1644420196000},{"_id":"source/_posts/《Vuejs-设计与实现》学习笔记：框架设计概览.md","hash":"02c7fd8084d6b971f0edfea5b01e641bd532e115","modified":1661088376632},{"_id":"public/2022/03/23/《Vuejs-设计与实现》学习笔记：框架设计概览/index.html","hash":"92af9218f69d70dc92bfee9cdadca0108aefd961","modified":1661089182652},{"_id":"public/archives/page/3/index.html","hash":"1ed66e4bd6c168cc72be78da7bc3e2a3f3d90c98","modified":1665907462295},{"_id":"public/archives/2022/03/index.html","hash":"d580009e3f2a00efdb7797066cd2ce80481e8669","modified":1665907462295},{"_id":"public/page/3/index.html","hash":"e2a6e2f029683f9f60159d8e81c59e217bc3f883","modified":1665907462295},{"_id":"themes/keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1659169335527},{"_id":"themes/keep/.gitignore","hash":"b49daa26b8121cc0c7074d61b377c8e7e0880d03","modified":1659169335528},{"_id":"themes/keep/README.md","hash":"d98baf3223795c0c2faea57c471fc2af9336cef1","modified":1659169335529},{"_id":"themes/keep/README_zh-CN.md","hash":"77e024325df8ab87114408cc31c8624edb0f5022","modified":1659169335529},{"_id":"themes/keep/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1659169335528},{"_id":"themes/keep/package.json","hash":"cc05ba956ac3c672e111fed4d7d2e284d0fb9eeb","modified":1659169335537},{"_id":"themes/keep/README_zh-TW.md","hash":"106577079fbd01a52ddb7d65fe25bf4c7f9942cd","modified":1659169335529},{"_id":"themes/keep/_config.yml","hash":"5fca1c523feeec955462c3213d3914f83c3716b9","modified":1659177782889},{"_id":"themes/keep/.github/FUNDING.yml","hash":"5fae5cd239ca99c452110a009613055ec77f3902","modified":1659169335527},{"_id":"themes/keep/languages/en.yml","hash":"e4f42cfda0ed6ea1715d28fd4b1bba6f89b8cdb0","modified":1659169335530},{"_id":"themes/keep/languages/zh-CN.yml","hash":"a4bc8e834989b17d77b70080a63a0d840847ba27","modified":1659169335530},{"_id":"themes/keep/languages/zh-TW.yml","hash":"c6be2adec90f8c5d0a93a9f8d7bfb5fac0af4786","modified":1659169335530},{"_id":"themes/keep/.npmignore","hash":"79596a6faba67852ff4d0426602141426f48639f","modified":1659169335528},{"_id":"themes/keep/layout/archive-content.ejs","hash":"cfa8f29b8863534f407136ea3deb18a4b2ff722c","modified":1659169335534},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1659169335535},{"_id":"themes/keep/layout/article-content.ejs","hash":"1a5f94c8a27ef232ccf62e886a9dde56da3065bc","modified":1659169335535},{"_id":"themes/keep/layout/category-content.ejs","hash":"aef0c90a395f909be7d2c358eb41d5558a10406f","modified":1659169335535},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1659169335535},{"_id":"themes/keep/layout/category-list.ejs","hash":"a9390b25238332417fd554d32563a4d9999db90f","modified":1659169335535},{"_id":"themes/keep/layout/home-content.ejs","hash":"79e16c3baa6569afbc07ac6a5d2e3f37b273016a","modified":1659169335536},{"_id":"themes/keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1659169335536},{"_id":"themes/keep/layout/layout.ejs","hash":"da9dbeba541ad19fed35c41fe187f4016e41f0db","modified":1659169335536},{"_id":"themes/keep/layout/tag-content.ejs","hash":"ce4c8192a4ccd6a626af412a7ba258d1edbc0b95","modified":1659169335536},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1659169335536},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1659169335536},{"_id":"themes/keep/scripts/use-source-data.js","hash":"21f6a49e47b7e4d792d67503079ea5b509f18311","modified":1659169335538},{"_id":"themes/keep/layout/page.ejs","hash":"4bf34f19bcf18efb5f6e76fcbe7cd36b25ceee6a","modified":1659169335536},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":1659169335530},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"77e13720374efb902ee3d4d04d13b62de033a3ae","modified":1659169335530},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"647736023e7611917d893c33937d7260d3d5b38b","modified":1659169335531},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"106683de71f01b368c6f0c5417952b54fcdc9611","modified":1659169335532},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"c7860b9b001c5c6422c9cbf30479339e0bb2229e","modified":1659171173531},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"fe35aa6dabeb31bc677270062eed569f37472c2c","modified":1659169335532},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"4c68f6750fc179368ca5556d80fb1781ba984ff8","modified":1659169335532},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"627dfa9519ff614d6a79dac942a7b61fa5bfac8c","modified":1659169335532},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"0aceb1c7c29b65bd5fc2d79a285a564da8c09b63","modified":1659169335532},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1659169335533},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"6fbcc0a14467da8362a2eaa490d84acb1336d21b","modified":1659169335533},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"8fd596f871326b03e707d7defcc96f639cdd628e","modified":1659169335533},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1659169335533},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"e8a303fa393a1716c5ff1f731923781eb12322ab","modified":1659169335533},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"44af04816b86546e0260e73c2df61353e7404208","modified":1659169335534},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ad75de7966c4d9d923c9ac8cfbfe26b38fbe7aed","modified":1659169335534},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"e55d2034d7e2b8b0c1bd5ac7fdc56ffb8bbd4e60","modified":1659169335534},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"5968618b53a029922f2255b0c76bf8a9f11712ff","modified":1659169335534},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"7a8fd4996b9720c8d4cdb3042bfe5a1008f7c5fd","modified":1659169335537},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"b39cfa42d156b7ad4d4e8246b6f934cd51d8db55","modified":1659169335537},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"e7c5417a1cd61f0b7c3f97030d4a77419c41b8a5","modified":1659169335537},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"aefc9db612c0fceb4a02fdbed9fa47a6c4e144b5","modified":1659169335534},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"41517e3f4c1cd567e2ae14acb344818a9552fac4","modified":1659169335538},{"_id":"themes/keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1659169335546},{"_id":"themes/keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1659169335546},{"_id":"themes/keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1659169335546},{"_id":"themes/keep/source/images/loading.svg","hash":"eedfa204e08a60ca5c80c620cfe9a3eaa6201585","modified":1659169335546},{"_id":"themes/keep/source/css/style.styl","hash":"e0c2fd781ee3de12716d6a54dd0f9f5ffe443334","modified":1659169335545},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1659169335540},{"_id":"themes/keep/source/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1659169335547},{"_id":"themes/keep/source/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1659169335547},{"_id":"themes/keep/source/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1659169335547},{"_id":"themes/keep/source/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1659169335547},{"_id":"themes/keep/source/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1659169335547},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1659169335547},{"_id":"themes/keep/source/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1659169335549},{"_id":"themes/keep/source/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1659169335549},{"_id":"themes/keep/source/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1659169335549},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1659169335548},{"_id":"themes/keep/source/js/utils.js","hash":"a2413711ebf7ffc96eafec2ef45a5d243d3ccdb6","modified":1659169335549},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1659169335567},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1659169335568},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1659169335568},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1659169335568},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"4a7294bbe9aa4be22878e8a638668ed7ade25e2c","modified":1659169335531},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"28a0c8b1da66a9b6863e5444aa0b50c8f6b862f0","modified":1659169335531},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"467cafd412837af791b4c353646cf44ac4458a3f","modified":1659169335531},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"92d858874543c4ba149acd04374d84e784ba0aaf","modified":1659169335531},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"949d3fdd4bd215cd7d0c95152c4be630ce227e16","modified":1659169335533},{"_id":"themes/keep/source/css/common/basic.styl","hash":"6d6132527247635f7406d6917cfc8e1cb02d8573","modified":1659169335538},{"_id":"themes/keep/source/css/common/animated.styl","hash":"ceb35da27937a5824dea00c0a75de57e10e1dc90","modified":1659169335538},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"9b6bf080299102571a6667ca99a62f53c9684246","modified":1659169335539},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"55c6c0f77b608b8e1d9c52bb4fdcee881f55eff8","modified":1659169335540},{"_id":"themes/keep/source/css/common/variables.styl","hash":"8b66a8ae90dbb8ec2e412fcf57ff6c8cee18e949","modified":1659169335540},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"638c3b50d8203c76106f3010fbfeed9a29bfde5c","modified":1659169335545},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"5cc7dbdc16afc638deabf8e8c0d8236f395d8305","modified":1659169335544},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"bea0a03fe3de16ed08e7b3b541a46d2074561841","modified":1659169335545},{"_id":"themes/keep/source/css/layout/page.styl","hash":"ea83a6a5503b63d91d71221699776c4fe2c7a941","modified":1659169335545},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"2f2ee2f70020cf5e2ffb5612607bd58772e785a4","modified":1659169335545},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"0d1cc0cc0d263f55b9c7245c1dc023abdcfcd69f","modified":1659169335545},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"515ebe2a251f3b53f0cf130cdc48b8bb1fb85952","modified":1659169335544},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"fd81f8a76ae4f55bf5da38116bbc4f0e973daad2","modified":1659169335539},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1659169335548},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"1edcb0ece1bf4b9838c1937e98eaa845de7f4b3b","modified":1659169335539},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1659169335548},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"64ea39fa5503f6c5a21a9ed7c9d3d5103cccad5a","modified":1659169335539},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"95c41684691a849d102c5a30efb365300d3d5c6d","modified":1659169335541},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"378cb61cdffc7243dc11950efc6c0a5b50eecec9","modified":1659169335541},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"6eaa067231bd9e9faa5de2260b8974142faae510","modified":1659169335541},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"d73c088e639d2d4e076552ff92e611682ce2380b","modified":1659169335542},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"19a8fc0a01bf1efed637e90530c412d57137dfc4","modified":1659169335542},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"80cd9c8abd3542c0e521841137e987a658471e05","modified":1659169335542},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"98aa2e22f16b98b2ffdbf36e1ea24363f8e5045b","modified":1659169335543},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"27d1e19691867a09283facd2983afb9a3404e999","modified":1659169335543},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"da5df38b09138af28cb8b3fe9a05aeda9dae5011","modified":1659169335543},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"59525fcc1f88c78abf8c1f0b06e24b16a088698c","modified":1659169335542},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"f78a13e3b03b19cb72b03db0a5659f8c734e742e","modified":1659169335543},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"a64df5515c60a3a0993c427dc50facee33215f2b","modified":1659169335543},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"a68a1e3f21da63ee2d387035e91f9f60e956e234","modified":1659169335544},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"61016e73c8e420c74800b3afdbd6c2f890400e51","modified":1659169335544},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"029ac31a21203a8b86027e67a3ff3a977579325d","modified":1659169335544},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"f6d9a37520566e38738fc1184ed76817273c3ee5","modified":1659169335541},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"5844874c50a93239031e58b23856698ca9af2725","modified":1659169335542},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"b8fccd13e2753c9fe891fb88a6413087048ab830","modified":1659169335541},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"6b0c7d69fc3f819610576b41e987ec655411ca44","modified":1659169335542},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1659169335565},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1659169335565},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1659169335580},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1659169335581},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1659169335553},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1659169335563},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1659169335567},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1659169335570},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1659169335579},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1659169335561},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1659169335576},{"_id":"themes/keep/source/images/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1659171072884},{"_id":"public/search.json","hash":"0cf9efda3481c780b499dd03d85054d2425429c2","modified":1665907462295},{"_id":"public/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1659171315286},{"_id":"public/images/loading.svg","hash":"eedfa204e08a60ca5c80c620cfe9a3eaa6201585","modified":1659171315286},{"_id":"public/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1659171315286},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1659171315286},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1659171315286},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1659171315286},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1659171315286},{"_id":"public/images/avatar.jpg","hash":"d4acd9fc6177a276763b9d4a7c54b8f3502a67ed","modified":1659171315286},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1659171315286},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1659171315286},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1659171315286},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1659171315286},{"_id":"public/js/dark-light-toggle.js","hash":"223e6f1d4e6e70956e4661b58c430e1c68def125","modified":1659171315286},{"_id":"public/js/back2top.js","hash":"fc8e85f6704e39ae3a613bbec5dd51d449be8010","modified":1659171315286},{"_id":"public/js/lazyload.js","hash":"95aad532f17d7a8119979fc61ade9e626308a2af","modified":1659171315286},{"_id":"public/js/header-shrink.js","hash":"167b9b6a9ed63c6cf4081cb3c201dd16bbbfb9ad","modified":1659171315286},{"_id":"public/js/left-side-toggle.js","hash":"618f7cfc45db4d82b2f1d00d8e9ee936bcf9043b","modified":1659171315286},{"_id":"public/js/main.js","hash":"ca8ed228cc0bc234be74428d029cfd047eec0ed6","modified":1659171315286},{"_id":"public/js/code-copy.js","hash":"3fdabac26f6406a4592336f1f444ec966201b5d9","modified":1659171315286},{"_id":"public/js/utils.js","hash":"a2413711ebf7ffc96eafec2ef45a5d243d3ccdb6","modified":1659171315286},{"_id":"public/js/toc.js","hash":"ae69bf65d2b30d299b6ca9e2361d3b6e0db3a077","modified":1659171315286},{"_id":"public/js/local-search.js","hash":"9509ec6d2d7d4466fe37ad624cf606f6639fb3fe","modified":1659171315286},{"_id":"public/css/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659171315286},{"_id":"public/css/common/animated.css","hash":"654c7588d80dc8b481a203e3071b3cedd41c7fde","modified":1659171315286},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659171315286},{"_id":"public/css/common/variables.css","hash":"157311f7b38a76721f2b6a2a9bd5229fac60df41","modified":1659171315286},{"_id":"public/css/common/markdown.css","hash":"8c9fb9f7fb403e76a4446a7e533ebe36dd702483","modified":1659171315286},{"_id":"public/css/layout/category-content.css","hash":"9687f9cbe029092b633fb804c28ecdcb54860511","modified":1659171315286},{"_id":"public/css/common/basic.css","hash":"bb5c5f8bc322054f9777f0dd381d3ce1ac744374","modified":1659171315286},{"_id":"public/css/layout/category-list.css","hash":"672859a61a4e93c0514772112fb557395306e940","modified":1659171315286},{"_id":"public/css/layout/home-content.css","hash":"be1438b849ebf82cea573986fbbd1deed5334a72","modified":1659171315286},{"_id":"public/css/layout/tag-content.css","hash":"90b0cff1ef0228035cdca9ade2adef71c6c8fb5e","modified":1659171315286},{"_id":"public/css/layout/page.css","hash":"c9d5a1244b1a393ebf63412cf9ffef43ca48d64e","modified":1659171315286},{"_id":"public/css/layout/article-content.css","hash":"032fd87dc40e0252a5ab59a12adc420371bd13bf","modified":1659171315286},{"_id":"public/css/common/codeblock/code-theme.css","hash":"0edc6d498dc0abbaadb152b48e9e7bebb6fd15f4","modified":1659171315286},{"_id":"public/css/common/codeblock/copy-code.css","hash":"b89f31aee2da7a9abe05293391a90602094095b8","modified":1659171315286},{"_id":"public/css/common/codeblock/highlight.css","hash":"a6584196f859d00cdd962f43c809e44ed89319e4","modified":1659171315286},{"_id":"public/css/style.css","hash":"9ef8cf568389cbfd25f26e7e0164e7f83b8eb6df","modified":1659171315286},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1659171315286},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1659171315286},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1659171315286},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1659171315286},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1659171315286},{"_id":"public/webfonts/fa-regular-400.svg","hash":"c41a688158d577e3a2738137992d49b05b17ab8f","modified":1659171315286},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1659171315286},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1659171315286},{"_id":"public/webfonts/fa-brands-400.svg","hash":"69a0ff79a9d93a451e9fa90bd79ae7008d2a9da5","modified":1659171315286},{"_id":"public/webfonts/fa-solid-900.svg","hash":"36de6a298660ed3feaab37900f7b28c3e981d80e","modified":1659171315286},{"_id":"source/_posts/个人网站如何白嫖 HTTPS.md","hash":"df67b4f173b3e72290f6308ea62975b185bfcff1","modified":1659171612024},{"_id":"source/_posts/前端代码整洁之道：lint 标准化.md","hash":"cdd85e74766e54c7de8efda97fa12af989b3dd99","modified":1659176429541},{"_id":"source/_posts/我的2022年中复盘：正式成为前端仔.md","hash":"d96473bd0141dfae30e97e599fe43f58e6038293","modified":1659176691883},{"_id":"source/_posts/Vue 中直接上手的性能优化方案.md","hash":"5c490e8e8054f6dfa3dc3de054fc3a42e61ecbc3","modified":1659176614092},{"_id":"source/_posts/浅谈前端性能优化：节流和防抖.md","hash":"ee7ab017d03f1bff3cd79b207638e7e2a7a795c4","modified":1659171867044},{"_id":"public/categories/前端/page/3/index.html","hash":"64f61afe8ebaf0bb71f83545d956df2b999dd405","modified":1665907462295},{"_id":"public/2022/07/30/Vue 中直接上手的性能优化方案/index.html","hash":"8c8b0a7cbf66fe28724208899a7affc5c33289cd","modified":1659848383495},{"_id":"public/2022/07/19/前端代码整洁之道：lint 标准化/index.html","hash":"b359731218196a50f5decd67d8114f47e12370c3","modified":1659177795262},{"_id":"public/2022/07/14/浅谈前端性能优化：节流和防抖/index.html","hash":"fbfa69740436427135fbb04c3bcc27ddfaeb16b2","modified":1659177795262},{"_id":"public/2022/07/10/我的2022年中复盘：正式成为前端仔/index.html","hash":"fd8595acf5c228f78ad8a98daabbd0a2ebef1419","modified":1659177795262},{"_id":"public/2022/07/05/个人网站如何白嫖 HTTPS/index.html","hash":"97521567b9f403e25c6452e8f16a4c3b1d8d10ec","modified":1659177795262},{"_id":"public/archives/2022/page/2/index.html","hash":"c834752e368723cc5070fdc1574dd78a9ae2f133","modified":1665907462295},{"_id":"public/archives/2022/07/index.html","hash":"668552313182752a47498de0080da340a26ce825","modified":1665907462295},{"_id":"public/tags/性能优化/index.html","hash":"eb66e77e50cb06ce67c06b5e9cf159fd5c6b11a2","modified":1665907462295},{"_id":"public/tags/计算机网络/index.html","hash":"43c05c2ddb04032f496c839c0d42f36a3b62ae44","modified":1659177795262},{"_id":"public/tags/代码整洁之道/index.html","hash":"e640893d996752ebdc3f1eaa72ae5bcc31a2b225","modified":1659177795262},{"_id":"source/_posts/Vue 中优雅的捕获 Promise 异常.md","hash":"32d5f049d9c0c008967df4a6dfb221f9c5896c74","modified":1659848063923},{"_id":"public/page/4/index.html","hash":"e3e54e7832a75100cb2a202b4aa210dc49945e1a","modified":1665907462295},{"_id":"public/2022/08/07/Vue 中优雅的捕获 Promise 异常/index.html","hash":"5320933bb596045bacc1498ac874942e8bd8598f","modified":1661088208147},{"_id":"public/archives/page/4/index.html","hash":"1ed66e4bd6c168cc72be78da7bc3e2a3f3d90c98","modified":1665907462295},{"_id":"public/archives/2022/08/index.html","hash":"afb716655b27dac17863697647e7a6b1be790936","modified":1665907462295},{"_id":"source/_posts/开发环境升级 Vite 踩坑总结.md","hash":"a0ff562c35462090fc99fd7aa20fd634aefdd0ca","modified":1661088122924},{"_id":"public/2022/08/21/开发环境升级 Vite 踩坑总结/index.html","hash":"9144ec3c7657870a41e832879772840f3f46b4b7","modified":1665907462295},{"_id":"public/tags/Vue/index.html","hash":"67edba77904046d3e7363dee156b0e57483247f8","modified":1661088208147},{"_id":"public/tags/Vite/index.html","hash":"71e5c236a47c871659cc6d41b39a438ec0dd95ae","modified":1661088208147},{"_id":"source/_posts/PC 端响应式布局方案.md","hash":"773b281481ed81eb8ebd4c4c973521b2dddb9315","modified":1665907447406},{"_id":"source/_posts/因为懒，我写了个同步cookie的插件.md","hash":"57755f5a0fc14d0efa9b493331f26e323061f74b","modified":1665907122819},{"_id":"source/_posts/浅谈前端性能优化：图片懒加载.md","hash":"5c33f806e4e2667aaba863f4e780cbbd8a4abaae","modified":1665907221373},{"_id":"public/categories/前端/page/4/index.html","hash":"20662341fee51d3b989c956b63a23c2dc4485628","modified":1665907462295},{"_id":"public/tags/CSS/index.html","hash":"48c26b0908906f7525dac60e98fa6ac0a3910078","modified":1665907462295},{"_id":"public/tags/chrome/index.html","hash":"de6d04b4ba866b30381bd813ea92939183a7ec71","modified":1665907462295},{"_id":"public/2022/09/25/浅谈前端性能优化：图片懒加载/index.html","hash":"9afa00fa1bd2f2b2f98eae4891fb98e1e38d5ab5","modified":1665907462295},{"_id":"public/2022/10/16/PC 端响应式布局方案/index.html","hash":"373c80cc1fb88bd2afb67b95efa5cf508dda9742","modified":1665907462295},{"_id":"public/2022/09/14/因为懒，我写了个同步cookie的插件/index.html","hash":"7ed78bdde4cbf2d05727095016d06cd354218f40","modified":1665907462295},{"_id":"public/archives/2022/page/3/index.html","hash":"c834752e368723cc5070fdc1574dd78a9ae2f133","modified":1665907462295},{"_id":"public/archives/2022/09/index.html","hash":"6c8f2443b0f0cc3590e8f9b27631e08b4d2e5f86","modified":1665907462295},{"_id":"public/archives/2022/10/index.html","hash":"151468c6799d2c45e45ddc853f7e4ba45a649ad3","modified":1665907462295}],"Category":[{"name":"前端","_id":"cl0m014as0004a7sjg9spb2uo"},{"name":"其他","_id":"cl0m014b2000pa7sjbmn6gga0"},{"name":"无限进步","_id":"cl0m014b60014a7sj8qv8diep"}],"Data":[],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-12-25T04:00:50.462Z","path":"404/index.html","comments":1,"_id":"cl0m014al0000a7sjfhw37dlt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2022-08-21T09:25:30.000Z","type":"about","layout":"about","_content":"\nHi，我是 wujie\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-08-21 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n\nHi，我是 wujie\n","updated":"2022-08-21T13:39:32.520Z","path":"about/index.html","_id":"cl0m014aq0002a7sj7h8qbikh","comments":1,"content":"<p>Hi，我是 wujie</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi，我是 wujie</p>\n"},{"title":"categories","date":"2021-12-25T07:16:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-25 15:16:00\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-12-25T07:16:17.797Z","path":"categories/index.html","comments":1,"_id":"cl0m014au0006a7sjet76hymx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2021-12-01T23:32:24.587Z","updated":"2021-12-01T23:32:24.587Z","path":"tags/index.html","comments":1,"_id":"cl0m014av0008a7sjfv8of06i","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS 什么是类数组","date":"2022-01-08T01:54:59.000Z","_content":"\n## 对象是类数组常见情况\n\n- 对象是类数组的情况\n\n  - 函数参数对象 arguments\n  - 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n  - 用 `querySelector` 获得的 NodeList\n\n- 函数参数对象 arguments 特点\n\n  - `Object.prototype.toString.call` 返回 `[object arguments]`，代表不是数组\n  - 具有 length 属性\n  - callee 属性：获取当前的函数\n\n- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\n  - `Object.prototype.toString.call` 返回 `[object HTMLFormElement]`，代表不是数组\n  - HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类\n  - DOM 更新时会实时更新\n\n- 用 `querySelector` 获得的 NodeList\n  - `Object.prototype.toString.call` 返回 `[object NodeList]`，代表不是数组\n  - 实时更新\n\n## 类数组应用场景\n\n- 遍历函数参数\n- 定义链接字符串函数\n\n```js\nfunction myConcat(separa) {\n  let args = Array.prototype.slice.call(arguments, 1);\n  return args.join(separa);\n}\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n```\n\n- 函数间传递参数\n\n```js\nfunction foo(a, b, c) {\n  console.log(a, b, c);\n}\n// 通过 apply 方法传递函数参数\nfunction bar() {\n  foo.apply(this, arguments);\n}\nbar(1, 2, 3); // 1 2 3\n```\n\n## 类数组转化为数组的方式\n\n- 借用数组方法转化为数组\n\n```js\nlet arrayLike = {\n  0: \"java\",\n  1: \"script\",\n  length: 2,\n};\n\n// 借用 push 方法\nArray.prototype.push.call(arrayLike, \"wujie\");\nconsole.log(arrayLike); // { '0': 'java', '1': 'script', '2': 'wujie', length: 3 }\n```\n\n- 借用 ES6 展开运算符或 `Array.from` 转化为数组\n\n```js\nfunction sum(a, b) {\n  // 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果\n  const args = [...arguments];\n  return args.reduce((sum, cur) => sum + cur);\n}\n\nconsole.log(sum(1, 2)); // 3\n```\n","source":"_posts/JS-什么是类数组.md","raw":"---\ntitle: JS 什么是类数组\ndate: 2022-01-08 09:54:59\ncategories: 前端\ntags: JavaScript\n---\n\n## 对象是类数组常见情况\n\n- 对象是类数组的情况\n\n  - 函数参数对象 arguments\n  - 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n  - 用 `querySelector` 获得的 NodeList\n\n- 函数参数对象 arguments 特点\n\n  - `Object.prototype.toString.call` 返回 `[object arguments]`，代表不是数组\n  - 具有 length 属性\n  - callee 属性：获取当前的函数\n\n- 用 `getElementsByTagName/Classname/Name` 获得的 HTMLCollection\n\n  - `Object.prototype.toString.call` 返回 `[object HTMLFormElement]`，代表不是数组\n  - HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类\n  - DOM 更新时会实时更新\n\n- 用 `querySelector` 获得的 NodeList\n  - `Object.prototype.toString.call` 返回 `[object NodeList]`，代表不是数组\n  - 实时更新\n\n## 类数组应用场景\n\n- 遍历函数参数\n- 定义链接字符串函数\n\n```js\nfunction myConcat(separa) {\n  let args = Array.prototype.slice.call(arguments, 1);\n  return args.join(separa);\n}\nconsole.log(myConcat(\", \", \"red\", \"orange\", \"blue\"));\n```\n\n- 函数间传递参数\n\n```js\nfunction foo(a, b, c) {\n  console.log(a, b, c);\n}\n// 通过 apply 方法传递函数参数\nfunction bar() {\n  foo.apply(this, arguments);\n}\nbar(1, 2, 3); // 1 2 3\n```\n\n## 类数组转化为数组的方式\n\n- 借用数组方法转化为数组\n\n```js\nlet arrayLike = {\n  0: \"java\",\n  1: \"script\",\n  length: 2,\n};\n\n// 借用 push 方法\nArray.prototype.push.call(arrayLike, \"wujie\");\nconsole.log(arrayLike); // { '0': 'java', '1': 'script', '2': 'wujie', length: 3 }\n```\n\n- 借用 ES6 展开运算符或 `Array.from` 转化为数组\n\n```js\nfunction sum(a, b) {\n  // 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果\n  const args = [...arguments];\n  return args.reduce((sum, cur) => sum + cur);\n}\n\nconsole.log(sum(1, 2)); // 3\n```\n","slug":"JS-什么是类数组","published":1,"updated":"2022-07-30T10:24:40.353Z","_id":"cl0m014ao0001a7sjf9g7er5w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"对象是类数组常见情况\"><a href=\"#对象是类数组常见情况\" class=\"headerlink\" title=\"对象是类数组常见情况\"></a>对象是类数组常见情况</h2><ul>\n<li><p>对象是类数组的情况</p>\n<ul>\n<li>函数参数对象 arguments</li>\n<li>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</li>\n<li>用 <code>querySelector</code> 获得的 NodeList</li>\n</ul>\n</li>\n<li><p>函数参数对象 arguments 特点</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object arguments]</code>，代表不是数组</li>\n<li>具有 length 属性</li>\n<li>callee 属性：获取当前的函数</li>\n</ul>\n</li>\n<li><p>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object HTMLFormElement]</code>，代表不是数组</li>\n<li>HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类</li>\n<li>DOM 更新时会实时更新</li>\n</ul>\n</li>\n<li><p>用 <code>querySelector</code> 获得的 NodeList</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object NodeList]</code>，代表不是数组</li>\n<li>实时更新</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类数组应用场景\"><a href=\"#类数组应用场景\" class=\"headerlink\" title=\"类数组应用场景\"></a>类数组应用场景</h2><ul>\n<li>遍历函数参数</li>\n<li>定义链接字符串函数</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separa</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>函数间传递参数</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 apply 方法传递函数参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类数组转化为数组的方式\"><a href=\"#类数组转化为数组的方式\" class=\"headerlink\" title=\"类数组转化为数组的方式\"></a>类数组转化为数组的方式</h2><ul>\n<li>借用数组方法转化为数组</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 借用 push 方法</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; '0': 'java', '1': 'script', '2': 'wujie', length: 3 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>借用 ES6 展开运算符或 <code>Array.from</code> 转化为数组</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对象是类数组常见情况\"><a href=\"#对象是类数组常见情况\" class=\"headerlink\" title=\"对象是类数组常见情况\"></a>对象是类数组常见情况</h2><ul>\n<li><p>对象是类数组的情况</p>\n<ul>\n<li>函数参数对象 arguments</li>\n<li>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</li>\n<li>用 <code>querySelector</code> 获得的 NodeList</li>\n</ul>\n</li>\n<li><p>函数参数对象 arguments 特点</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object arguments]</code>，代表不是数组</li>\n<li>具有 length 属性</li>\n<li>callee 属性：获取当前的函数</li>\n</ul>\n</li>\n<li><p>用 <code>getElementsByTagName/Classname/Name</code> 获得的 HTMLCollection</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object HTMLFormElement]</code>，代表不是数组</li>\n<li>HTML DOM 对象的一个接口，包含获取到的 DOM 元素集合类</li>\n<li>DOM 更新时会实时更新</li>\n</ul>\n</li>\n<li><p>用 <code>querySelector</code> 获得的 NodeList</p>\n<ul>\n<li><code>Object.prototype.toString.call</code> 返回 <code>[object NodeList]</code>，代表不是数组</li>\n<li>实时更新</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类数组应用场景\"><a href=\"#类数组应用场景\" class=\"headerlink\" title=\"类数组应用场景\"></a>类数组应用场景</h2><ul>\n<li>遍历函数参数</li>\n<li>定义链接字符串函数</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">separa</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>separa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myConcat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>函数间传递参数</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 通过 apply 方法传递函数参数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类数组转化为数组的方式\"><a href=\"#类数组转化为数组的方式\" class=\"headerlink\" title=\"类数组转化为数组的方式\"></a>类数组转化为数组的方式</h2><ul>\n<li>借用数组方法转化为数组</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">\"script\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 借用 push 方法</span>\n<span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; '0': 'java', '1': 'script', '2': 'wujie', length: 3 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>借用 ES6 展开运算符或 <code>Array.from</code> 转化为数组</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 通过展开运算符将类数组转化为数组，从而可以使用数组方法，Array.from 有类似效果</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"JS 数据类型基础梳理","date":"2021-12-28T13:00:53.000Z","_content":"## JS 的数据类型基础\n- JS 中数据类型分为两大类：基础数据类型，引用数据类型\n\n- 基础数据类型有 7 种，分别为：\n\t- Number 类型\n\t- String 类型\n\t- Boolean 类型\n\t- Null：“无” “空” “不存在”\n\t- Undefined：已被声明但未被赋值\n\t- Symbol：用于对象唯一标识符\n\t- BigInt 类型：表示大于或小于 2^53-1 的数字\n\n- 引用数据类型： Object 为引用数据类型，还有其他子类型，如：`Function`、`Array`、`RegExp`、`Date`\n\n- 基础数据类型存储在**栈内存**，被引用或者拷贝的时候，会创建一个完全相等的变量\n\n- 引用类型存储在**堆内存**，存储的是地址，多个引用指向同一个地址\n\n## JS 数据类型判断方式\n- typeof 判断数据类型\n  - typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）\n  - `typeof null` 结果是 object 是 JS 早期错误，为兼容而保留\n  - `typeof alert` alert 在 JS 中是一个函数\n  ```javascript\n  console.log(typeof undefined); // \"undefined\"\n  console.log(typeof 0); // \"number\"\n  console.log(typeof 10n); // \"bigint\"\n  console.log(typeof true); // \"boolean\"\n  console.log(typeof \"wujie\"); // \"string\"\n  console.log(typeof Symbol(\"id\")); // \"symbol\"\n  console.log(typeof Math); // \"object\"  (1)\n  console.log(typeof null); // \"object\"  (2)\n  console.log(typeof alert); // \"function\"  (3)\n  ```\n\n- instanceof 判断数据类型\n  - 通过判断对象原型链上的对象类型，来推断新对象的数据类型\n  - 适用于判断引用数据类型，但不适合基础数据类型判断\n  - 实现 instanceof 封装代码示例\n    ```js\n    function myInstanceof(left, right) {\n        // 先使用 typef 判断，如果不是引用数据类型则直接返回\n        if (typeof left !== \"object\" || left === null) {\n            return false;\n        }\n        // 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,\n        let proto = Object.getPrototypeOf(left);\n        while (true) {\n            // 没有找到相同原型对象则返回 false\n            if (proto === null) {\n                return false;\n            }\n\n            // 找到相同的原型对象才返回 true\n            if (proto === right.prototype) {\n                return true;\n            }\n            proto = Object.getPrototypeOf(left);\n        }\n    }\n\n    console.log(myInstanceof(new Number(10), Number)); // true\n    console.log(myInstanceof(10, Number)); // false\n    ```\n\n- Object.prototype.toString 方法\n  - 对象的原型方法，可以统一返回格式为 `[object Xxx]` 的字符串（注意 Xxx 第一个字母大写）\n  - 对于 Object 对象，可以直接调用，其他对象需要通过 call 调用\n    ```js\n    console.log(Object.prototype.toString({})); // [object Object]\n    console.log(Object.prototype.toString.call({})); // [object Object]\n    console.log(Object.prototype.toString.call(10)); // [object Number]\n    console.log(Object.prototype.toString.call(\"10\")); // [object String]\n    console.log(Object.prototype.toString.call(true)); // [object Boolean]\n    console.log(Object.prototype.toString.call(null)); // [object Null]\n    console.log(Object.prototype.toString.call(undefined)); // [object Undefined]\n    console.log(Object.prototype.toString.call(function () {})); // [object Function]\n    console.log(Object.prototype.toString.call(/wujiel/g)); // [object RegExp]\n    console.log(Object.prototype.toString.call(new Date())); // [object Date]\n    console.log(Object.prototype.toString.call([])); // [object Array]\n    ```\n\n- 全局通用的类型判断方法：可以通过 `typeof` +` Object.prototype.string.call()` 来实现\n    ```js\n    function getType(obj) {\n      let type = typeof obj;\n\n      // 基础类型直接返回\n      if (type !== \"object\") {\n        return type;\n      }\n\n      // 引用类型 toString 判断,通过正则表达式过滤结果\n      return Object.prototype.toString\n        .call(obj)\n        .replace(/^\\[object (\\S+)]$/, \"$1\")\n        .toLowerCase();\n    }\n\n    console.log(getType(10)); // number\n    console.log(getType([])); // array\n    console.log(getType({})); // object\n    console.log(getType(function () {})); // function\n    console.log(getType(new Date())); // date\n    ```\n\n\n## JS 数据类型转换\n- JS 的数据类型转换分为：强制类型转换，隐式类型转换\n\n### 强制类型转换\n- 通过 `Number() parseInt() parseFloat() toString() String Boolean()` 方法实现的数据转换\n\n- `Number()` 类型转换规则\n\t- 数字，返回自身\n\t- Boolean，false 转换为 0，true 转换为 1\n\t- null 转换为 0\n\t- undefined 转换为 NaN\n\t- Symbol 抛出异常\n\t- 对象，使用 `Object` 转换规则\n\t- 字符串\n\t\t- 如果只包含数字，转换为十进制数字\n\t\t- 如果包含有效浮点格式转化为浮点数\n\t\t- 空字符串转换为 0\n\t\t- 以上三种之外的转换为 NaN\n\n- `Boolean()` 类型装转换规则\n\t- 除了 undefined、null、false、\"\" 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true\n\n### 隐式类型转换\n- 逻辑运算操作符（&& || !），运算符（+ - * /），关系操作符（> < >= <=），相等运算符（`==`），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换\n\n- `==` 隐式转换规则\n\t- 如果类型相同，无须转换\n\t- 如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false\n\t- 如果其中一个是 Symbol 类型，那么返回 false\n\t- 两个如果为 string 和 number 类型，那么就会将 string 转换为 number\n\t- 如果一个操作值是 boolean，那么转换 boolean 为 number\n\t- 如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）\n\n- `+` 隐式转换规则\n\t- 其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接\n\t- 其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算\n\t- 其中一个是字符串、一个是数字，则按照字符串规则进行拼接\n\t- 示例代码\n\t```js\n\tconsole.log(1 + true); // 2\n\tconsole.log(1 + null); // 1\n\tconsole.log(1 + undefined); // 1NaN\n\tconsole.log(1 + []); // 1{}\n\tconsole.log(1 + {}); // 1[object, object]\n\tconsole.log(1 + \"1\"); // 11\n\t```\n\n### Object 隐式转换规则\n- 如果有 `Symbol.toPrimitive` 方法，优先调用\n- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n- 以上三种没有转换成功则报错\n- 示例代码\n```js\nlet object = {\n  value: 1,\n  valueOf() {\n    return 2;\n  },\n  toString() {\n    return 3;\n  },\n  [Symbol.toPrimitive]() {\n    return 4;\n  },\n};\n\nconsole.log(1 + object); // 5 优先调用 Symbol.toPrimitive 方法\nconsole.log(1 + {}); // 1[object Object] 调用 toString 方法\nconsole.log(1 + [1, 2, undefined, 3]); // 11,2,,3\n```","source":"_posts/JS-数据类型基础梳理.md","raw":"\n---\ntitle: JS 数据类型基础梳理\ndate: 2021-12-28 21:00:53\ncategories: 前端\ntags: JavaScript\n---\n## JS 的数据类型基础\n- JS 中数据类型分为两大类：基础数据类型，引用数据类型\n\n- 基础数据类型有 7 种，分别为：\n\t- Number 类型\n\t- String 类型\n\t- Boolean 类型\n\t- Null：“无” “空” “不存在”\n\t- Undefined：已被声明但未被赋值\n\t- Symbol：用于对象唯一标识符\n\t- BigInt 类型：表示大于或小于 2^53-1 的数字\n\n- 引用数据类型： Object 为引用数据类型，还有其他子类型，如：`Function`、`Array`、`RegExp`、`Date`\n\n- 基础数据类型存储在**栈内存**，被引用或者拷贝的时候，会创建一个完全相等的变量\n\n- 引用类型存储在**堆内存**，存储的是地址，多个引用指向同一个地址\n\n## JS 数据类型判断方式\n- typeof 判断数据类型\n  - typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）\n  - `typeof null` 结果是 object 是 JS 早期错误，为兼容而保留\n  - `typeof alert` alert 在 JS 中是一个函数\n  ```javascript\n  console.log(typeof undefined); // \"undefined\"\n  console.log(typeof 0); // \"number\"\n  console.log(typeof 10n); // \"bigint\"\n  console.log(typeof true); // \"boolean\"\n  console.log(typeof \"wujie\"); // \"string\"\n  console.log(typeof Symbol(\"id\")); // \"symbol\"\n  console.log(typeof Math); // \"object\"  (1)\n  console.log(typeof null); // \"object\"  (2)\n  console.log(typeof alert); // \"function\"  (3)\n  ```\n\n- instanceof 判断数据类型\n  - 通过判断对象原型链上的对象类型，来推断新对象的数据类型\n  - 适用于判断引用数据类型，但不适合基础数据类型判断\n  - 实现 instanceof 封装代码示例\n    ```js\n    function myInstanceof(left, right) {\n        // 先使用 typef 判断，如果不是引用数据类型则直接返回\n        if (typeof left !== \"object\" || left === null) {\n            return false;\n        }\n        // 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,\n        let proto = Object.getPrototypeOf(left);\n        while (true) {\n            // 没有找到相同原型对象则返回 false\n            if (proto === null) {\n                return false;\n            }\n\n            // 找到相同的原型对象才返回 true\n            if (proto === right.prototype) {\n                return true;\n            }\n            proto = Object.getPrototypeOf(left);\n        }\n    }\n\n    console.log(myInstanceof(new Number(10), Number)); // true\n    console.log(myInstanceof(10, Number)); // false\n    ```\n\n- Object.prototype.toString 方法\n  - 对象的原型方法，可以统一返回格式为 `[object Xxx]` 的字符串（注意 Xxx 第一个字母大写）\n  - 对于 Object 对象，可以直接调用，其他对象需要通过 call 调用\n    ```js\n    console.log(Object.prototype.toString({})); // [object Object]\n    console.log(Object.prototype.toString.call({})); // [object Object]\n    console.log(Object.prototype.toString.call(10)); // [object Number]\n    console.log(Object.prototype.toString.call(\"10\")); // [object String]\n    console.log(Object.prototype.toString.call(true)); // [object Boolean]\n    console.log(Object.prototype.toString.call(null)); // [object Null]\n    console.log(Object.prototype.toString.call(undefined)); // [object Undefined]\n    console.log(Object.prototype.toString.call(function () {})); // [object Function]\n    console.log(Object.prototype.toString.call(/wujiel/g)); // [object RegExp]\n    console.log(Object.prototype.toString.call(new Date())); // [object Date]\n    console.log(Object.prototype.toString.call([])); // [object Array]\n    ```\n\n- 全局通用的类型判断方法：可以通过 `typeof` +` Object.prototype.string.call()` 来实现\n    ```js\n    function getType(obj) {\n      let type = typeof obj;\n\n      // 基础类型直接返回\n      if (type !== \"object\") {\n        return type;\n      }\n\n      // 引用类型 toString 判断,通过正则表达式过滤结果\n      return Object.prototype.toString\n        .call(obj)\n        .replace(/^\\[object (\\S+)]$/, \"$1\")\n        .toLowerCase();\n    }\n\n    console.log(getType(10)); // number\n    console.log(getType([])); // array\n    console.log(getType({})); // object\n    console.log(getType(function () {})); // function\n    console.log(getType(new Date())); // date\n    ```\n\n\n## JS 数据类型转换\n- JS 的数据类型转换分为：强制类型转换，隐式类型转换\n\n### 强制类型转换\n- 通过 `Number() parseInt() parseFloat() toString() String Boolean()` 方法实现的数据转换\n\n- `Number()` 类型转换规则\n\t- 数字，返回自身\n\t- Boolean，false 转换为 0，true 转换为 1\n\t- null 转换为 0\n\t- undefined 转换为 NaN\n\t- Symbol 抛出异常\n\t- 对象，使用 `Object` 转换规则\n\t- 字符串\n\t\t- 如果只包含数字，转换为十进制数字\n\t\t- 如果包含有效浮点格式转化为浮点数\n\t\t- 空字符串转换为 0\n\t\t- 以上三种之外的转换为 NaN\n\n- `Boolean()` 类型装转换规则\n\t- 除了 undefined、null、false、\"\" 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true\n\n### 隐式类型转换\n- 逻辑运算操作符（&& || !），运算符（+ - * /），关系操作符（> < >= <=），相等运算符（`==`），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换\n\n- `==` 隐式转换规则\n\t- 如果类型相同，无须转换\n\t- 如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false\n\t- 如果其中一个是 Symbol 类型，那么返回 false\n\t- 两个如果为 string 和 number 类型，那么就会将 string 转换为 number\n\t- 如果一个操作值是 boolean，那么转换 boolean 为 number\n\t- 如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）\n\n- `+` 隐式转换规则\n\t- 其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接\n\t- 其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算\n\t- 其中一个是字符串、一个是数字，则按照字符串规则进行拼接\n\t- 示例代码\n\t```js\n\tconsole.log(1 + true); // 2\n\tconsole.log(1 + null); // 1\n\tconsole.log(1 + undefined); // 1NaN\n\tconsole.log(1 + []); // 1{}\n\tconsole.log(1 + {}); // 1[object, object]\n\tconsole.log(1 + \"1\"); // 11\n\t```\n\n### Object 隐式转换规则\n- 如果有 `Symbol.toPrimitive` 方法，优先调用\n- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n- 以上三种没有转换成功则报错\n- 示例代码\n```js\nlet object = {\n  value: 1,\n  valueOf() {\n    return 2;\n  },\n  toString() {\n    return 3;\n  },\n  [Symbol.toPrimitive]() {\n    return 4;\n  },\n};\n\nconsole.log(1 + object); // 5 优先调用 Symbol.toPrimitive 方法\nconsole.log(1 + {}); // 1[object Object] 调用 toString 方法\nconsole.log(1 + [1, 2, undefined, 3]); // 11,2,,3\n```","slug":"JS-数据类型基础梳理","published":1,"updated":"2022-07-30T10:24:37.806Z","_id":"cl0m014ar0003a7sjeq2ucet5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JS-的数据类型基础\"><a href=\"#JS-的数据类型基础\" class=\"headerlink\" title=\"JS 的数据类型基础\"></a>JS 的数据类型基础</h2><ul>\n<li><p>JS 中数据类型分为两大类：基础数据类型，引用数据类型</p>\n</li>\n<li><p>基础数据类型有 7 种，分别为：</p>\n<ul>\n<li>Number 类型</li>\n<li>String 类型</li>\n<li>Boolean 类型</li>\n<li>Null：“无” “空” “不存在”</li>\n<li>Undefined：已被声明但未被赋值</li>\n<li>Symbol：用于对象唯一标识符</li>\n<li>BigInt 类型：表示大于或小于 2^53-1 的数字</li>\n</ul>\n</li>\n<li><p>引用数据类型： Object 为引用数据类型，还有其他子类型，如：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code></p>\n</li>\n<li><p>基础数据类型存储在<strong>栈内存</strong>，被引用或者拷贝的时候，会创建一个完全相等的变量</p>\n</li>\n<li><p>引用类型存储在<strong>堆内存</strong>，存储的是地址，多个引用指向同一个地址</p>\n</li>\n</ul>\n<h2 id=\"JS-数据类型判断方式\"><a href=\"#JS-数据类型判断方式\" class=\"headerlink\" title=\"JS 数据类型判断方式\"></a>JS 数据类型判断方式</h2><ul>\n<li><p>typeof 判断数据类型</p>\n<ul>\n<li>typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）</li>\n<li><code>typeof null</code> 结果是 object 是 JS 早期错误，为兼容而保留</li>\n<li><code>typeof alert</code> alert 在 JS 中是一个函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bigint\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (1)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (2)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"  (3)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>instanceof 判断数据类型</p>\n<ul>\n<li>通过判断对象原型链上的对象类型，来推断新对象的数据类型</li>\n<li>适用于判断引用数据类型，但不适合基础数据类型判断</li>\n<li>实现 instanceof 封装代码示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 先使用 typef 判断，如果不是引用数据类型则直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,</span>\n    <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 没有找到相同原型对象则返回 false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 找到相同的原型对象才返回 true</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Object.prototype.toString 方法</p>\n<ul>\n<li>对象的原型方法，可以统一返回格式为 <code>[object Xxx]</code> 的字符串（注意 Xxx 第一个字母大写）</li>\n<li>对于 Object 对象，可以直接调用，其他对象需要通过 call 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object String]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">wujiel</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object RegExp]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Date]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>全局通用的类型判断方法：可以通过 <code>typeof</code> +<code> Object.prototype.string.call()</code> 来实现</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 基础类型直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 引用类型 toString 判断,通过正则表达式过滤结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JS-数据类型转换\"><a href=\"#JS-数据类型转换\" class=\"headerlink\" title=\"JS 数据类型转换\"></a>JS 数据类型转换</h2><ul>\n<li>JS 的数据类型转换分为：强制类型转换，隐式类型转换</li>\n</ul>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><ul>\n<li><p>通过 <code>Number() parseInt() parseFloat() toString() String Boolean()</code> 方法实现的数据转换</p>\n</li>\n<li><p><code>Number()</code> 类型转换规则</p>\n<ul>\n<li>数字，返回自身</li>\n<li>Boolean，false 转换为 0，true 转换为 1</li>\n<li>null 转换为 0</li>\n<li>undefined 转换为 NaN</li>\n<li>Symbol 抛出异常</li>\n<li>对象，使用 <code>Object</code> 转换规则</li>\n<li>字符串<ul>\n<li>如果只包含数字，转换为十进制数字</li>\n<li>如果包含有效浮点格式转化为浮点数</li>\n<li>空字符串转换为 0</li>\n<li>以上三种之外的转换为 NaN</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>Boolean()</code> 类型装转换规则</p>\n<ul>\n<li>除了 undefined、null、false、”” 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>逻辑运算操作符（&amp;&amp; || !），运算符（+ - * /），关系操作符（&gt; &lt; &gt;= &lt;=），相等运算符（<code>==</code>），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换</p>\n</li>\n<li><p><code>==</code> 隐式转换规则</p>\n<ul>\n<li>如果类型相同，无须转换</li>\n<li>如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false</li>\n<li>如果其中一个是 Symbol 类型，那么返回 false</li>\n<li>两个如果为 string 和 number 类型，那么就会将 string 转换为 number</li>\n<li>如果一个操作值是 boolean，那么转换 boolean 为 number</li>\n<li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）</li>\n</ul>\n</li>\n<li><p><code>+</code> 隐式转换规则</p>\n<ul>\n<li>其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接</li>\n<li>其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算</li>\n<li>其中一个是字符串、一个是数字，则按照字符串规则进行拼接</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object, object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object-隐式转换规则\"><a href=\"#Object-隐式转换规则\" class=\"headerlink\" title=\"Object 隐式转换规则\"></a>Object 隐式转换规则</h3><ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 优先调用 Symbol.toPrimitive 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object Object] 调用 toString 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11,2,,3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS-的数据类型基础\"><a href=\"#JS-的数据类型基础\" class=\"headerlink\" title=\"JS 的数据类型基础\"></a>JS 的数据类型基础</h2><ul>\n<li><p>JS 中数据类型分为两大类：基础数据类型，引用数据类型</p>\n</li>\n<li><p>基础数据类型有 7 种，分别为：</p>\n<ul>\n<li>Number 类型</li>\n<li>String 类型</li>\n<li>Boolean 类型</li>\n<li>Null：“无” “空” “不存在”</li>\n<li>Undefined：已被声明但未被赋值</li>\n<li>Symbol：用于对象唯一标识符</li>\n<li>BigInt 类型：表示大于或小于 2^53-1 的数字</li>\n</ul>\n</li>\n<li><p>引用数据类型： Object 为引用数据类型，还有其他子类型，如：<code>Function</code>、<code>Array</code>、<code>RegExp</code>、<code>Date</code></p>\n</li>\n<li><p>基础数据类型存储在<strong>栈内存</strong>，被引用或者拷贝的时候，会创建一个完全相等的变量</p>\n</li>\n<li><p>引用类型存储在<strong>堆内存</strong>，存储的是地址，多个引用指向同一个地址</p>\n</li>\n</ul>\n<h2 id=\"JS-数据类型判断方式\"><a href=\"#JS-数据类型判断方式\" class=\"headerlink\" title=\"JS 数据类型判断方式\"></a>JS 数据类型判断方式</h2><ul>\n<li><p>typeof 判断数据类型</p>\n<ul>\n<li>typeof 能够准确判断基础数据类型，对于引用数据类型不能准确判断（引用类型只能判断出 Function）</li>\n<li><code>typeof null</code> 结果是 object 是 JS 早期错误，为兼容而保留</li>\n<li><code>typeof alert</code> alert 在 JS 中是一个函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">10n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bigint\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symbol\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (1)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"  (2)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"function\"  (3)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>instanceof 判断数据类型</p>\n<ul>\n<li>通过判断对象原型链上的对象类型，来推断新对象的数据类型</li>\n<li>适用于判断引用数据类型，但不适合基础数据类型判断</li>\n<li>实现 instanceof 封装代码示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 先使用 typef 判断，如果不是引用数据类型则直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 获取参数原型对象，循环对比原型链条上的对象是否和 right 对象的类型一致,</span>\n    <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 没有找到相同原型对象则返回 false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 找到相同的原型对象才返回 true</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Object.prototype.toString 方法</p>\n<ul>\n<li>对象的原型方法，可以统一返回格式为 <code>[object Xxx]</code> 的字符串（注意 Xxx 第一个字母大写）</li>\n<li>对于 Object 对象，可以直接调用，其他对象需要通过 call 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Number]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object String]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Boolean]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Null]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Undefined]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">wujiel</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object RegExp]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Date]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>全局通用的类型判断方法：可以通过 <code>typeof</code> +<code> Object.prototype.string.call()</code> 来实现</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 基础类型直接返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 引用类型 toString 判断,通过正则表达式过滤结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// array</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// date</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"JS-数据类型转换\"><a href=\"#JS-数据类型转换\" class=\"headerlink\" title=\"JS 数据类型转换\"></a>JS 数据类型转换</h2><ul>\n<li>JS 的数据类型转换分为：强制类型转换，隐式类型转换</li>\n</ul>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><ul>\n<li><p>通过 <code>Number() parseInt() parseFloat() toString() String Boolean()</code> 方法实现的数据转换</p>\n</li>\n<li><p><code>Number()</code> 类型转换规则</p>\n<ul>\n<li>数字，返回自身</li>\n<li>Boolean，false 转换为 0，true 转换为 1</li>\n<li>null 转换为 0</li>\n<li>undefined 转换为 NaN</li>\n<li>Symbol 抛出异常</li>\n<li>对象，使用 <code>Object</code> 转换规则</li>\n<li>字符串<ul>\n<li>如果只包含数字，转换为十进制数字</li>\n<li>如果包含有效浮点格式转化为浮点数</li>\n<li>空字符串转换为 0</li>\n<li>以上三种之外的转换为 NaN</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>Boolean()</code> 类型装转换规则</p>\n<ul>\n<li>除了 undefined、null、false、”” 、0（包括 +0 和 -0）、NaN 转换为 false ，其他都转换为 true</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><ul>\n<li><p>逻辑运算操作符（&amp;&amp; || !），运算符（+ - * /），关系操作符（&gt; &lt; &gt;= &lt;=），相等运算符（<code>==</code>），if / while 条件，在遇到两边类型不一致的情况，都会出现隐式类型转换</p>\n</li>\n<li><p><code>==</code> 隐式转换规则</p>\n<ul>\n<li>如果类型相同，无须转换</li>\n<li>如果其中一个是 null 或者 undefined，那么另一个必须为 null 或者 undefined，才会返回 true，否则都返回 false</li>\n<li>如果其中一个是 Symbol 类型，那么返回 false</li>\n<li>两个如果为 string 和 number 类型，那么就会将 string 转换为 number</li>\n<li>如果一个操作值是 boolean，那么转换 boolean 为 number</li>\n<li>如果一个操作值为 object 且另一方为 string、number 或者 symbol，就会把 object 转为原始类型再进行判断（调用 object 的 valueOf/toString 方法进行转换）</li>\n</ul>\n</li>\n<li><p><code>+</code> 隐式转换规则</p>\n<ul>\n<li>其中一个是字符串，另一个是 undefined null，则 undefined null 转换为字符串拼接；另一个普通对象、数组、正则等，先调用 Object 转换规则，再进行拼接</li>\n<li>其中一个是数字，另一个是 undefined null，则 undefined null 转换为数字进行计算</li>\n<li>其中一个是字符串、一个是数字，则按照字符串规则进行拼接</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1NaN</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1&#123;&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object, object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object-隐式转换规则\"><a href=\"#Object-隐式转换规则\" class=\"headerlink\" title=\"Object 隐式转换规则\"></a>Object 隐式转换规则</h3><ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>toPrimitive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 优先调用 Symbol.toPrimitive 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1[object Object] 调用 toString 方法</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11,2,,3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"JS 数组方法总结","date":"2021-12-23T07:50:56.000Z","_content":"## 数组基础操作\n- 创建数组的方式有两种\n\t- `new Array()`\n\t- `[]`\n- 添加数组\n\t- 尾部添加：`array.push(item)`\n\t- 头部添加：`array.unshift(item)`\n\t- 直接添加：`array[index] = item`\n\t- 指定索引位置添加：`array.splice(index, 0, item)`\n- 删除数组\n\t- 尾部删除：`array.pop(item)`\n\t- 头部删除：`array.shift(item)`\n\t- 指定索引位置删除：`array.splice(index, 1)`\n- 修改数组\n\t- 直接通过索引修改：`array[index] = item`\n\t- 修改指定位置的某一个元素：`array.splice(index, 1, item)`\n- 获取数组长度：`array.length` （最大的数字索引值 + 1）\n\n## 数组常用方法\n### 分割与组合方法\n- splice() 方法\n\t- `array.splice(index [, deleteCount, item1, item2])` 从索引 `index` 的位置开始删除 `deleteCount` 个元素，并在当前位置插入 `item1, item2` 元素，最后返回被处理后的元素数组\n\t- 常用应用场景\n\t\t- `array.splice(index, 1)` 从索引位置删除一个元素\n\t\t- `array.splice(index, 0, item)` 在索引位置添加一个元素\n\n- slice() 方法\n\t- `array.slice([start], [end])` 创建**一个新数组**，将索引从 `start` 到 `end` 的元素复制到新的数组，可以传入负\n\t- 常用应用场景\n\t\t- `array.slice()` 获取一个新的数组副本（不影响原数组）\n\n- concat() 方法\n\t- `array.concat(arg1, arg2...)` 创建**一个新数组**，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值\n\n### 循环数组方法\n- `for (let i = 0; i < array.length; i++)` 速度最快，可以兼容旧版浏览器\n\n- `for (let item of array)` 只能获取数组 item\n\n- `for (let key in array)` 不建议使用此方法循环数组\n\t- `for in` 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢\n\t- `for in` 会循环数组的所有属性，在处理“类数组”是没有必要的\n\n- forEach() 方法\n\t- `array.forEach((item, index, array) => {})` 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组\n\t- 注意 **forEach 没有返回值**\n\n### 查找数组方法\n- indexOf() / lastIndexOf() 方法\n\t- `array.indexOf(item, from)` 从索引 from 开始查找 item，如果没有找到则返回 -1\n\t- `array.lastIndexOf(item, from)` 从索引 from 开始查找 item，查找方向为**从右至左**,如果没有找到则返回 -1\n\n- includes() 方法\n\t- `array.indludes(item, from)` 从索引 from 开始查找 item，如果没有找到则**返回 false**\n\t- 检查是否包含某个元素**优先使用 includes()**\n\t- 注：includes() 能够正确识别 NAN\n\n- find() / findIndex() 方法\n\t- 如果返回为 true，则返回 item 并**停止迭代**\n\t- 如果返回为 false，则返回 undefined\n\t- 使用场景\n\t```javascript\n\tlet result = array.find((item, index, array) => {\n\t\titem.id === 1;\n\t});\n\t```\n\t- findIndex() 方法返回的是 index ，其余和 find() 方法没有区别\n\n- filter() 方法\n\t- 返回**所有匹配元素组成的数组**\n\t\t- 如果返回为 true，则 item 被放到结果数据，迭代继续直到完成\n\t\t- 如果什么都没有找到则返回空数组\n\t- 使用示例\n\t```javascript\n\t// 返回结果为数组\n\tlet results = array.filter((item, index, array) => {\n\t\titem.id < 3;\n\t});\n\t```\n\n### 转换数组方法\n- map() 方法\n\t- 对每个元素都调用函数，**返回一个新的数组**\n\t- 使用示例\n\t```javascript\n\tlet array = [1, 2, 3];\n\tlet result = array.map((item, index, array) => {\n\t\titem * 2;\n\t});\n\tconsole.log(result); // [1, 4, 6]\n\t```\n\n- sort() 方法\n\t- 对当前数组进行排序（**没有生成新数组**）\n\t- 默认使用字符串排序，如果是**数字排序需要指定参考函数**\n\t- 返回为负数，按照升序排列（**负数表示小于**）\n\t```javascript\n\tarray.sort( (a, b) => {a - b;});\n\t```\n\t- 返回为正数，按照降序排列（上述例子相反，**正数表示大于**）\n\n- reverse() 方法\n\t- 颠倒元素顺序\n\n- split() / join() 方法\n\t- `array.split(delim, [length])` 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度\n\t- `array.join(delim)` 使用分隔符 delim 将数组组成字符串\n\n- reduce() / reduceRight() 方法\n\t```javascript\n\tlet value = array.reduce((accumulator, item, index, array) => {\n\n\t}, [initial])\n\t```\n\t- 参数含义\n\t\t- accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代\n\t\t- item、index、array：数组元素、索引、数组本身\n\t- 使用示例：\n\t```javascript\n\tconst array = [1, 2, 3, 4, 5];\n\tlet result = array.reduce((sum, curent) => {sum + current}); // result = 15\n\t```\n\t- 注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议**始终指定初始值**\n\t- `array.reduceRight()` 的遍历方向为从右至左，其余和 reduce 相同\n\n- some() / every() 方法\n\t- `array.some(fn)` 类似于 `||` ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代\n\t- `array.every(fn)` 类似于 `&&` ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false\n\n- fill() 方法\n\t- `array.fill(value, start, end)`  从索引 start 到 end，用重复的 value 填充数组\n\n### 判断数组方法\n- `Object.prototype.toString.call()`\n\t- 每一个继承 Object 对象都有 toString 方法，**如果 toString 方法没有被重写的话，会返回 `[Object type]`**, type 是对象的类型\n\t- 常用于判断浏览器内置对象\n\t```javascript\n\tObject.prototype.toString.call([\"1\",\"2\"]) // \"[object Array]\"\n\tObject.prototype.toString.call(1) // \"[object Number]\"\n\tObject.prototype.toString.call(\"wujie\") // \"[object String]\"\n\tObject.prototype.toString.call(null) // \"[object null]\"\n\tObject.prototype.toString.call(undefined) // \"[object undefined]\"\n\tObject.prototype.toString.call(function(){}) // \"[object Function]\"\n\t```\n\n- `instanceof`\n\t- 内部机制是通过判断对象的原型链能否找到类型的 prototype\n\t- 如果能够找到 Array 原型，则判断为数组 `instanceof Array`\n\t- `instanceof` 只能判断对象类型，**不能判断原始类型**，并且所有对象类型 `instanceof Object` 都是 `true`\n\n- `Array.isArray()`\n\t- 优于 `instancof`，**因为 `Array.isArray` 可以检测出 iframs**\n\t- 可以通过 `Object.prototype.toString.call()` 实现 isArray() 方法\n\t\t```javascript\n\t\tif (!Array.isArray()) {\n\t\t    Array.isArray = function(arg) {\n\t\t        return Object.prototype.toString.call(arg) === \"[object Array]\";\n\t\t    }\n\t\t}\n\t\t```\n### 数组方法注意事项\n- `sort`、`reverse`、`splice` 方法修改的是数组本身","source":"_posts/JS-数组方法总结.md","raw":"---\ntitle: JS 数组方法总结\ndate: 2021-12-23 15:50:56\ncategories: 前端\ntags: JavaScript\n---\n## 数组基础操作\n- 创建数组的方式有两种\n\t- `new Array()`\n\t- `[]`\n- 添加数组\n\t- 尾部添加：`array.push(item)`\n\t- 头部添加：`array.unshift(item)`\n\t- 直接添加：`array[index] = item`\n\t- 指定索引位置添加：`array.splice(index, 0, item)`\n- 删除数组\n\t- 尾部删除：`array.pop(item)`\n\t- 头部删除：`array.shift(item)`\n\t- 指定索引位置删除：`array.splice(index, 1)`\n- 修改数组\n\t- 直接通过索引修改：`array[index] = item`\n\t- 修改指定位置的某一个元素：`array.splice(index, 1, item)`\n- 获取数组长度：`array.length` （最大的数字索引值 + 1）\n\n## 数组常用方法\n### 分割与组合方法\n- splice() 方法\n\t- `array.splice(index [, deleteCount, item1, item2])` 从索引 `index` 的位置开始删除 `deleteCount` 个元素，并在当前位置插入 `item1, item2` 元素，最后返回被处理后的元素数组\n\t- 常用应用场景\n\t\t- `array.splice(index, 1)` 从索引位置删除一个元素\n\t\t- `array.splice(index, 0, item)` 在索引位置添加一个元素\n\n- slice() 方法\n\t- `array.slice([start], [end])` 创建**一个新数组**，将索引从 `start` 到 `end` 的元素复制到新的数组，可以传入负\n\t- 常用应用场景\n\t\t- `array.slice()` 获取一个新的数组副本（不影响原数组）\n\n- concat() 方法\n\t- `array.concat(arg1, arg2...)` 创建**一个新数组**，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值\n\n### 循环数组方法\n- `for (let i = 0; i < array.length; i++)` 速度最快，可以兼容旧版浏览器\n\n- `for (let item of array)` 只能获取数组 item\n\n- `for (let key in array)` 不建议使用此方法循环数组\n\t- `for in` 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢\n\t- `for in` 会循环数组的所有属性，在处理“类数组”是没有必要的\n\n- forEach() 方法\n\t- `array.forEach((item, index, array) => {})` 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组\n\t- 注意 **forEach 没有返回值**\n\n### 查找数组方法\n- indexOf() / lastIndexOf() 方法\n\t- `array.indexOf(item, from)` 从索引 from 开始查找 item，如果没有找到则返回 -1\n\t- `array.lastIndexOf(item, from)` 从索引 from 开始查找 item，查找方向为**从右至左**,如果没有找到则返回 -1\n\n- includes() 方法\n\t- `array.indludes(item, from)` 从索引 from 开始查找 item，如果没有找到则**返回 false**\n\t- 检查是否包含某个元素**优先使用 includes()**\n\t- 注：includes() 能够正确识别 NAN\n\n- find() / findIndex() 方法\n\t- 如果返回为 true，则返回 item 并**停止迭代**\n\t- 如果返回为 false，则返回 undefined\n\t- 使用场景\n\t```javascript\n\tlet result = array.find((item, index, array) => {\n\t\titem.id === 1;\n\t});\n\t```\n\t- findIndex() 方法返回的是 index ，其余和 find() 方法没有区别\n\n- filter() 方法\n\t- 返回**所有匹配元素组成的数组**\n\t\t- 如果返回为 true，则 item 被放到结果数据，迭代继续直到完成\n\t\t- 如果什么都没有找到则返回空数组\n\t- 使用示例\n\t```javascript\n\t// 返回结果为数组\n\tlet results = array.filter((item, index, array) => {\n\t\titem.id < 3;\n\t});\n\t```\n\n### 转换数组方法\n- map() 方法\n\t- 对每个元素都调用函数，**返回一个新的数组**\n\t- 使用示例\n\t```javascript\n\tlet array = [1, 2, 3];\n\tlet result = array.map((item, index, array) => {\n\t\titem * 2;\n\t});\n\tconsole.log(result); // [1, 4, 6]\n\t```\n\n- sort() 方法\n\t- 对当前数组进行排序（**没有生成新数组**）\n\t- 默认使用字符串排序，如果是**数字排序需要指定参考函数**\n\t- 返回为负数，按照升序排列（**负数表示小于**）\n\t```javascript\n\tarray.sort( (a, b) => {a - b;});\n\t```\n\t- 返回为正数，按照降序排列（上述例子相反，**正数表示大于**）\n\n- reverse() 方法\n\t- 颠倒元素顺序\n\n- split() / join() 方法\n\t- `array.split(delim, [length])` 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度\n\t- `array.join(delim)` 使用分隔符 delim 将数组组成字符串\n\n- reduce() / reduceRight() 方法\n\t```javascript\n\tlet value = array.reduce((accumulator, item, index, array) => {\n\n\t}, [initial])\n\t```\n\t- 参数含义\n\t\t- accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代\n\t\t- item、index、array：数组元素、索引、数组本身\n\t- 使用示例：\n\t```javascript\n\tconst array = [1, 2, 3, 4, 5];\n\tlet result = array.reduce((sum, curent) => {sum + current}); // result = 15\n\t```\n\t- 注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议**始终指定初始值**\n\t- `array.reduceRight()` 的遍历方向为从右至左，其余和 reduce 相同\n\n- some() / every() 方法\n\t- `array.some(fn)` 类似于 `||` ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代\n\t- `array.every(fn)` 类似于 `&&` ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false\n\n- fill() 方法\n\t- `array.fill(value, start, end)`  从索引 start 到 end，用重复的 value 填充数组\n\n### 判断数组方法\n- `Object.prototype.toString.call()`\n\t- 每一个继承 Object 对象都有 toString 方法，**如果 toString 方法没有被重写的话，会返回 `[Object type]`**, type 是对象的类型\n\t- 常用于判断浏览器内置对象\n\t```javascript\n\tObject.prototype.toString.call([\"1\",\"2\"]) // \"[object Array]\"\n\tObject.prototype.toString.call(1) // \"[object Number]\"\n\tObject.prototype.toString.call(\"wujie\") // \"[object String]\"\n\tObject.prototype.toString.call(null) // \"[object null]\"\n\tObject.prototype.toString.call(undefined) // \"[object undefined]\"\n\tObject.prototype.toString.call(function(){}) // \"[object Function]\"\n\t```\n\n- `instanceof`\n\t- 内部机制是通过判断对象的原型链能否找到类型的 prototype\n\t- 如果能够找到 Array 原型，则判断为数组 `instanceof Array`\n\t- `instanceof` 只能判断对象类型，**不能判断原始类型**，并且所有对象类型 `instanceof Object` 都是 `true`\n\n- `Array.isArray()`\n\t- 优于 `instancof`，**因为 `Array.isArray` 可以检测出 iframs**\n\t- 可以通过 `Object.prototype.toString.call()` 实现 isArray() 方法\n\t\t```javascript\n\t\tif (!Array.isArray()) {\n\t\t    Array.isArray = function(arg) {\n\t\t        return Object.prototype.toString.call(arg) === \"[object Array]\";\n\t\t    }\n\t\t}\n\t\t```\n### 数组方法注意事项\n- `sort`、`reverse`、`splice` 方法修改的是数组本身","slug":"JS-数组方法总结","published":1,"updated":"2022-07-30T10:24:34.990Z","_id":"cl0m014au0007a7sjbz0eec4i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"数组基础操作\"><a href=\"#数组基础操作\" class=\"headerlink\" title=\"数组基础操作\"></a>数组基础操作</h2><ul>\n<li>创建数组的方式有两种<ul>\n<li><code>new Array()</code></li>\n<li><code>[]</code></li>\n</ul>\n</li>\n<li>添加数组<ul>\n<li>尾部添加：<code>array.push(item)</code></li>\n<li>头部添加：<code>array.unshift(item)</code></li>\n<li>直接添加：<code>array[index] = item</code></li>\n<li>指定索引位置添加：<code>array.splice(index, 0, item)</code></li>\n</ul>\n</li>\n<li>删除数组<ul>\n<li>尾部删除：<code>array.pop(item)</code></li>\n<li>头部删除：<code>array.shift(item)</code></li>\n<li>指定索引位置删除：<code>array.splice(index, 1)</code></li>\n</ul>\n</li>\n<li>修改数组<ul>\n<li>直接通过索引修改：<code>array[index] = item</code></li>\n<li>修改指定位置的某一个元素：<code>array.splice(index, 1, item)</code></li>\n</ul>\n</li>\n<li>获取数组长度：<code>array.length</code> （最大的数字索引值 + 1）</li>\n</ul>\n<h2 id=\"数组常用方法\"><a href=\"#数组常用方法\" class=\"headerlink\" title=\"数组常用方法\"></a>数组常用方法</h2><h3 id=\"分割与组合方法\"><a href=\"#分割与组合方法\" class=\"headerlink\" title=\"分割与组合方法\"></a>分割与组合方法</h3><ul>\n<li><p>splice() 方法</p>\n<ul>\n<li><code>array.splice(index [, deleteCount, item1, item2])</code> 从索引 <code>index</code> 的位置开始删除 <code>deleteCount</code> 个元素，并在当前位置插入 <code>item1, item2</code> 元素，最后返回被处理后的元素数组</li>\n<li>常用应用场景<ul>\n<li><code>array.splice(index, 1)</code> 从索引位置删除一个元素</li>\n<li><code>array.splice(index, 0, item)</code> 在索引位置添加一个元素</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>slice() 方法</p>\n<ul>\n<li><code>array.slice([start], [end])</code> 创建<strong>一个新数组</strong>，将索引从 <code>start</code> 到 <code>end</code> 的元素复制到新的数组，可以传入负</li>\n<li>常用应用场景<ul>\n<li><code>array.slice()</code> 获取一个新的数组副本（不影响原数组）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>concat() 方法</p>\n<ul>\n<li><code>array.concat(arg1, arg2...)</code> 创建<strong>一个新数组</strong>，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环数组方法\"><a href=\"#循环数组方法\" class=\"headerlink\" title=\"循环数组方法\"></a>循环数组方法</h3><ul>\n<li><p><code>for (let i = 0; i &lt; array.length; i++)</code> 速度最快，可以兼容旧版浏览器</p>\n</li>\n<li><p><code>for (let item of array)</code> 只能获取数组 item</p>\n</li>\n<li><p><code>for (let key in array)</code> 不建议使用此方法循环数组</p>\n<ul>\n<li><code>for in</code> 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢</li>\n<li><code>for in</code> 会循环数组的所有属性，在处理“类数组”是没有必要的</li>\n</ul>\n</li>\n<li><p>forEach() 方法</p>\n<ul>\n<li><code>array.forEach((item, index, array) =&gt; &#123;&#125;)</code> 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组</li>\n<li>注意 <strong>forEach 没有返回值</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查找数组方法\"><a href=\"#查找数组方法\" class=\"headerlink\" title=\"查找数组方法\"></a>查找数组方法</h3><ul>\n<li><p>indexOf() / lastIndexOf() 方法</p>\n<ul>\n<li><code>array.indexOf(item, from)</code> 从索引 from 开始查找 item，如果没有找到则返回 -1</li>\n<li><code>array.lastIndexOf(item, from)</code> 从索引 from 开始查找 item，查找方向为<strong>从右至左</strong>,如果没有找到则返回 -1</li>\n</ul>\n</li>\n<li><p>includes() 方法</p>\n<ul>\n<li><code>array.indludes(item, from)</code> 从索引 from 开始查找 item，如果没有找到则<strong>返回 false</strong></li>\n<li>检查是否包含某个元素<strong>优先使用 includes()</strong></li>\n<li>注：includes() 能够正确识别 NAN</li>\n</ul>\n</li>\n<li><p>find() / findIndex() 方法</p>\n<ul>\n<li>如果返回为 true，则返回 item 并<strong>停止迭代</strong></li>\n<li>如果返回为 false，则返回 undefined</li>\n<li>使用场景<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>findIndex() 方法返回的是 index ，其余和 find() 方法没有区别</li>\n</ul>\n</li>\n<li><p>filter() 方法</p>\n<ul>\n<li>返回<strong>所有匹配元素组成的数组</strong><ul>\n<li>如果返回为 true，则 item 被放到结果数据，迭代继续直到完成</li>\n<li>如果什么都没有找到则返回空数组</li>\n</ul>\n</li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 返回结果为数组</span>\n<span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"转换数组方法\"><a href=\"#转换数组方法\" class=\"headerlink\" title=\"转换数组方法\"></a>转换数组方法</h3><ul>\n<li><p>map() 方法</p>\n<ul>\n<li>对每个元素都调用函数，<strong>返回一个新的数组</strong></li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>sort() 方法</p>\n<ul>\n<li>对当前数组进行排序（<strong>没有生成新数组</strong>）</li>\n<li>默认使用字符串排序，如果是<strong>数字排序需要指定参考函数</strong></li>\n<li>返回为负数，按照升序排列（<strong>负数表示小于</strong>）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>返回为正数，按照降序排列（上述例子相反，<strong>正数表示大于</strong>）</li>\n</ul>\n</li>\n<li><p>reverse() 方法</p>\n<ul>\n<li>颠倒元素顺序</li>\n</ul>\n</li>\n<li><p>split() / join() 方法</p>\n<ul>\n<li><code>array.split(delim, [length])</code> 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度</li>\n<li><code>array.join(delim)</code> 使用分隔符 delim 将数组组成字符串</li>\n</ul>\n</li>\n<li><p>reduce() / reduceRight() 方法</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initial<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>参数含义<ul>\n<li>accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代</li>\n<li>item、index、array：数组元素、索引、数组本身</li>\n</ul>\n</li>\n<li>使用示例：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> curent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>sum <span class=\"token operator\">+</span> current<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result = 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议<strong>始终指定初始值</strong></li>\n<li><code>array.reduceRight()</code> 的遍历方向为从右至左，其余和 reduce 相同</li>\n</ul>\n</li>\n<li><p>some() / every() 方法</p>\n<ul>\n<li><code>array.some(fn)</code> 类似于 <code>||</code> ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代</li>\n<li><code>array.every(fn)</code> 类似于 <code>&amp;&amp;</code> ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false</li>\n</ul>\n</li>\n<li><p>fill() 方法</p>\n<ul>\n<li><code>array.fill(value, start, end)</code>  从索引 start 到 end，用重复的 value 填充数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"判断数组方法\"><a href=\"#判断数组方法\" class=\"headerlink\" title=\"判断数组方法\"></a>判断数组方法</h3><ul>\n<li><p><code>Object.prototype.toString.call()</code></p>\n<ul>\n<li>每一个继承 Object 对象都有 toString 方法，<strong>如果 toString 方法没有被重写的话，会返回 <code>[Object type]</code></strong>, type 是对象的类型</li>\n<li>常用于判断浏览器内置对象<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Function]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><code>instanceof</code></p>\n<ul>\n<li>内部机制是通过判断对象的原型链能否找到类型的 prototype</li>\n<li>如果能够找到 Array 原型，则判断为数组 <code>instanceof Array</code></li>\n<li><code>instanceof</code> 只能判断对象类型，<strong>不能判断原始类型</strong>，并且所有对象类型 <code>instanceof Object</code> 都是 <code>true</code></li>\n</ul>\n</li>\n<li><p><code>Array.isArray()</code></p>\n<ul>\n<li>优于 <code>instancof</code>，<strong>因为 <code>Array.isArray</code> 可以检测出 iframs</strong></li>\n<li>可以通过 <code>Object.prototype.toString.call()</code> 实现 isArray() 方法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Array<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数组方法注意事项\"><a href=\"#数组方法注意事项\" class=\"headerlink\" title=\"数组方法注意事项\"></a>数组方法注意事项</h3></li>\n</ul>\n</li>\n<li><p><code>sort</code>、<code>reverse</code>、<code>splice</code> 方法修改的是数组本身</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组基础操作\"><a href=\"#数组基础操作\" class=\"headerlink\" title=\"数组基础操作\"></a>数组基础操作</h2><ul>\n<li>创建数组的方式有两种<ul>\n<li><code>new Array()</code></li>\n<li><code>[]</code></li>\n</ul>\n</li>\n<li>添加数组<ul>\n<li>尾部添加：<code>array.push(item)</code></li>\n<li>头部添加：<code>array.unshift(item)</code></li>\n<li>直接添加：<code>array[index] = item</code></li>\n<li>指定索引位置添加：<code>array.splice(index, 0, item)</code></li>\n</ul>\n</li>\n<li>删除数组<ul>\n<li>尾部删除：<code>array.pop(item)</code></li>\n<li>头部删除：<code>array.shift(item)</code></li>\n<li>指定索引位置删除：<code>array.splice(index, 1)</code></li>\n</ul>\n</li>\n<li>修改数组<ul>\n<li>直接通过索引修改：<code>array[index] = item</code></li>\n<li>修改指定位置的某一个元素：<code>array.splice(index, 1, item)</code></li>\n</ul>\n</li>\n<li>获取数组长度：<code>array.length</code> （最大的数字索引值 + 1）</li>\n</ul>\n<h2 id=\"数组常用方法\"><a href=\"#数组常用方法\" class=\"headerlink\" title=\"数组常用方法\"></a>数组常用方法</h2><h3 id=\"分割与组合方法\"><a href=\"#分割与组合方法\" class=\"headerlink\" title=\"分割与组合方法\"></a>分割与组合方法</h3><ul>\n<li><p>splice() 方法</p>\n<ul>\n<li><code>array.splice(index [, deleteCount, item1, item2])</code> 从索引 <code>index</code> 的位置开始删除 <code>deleteCount</code> 个元素，并在当前位置插入 <code>item1, item2</code> 元素，最后返回被处理后的元素数组</li>\n<li>常用应用场景<ul>\n<li><code>array.splice(index, 1)</code> 从索引位置删除一个元素</li>\n<li><code>array.splice(index, 0, item)</code> 在索引位置添加一个元素</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>slice() 方法</p>\n<ul>\n<li><code>array.slice([start], [end])</code> 创建<strong>一个新数组</strong>，将索引从 <code>start</code> 到 <code>end</code> 的元素复制到新的数组，可以传入负</li>\n<li>常用应用场景<ul>\n<li><code>array.slice()</code> 获取一个新的数组副本（不影响原数组）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>concat() 方法</p>\n<ul>\n<li><code>array.concat(arg1, arg2...)</code> 创建<strong>一个新数组</strong>，将第二个开始的所有参数拼接至第一个数组，第二个开始的参数可以是数组或者值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"循环数组方法\"><a href=\"#循环数组方法\" class=\"headerlink\" title=\"循环数组方法\"></a>循环数组方法</h3><ul>\n<li><p><code>for (let i = 0; i &lt; array.length; i++)</code> 速度最快，可以兼容旧版浏览器</p>\n</li>\n<li><p><code>for (let item of array)</code> 只能获取数组 item</p>\n</li>\n<li><p><code>for (let key in array)</code> 不建议使用此方法循环数组</p>\n<ul>\n<li><code>for in</code> 适用于对象循环，并为对象循环做了相关优化，但对数组循环没有优化，循环速度更慢</li>\n<li><code>for in</code> 会循环数组的所有属性，在处理“类数组”是没有必要的</li>\n</ul>\n</li>\n<li><p>forEach() 方法</p>\n<ul>\n<li><code>array.forEach((item, index, array) =&gt; &#123;&#125;)</code> 循环遍历数组，item为元素，index 为索引，array 为被遍历的数组</li>\n<li>注意 <strong>forEach 没有返回值</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查找数组方法\"><a href=\"#查找数组方法\" class=\"headerlink\" title=\"查找数组方法\"></a>查找数组方法</h3><ul>\n<li><p>indexOf() / lastIndexOf() 方法</p>\n<ul>\n<li><code>array.indexOf(item, from)</code> 从索引 from 开始查找 item，如果没有找到则返回 -1</li>\n<li><code>array.lastIndexOf(item, from)</code> 从索引 from 开始查找 item，查找方向为<strong>从右至左</strong>,如果没有找到则返回 -1</li>\n</ul>\n</li>\n<li><p>includes() 方法</p>\n<ul>\n<li><code>array.indludes(item, from)</code> 从索引 from 开始查找 item，如果没有找到则<strong>返回 false</strong></li>\n<li>检查是否包含某个元素<strong>优先使用 includes()</strong></li>\n<li>注：includes() 能够正确识别 NAN</li>\n</ul>\n</li>\n<li><p>find() / findIndex() 方法</p>\n<ul>\n<li>如果返回为 true，则返回 item 并<strong>停止迭代</strong></li>\n<li>如果返回为 false，则返回 undefined</li>\n<li>使用场景<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>findIndex() 方法返回的是 index ，其余和 find() 方法没有区别</li>\n</ul>\n</li>\n<li><p>filter() 方法</p>\n<ul>\n<li>返回<strong>所有匹配元素组成的数组</strong><ul>\n<li>如果返回为 true，则 item 被放到结果数据，迭代继续直到完成</li>\n<li>如果什么都没有找到则返回空数组</li>\n</ul>\n</li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 返回结果为数组</span>\n<span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"转换数组方法\"><a href=\"#转换数组方法\" class=\"headerlink\" title=\"转换数组方法\"></a>转换数组方法</h3><ul>\n<li><p>map() 方法</p>\n<ul>\n<li>对每个元素都调用函数，<strong>返回一个新的数组</strong></li>\n<li>使用示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\titem <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 4, 6]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>sort() 方法</p>\n<ul>\n<li>对当前数组进行排序（<strong>没有生成新数组</strong>）</li>\n<li>默认使用字符串排序，如果是<strong>数字排序需要指定参考函数</strong></li>\n<li>返回为负数，按照升序排列（<strong>负数表示小于</strong>）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>返回为正数，按照降序排列（上述例子相反，<strong>正数表示大于</strong>）</li>\n</ul>\n</li>\n<li><p>reverse() 方法</p>\n<ul>\n<li>颠倒元素顺序</li>\n</ul>\n</li>\n<li><p>split() / join() 方法</p>\n<ul>\n<li><code>array.split(delim, [length])</code> 根据提供的分隔符 delim 将字符串分割成数组，length 用于限制生成数组的长度</li>\n<li><code>array.join(delim)</code> 使用分隔符 delim 将数组组成字符串</li>\n</ul>\n</li>\n<li><p>reduce() / reduceRight() 方法</p>\n  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>initial<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>参数含义<ul>\n<li>accumulator：上一个函数调用的结果，第一次等于 initial 参数（如果提供了 initial 参数的话），如果没提供 initial 参数，则以第一个参数作为初始值，从第二个参数开始迭代</li>\n<li>item、index、array：数组元素、索引、数组本身</li>\n</ul>\n</li>\n<li>使用示例：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> curent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>sum <span class=\"token operator\">+</span> current<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result = 15</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li>注意事项：如果不指定 initial 参数，如果数组为空则会报错，所以建议<strong>始终指定初始值</strong></li>\n<li><code>array.reduceRight()</code> 的遍历方向为从右至左，其余和 reduce 相同</li>\n</ul>\n</li>\n<li><p>some() / every() 方法</p>\n<ul>\n<li><code>array.some(fn)</code> 类似于 <code>||</code> ，如果 fn 返回一个真值，some() 方法立刻返回 true 并停止迭代</li>\n<li><code>array.every(fn)</code> 类似于 <code>&amp;&amp;</code> ，如果 fn 返回全部为真，every() 方法立刻返回 true，否则返回 false</li>\n</ul>\n</li>\n<li><p>fill() 方法</p>\n<ul>\n<li><code>array.fill(value, start, end)</code>  从索引 start 到 end，用重复的 value 填充数组</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"判断数组方法\"><a href=\"#判断数组方法\" class=\"headerlink\" title=\"判断数组方法\"></a>判断数组方法</h3><ul>\n<li><p><code>Object.prototype.toString.call()</code></p>\n<ul>\n<li>每一个继承 Object 对象都有 toString 方法，<strong>如果 toString 方法没有被重写的话，会返回 <code>[Object type]</code></strong>, type 是对象的类型</li>\n<li>常用于判断浏览器内置对象<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Function]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><code>instanceof</code></p>\n<ul>\n<li>内部机制是通过判断对象的原型链能否找到类型的 prototype</li>\n<li>如果能够找到 Array 原型，则判断为数组 <code>instanceof Array</code></li>\n<li><code>instanceof</code> 只能判断对象类型，<strong>不能判断原始类型</strong>，并且所有对象类型 <code>instanceof Object</code> 都是 <code>true</code></li>\n</ul>\n</li>\n<li><p><code>Array.isArray()</code></p>\n<ul>\n<li>优于 <code>instancof</code>，<strong>因为 <code>Array.isArray</code> 可以检测出 iframs</strong></li>\n<li>可以通过 <code>Object.prototype.toString.call()</code> 实现 isArray() 方法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Array<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Array]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数组方法注意事项\"><a href=\"#数组方法注意事项\" class=\"headerlink\" title=\"数组方法注意事项\"></a>数组方法注意事项</h3></li>\n</ul>\n</li>\n<li><p><code>sort</code>、<code>reverse</code>、<code>splice</code> 方法修改的是数组本身</p>\n</li>\n</ul>\n"},{"title":"JS 继承实现方式整理","date":"2021-12-24T07:55:02.000Z","_content":"## 原型链继承\n- 将子类的原型对象指向父类的实例\n- 优点：继承了父类的模板，又继承了父类的原型对象\n- 缺点：\n\t- 无法实现多继承(因为已经指定了原型对象了)\n\t- 父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响\n\t- 创建子类时，无法向父类构造函数传参数\n```javascript\nfunction Parent() {\n\tthis.info = {\n\t\tname: \"Parent\",\n\t\tage: 18\n\t}\n}\n\nParent.prototype.getInfo = function() {\n\tconsole.log(this.info);\n}\n\nfunction Child() {\n}\n\n// 将子类的原型对象指向父类的实例\nChild.prototype = new Parent();\n\nlet child = new Child();\nchild.info.gender = \"M\";\nchild.getInfo(); // { name: 'Parent', age: 18, gender: 'M' }\n```\n\n## 构造函数继承\n- 在子类构造函数内部使用 `apply` 或 `call` 来调用父类构造函数，复制父类的实例属性给子类\n- 优点：\n\t- 解决了原型链继承中子类实例共享父类引用对象的问题，实现**多继承**\n\t- 创建子类实例时，可以向父类传递参数\n- 缺点：\n\t- 构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）\n```javascript\nfunction Parent(name) {\n  this.info = {\n    name,\n    hobby: [\"football\", \"basketball\"],\n  };\n}\n\nParent.prototype.getInfo = function () {\n  console.log(this.info);\n};\n\nfunction Child(name, age) {\n  // 继承父类属性\n  Parent.call(this, name);\n  this.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 组合继承\n- 使用**原型链继承**保证子类继承父类**原型**的属性和方法\n- 使用**构造继承**保证子类继承父类**实例**的属性和方法\n```js\nfunction Parent(name) {\n\tthis.info = {\n\t\tname,\n\t\thobby: [\"football\", \"basketball\"],\n\t};\n}\n\nParent.prototype.getInfo = function () {\n\tconsole.log(this.info);\n};\n\nfunction Child(name, age) {\n\t// 继承父类属性\n\tParent.call(this, name);\n\tthis.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 原型式继承\n- 通过拷贝对象引用方式实现，但可能导致对象被修改\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nlet child = Object.create(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\n```\n\n## 寄生式继承\n- 通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nfunction clone(original) {\n\tlet clone = Object.create(original);\n\tclone.getHobby = function () {\n\t\treturn this.hobby;\n\t};\n\treturn clone;\n}\n\nlet child = clone(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\nconsole.log(child.getHobby()); // [ 'football', 'basketball', 'soccer' ]\n\n```\n\n## 寄生组合式继承\n- 将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解\n- 优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题\n```js\nfunction Parent() {\n\tthis.name = \"parent\";\n\tthis.hobby = [\"football\", \"basketball\"];\n}\n\nParent.prototype.getHobby = function () {\n\treturn this.hobby;\n};\n\nfunction Child() {\n\tParent.call(this);\n\tthis.friend = \"child friends\";\n}\n\nfunction clone(parent, child) {\n\tchild.prototype = Object.create(parent.prototype);\n\tchild.prototype.constructor = child;\n}\n\nclone(Parent, Child);\n\nChild.prototype.getFriend = function () {\n\treturn this.friend;\n};\n\nlet child = new Child();\nconsole.log(child.getHobby()); // [ 'football', 'basketball' ]\n\tconsole.log(child.getFriend()); // child friend\n```\n\n## class 继承\n- 通过 `extends`、`super` 实现\n```javascript\nclass Parent {\n\tconstructor (name) {\n\t\tthis.name = name;\n\t}\n\tgetName() {\n\t\tconsole.log(this.name);\n\t}\n}\nclass Child extends Parent {\n\tconstructor(name) {\n\t\tsuper(name);\n\t\tthis.age = 18;\n\t}\n}\n```","source":"_posts/JS-继承实现方式整理.md","raw":"---\ntitle: JS 继承实现方式整理\ndate: 2021-12-24 15:55:02\ncategories: 前端\ntags: JavaScript\n---\n## 原型链继承\n- 将子类的原型对象指向父类的实例\n- 优点：继承了父类的模板，又继承了父类的原型对象\n- 缺点：\n\t- 无法实现多继承(因为已经指定了原型对象了)\n\t- 父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响\n\t- 创建子类时，无法向父类构造函数传参数\n```javascript\nfunction Parent() {\n\tthis.info = {\n\t\tname: \"Parent\",\n\t\tage: 18\n\t}\n}\n\nParent.prototype.getInfo = function() {\n\tconsole.log(this.info);\n}\n\nfunction Child() {\n}\n\n// 将子类的原型对象指向父类的实例\nChild.prototype = new Parent();\n\nlet child = new Child();\nchild.info.gender = \"M\";\nchild.getInfo(); // { name: 'Parent', age: 18, gender: 'M' }\n```\n\n## 构造函数继承\n- 在子类构造函数内部使用 `apply` 或 `call` 来调用父类构造函数，复制父类的实例属性给子类\n- 优点：\n\t- 解决了原型链继承中子类实例共享父类引用对象的问题，实现**多继承**\n\t- 创建子类实例时，可以向父类传递参数\n- 缺点：\n\t- 构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）\n```javascript\nfunction Parent(name) {\n  this.info = {\n    name,\n    hobby: [\"football\", \"basketball\"],\n  };\n}\n\nParent.prototype.getInfo = function () {\n  console.log(this.info);\n};\n\nfunction Child(name, age) {\n  // 继承父类属性\n  Parent.call(this, name);\n  this.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 组合继承\n- 使用**原型链继承**保证子类继承父类**原型**的属性和方法\n- 使用**构造继承**保证子类继承父类**实例**的属性和方法\n```js\nfunction Parent(name) {\n\tthis.info = {\n\t\tname,\n\t\thobby: [\"football\", \"basketball\"],\n\t};\n}\n\nParent.prototype.getInfo = function () {\n\tconsole.log(this.info);\n};\n\nfunction Child(name, age) {\n\t// 继承父类属性\n\tParent.call(this, name);\n\tthis.age = age;\n}\n\n// 继承父类方法\nChild.prototype = new Parent();\n\nlet child1 = new Child(\"wujie1\", 19);\nchild1.info.hobby.push(\"soccer\");\nconsole.log(child1.getInfo()); // { name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] }\nconsole.log(child1.age);\n\nlet child2 = new Child(\"wujie2\", 20);\nconsole.log(child2.getInfo()); // { name: 'wujie2', hobby: [ 'football', 'basketball' ] }\nconsole.log(child2.age);\n```\n\n## 原型式继承\n- 通过拷贝对象引用方式实现，但可能导致对象被修改\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nlet child = Object.create(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\n```\n\n## 寄生式继承\n- 通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法\n```js\nlet parent = {\n\tname: \"parent\",\n\thobby: [\"football\", \"basketball\"],\n};\n\nfunction clone(original) {\n\tlet clone = Object.create(original);\n\tclone.getHobby = function () {\n\t\treturn this.hobby;\n\t};\n\treturn clone;\n}\n\nlet child = clone(parent);\nchild.name = \"child\";\nchild.hobby.push(\"soccer\");\n\nconsole.log(child.name); // child\nconsole.log(child.hobby); // [ 'football', 'basketball', 'soccer' ]\nconsole.log(child.getHobby()); // [ 'football', 'basketball', 'soccer' ]\n\n```\n\n## 寄生组合式继承\n- 将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解\n- 优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题\n```js\nfunction Parent() {\n\tthis.name = \"parent\";\n\tthis.hobby = [\"football\", \"basketball\"];\n}\n\nParent.prototype.getHobby = function () {\n\treturn this.hobby;\n};\n\nfunction Child() {\n\tParent.call(this);\n\tthis.friend = \"child friends\";\n}\n\nfunction clone(parent, child) {\n\tchild.prototype = Object.create(parent.prototype);\n\tchild.prototype.constructor = child;\n}\n\nclone(Parent, Child);\n\nChild.prototype.getFriend = function () {\n\treturn this.friend;\n};\n\nlet child = new Child();\nconsole.log(child.getHobby()); // [ 'football', 'basketball' ]\n\tconsole.log(child.getFriend()); // child friend\n```\n\n## class 继承\n- 通过 `extends`、`super` 实现\n```javascript\nclass Parent {\n\tconstructor (name) {\n\t\tthis.name = name;\n\t}\n\tgetName() {\n\t\tconsole.log(this.name);\n\t}\n}\nclass Child extends Parent {\n\tconstructor(name) {\n\t\tsuper(name);\n\t\tthis.age = 18;\n\t}\n}\n```","slug":"JS-继承实现方式整理","published":1,"updated":"2022-07-30T10:24:43.401Z","_id":"cl0m014aw0009a7sj2b3h63hr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><ul>\n<li>将子类的原型对象指向父类的实例</li>\n<li>优点：继承了父类的模板，又继承了父类的原型对象</li>\n<li>缺点：<ul>\n<li>无法实现多继承(因为已经指定了原型对象了)</li>\n<li>父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</li>\n<li>创建子类时，无法向父类构造函数传参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 将子类的原型对象指向父类的实例</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'Parent', age: 18, gender: 'M' &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><ul>\n<li>在子类构造函数内部使用 <code>apply</code> 或 <code>call</code> 来调用父类构造函数，复制父类的实例属性给子类</li>\n<li>优点：<ul>\n<li>解决了原型链继承中子类实例共享父类引用对象的问题，实现<strong>多继承</strong></li>\n<li>创建子类实例时，可以向父类传递参数</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 继承父类属性</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><ul>\n<li>使用<strong>原型链继承</strong>保证子类继承父类<strong>原型</strong>的属性和方法</li>\n<li>使用<strong>构造继承</strong>保证子类继承父类<strong>实例</strong>的属性和方法<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 继承父类属性</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><ul>\n<li>通过拷贝对象引用方式实现，但可能导致对象被修改<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><ul>\n<li>通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><ul>\n<li>将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解</li>\n<li>优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> <span class=\"token string\">\"child friends\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball' ]</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child friend</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h2><ul>\n<li>通过 <code>extends</code>、<code>super</code> 实现<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><ul>\n<li>将子类的原型对象指向父类的实例</li>\n<li>优点：继承了父类的模板，又继承了父类的原型对象</li>\n<li>缺点：<ul>\n<li>无法实现多继承(因为已经指定了原型对象了)</li>\n<li>父类的所有 引用属性（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</li>\n<li>创建子类时，无法向父类构造函数传参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Parent\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 将子类的原型对象指向父类的实例</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'Parent', age: 18, gender: 'M' &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><ul>\n<li>在子类构造函数内部使用 <code>apply</code> 或 <code>call</code> 来调用父类构造函数，复制父类的实例属性给子类</li>\n<li>优点：<ul>\n<li>解决了原型链继承中子类实例共享父类引用对象的问题，实现<strong>多继承</strong></li>\n<li>创建子类实例时，可以向父类传递参数</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>构造继承只能继承父类的实例属性和方法，不能继承父类原型的属性和方法（方法属性写在构造函数中，每次创建示例都会被初始化）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 继承父类属性</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><ul>\n<li>使用<strong>原型链继承</strong>保证子类继承父类<strong>原型</strong>的属性和方法</li>\n<li>使用<strong>构造继承</strong>保证子类继承父类<strong>实例</strong>的属性和方法<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t\tname<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 继承父类属性</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 继承父类方法</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild1<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie1', hobby: [ 'football', 'basketball', 'soccer' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wujie2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'wujie2', hobby: [ 'football', 'basketball' ] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child2<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><ul>\n<li>通过拷贝对象引用方式实现，但可能导致对象被修改<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><ul>\n<li>通过获取对象的浅拷贝，再对浅拷贝方法增强（添加方法），也就是在原型式寄生的基础上再添加方法<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tclone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"child\"</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"soccer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball', 'soccer' ]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h2><ul>\n<li>将组合继承，寄生式继承组合起来实现的继承，是所有继承方式的最优解</li>\n<li>优点：解决了组合继承父类会被调用两次和属性在不同层级会重复的问题<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"football\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"basketball\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHobby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> <span class=\"token string\">\"child friends\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tchild<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>Parent<span class=\"token punctuation\">,</span> Child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getHobby</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'football', 'basketball' ]</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child friend</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h2><ul>\n<li>通过 <code>extends</code>、<code>super</code> 实现<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n"},{"title":"Hello World","date":"2021-11-25T10:05:23.000Z","_content":"\nHey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-11-25 18:05:23\ncategories: 其他\ntags: 程序人生\n---\n\nHey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步\n","slug":"hello-world","published":1,"updated":"2022-07-30T10:24:45.663Z","_id":"cl0m014aw000aa7sj0edug67o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hey wujie, 这是你发布在网络上的第一篇博客，希望你不忘初心，无限进步</p>\n"},{"title":"vue3个人常用通信方式总结","date":"2021-12-06T07:11:16.000Z","_content":"\n## props\n\n- Vue3 子组件可以通过 props 接受父组件的传值\n- 在 setup() 中可以通过 `props.value` 来访问父组件传值\n- 父组件传值举例\n\n  ```html\n  <template>\n    <child-component :value=\"value\" />\n  </template>\n  ```\n\n- 子组件接受并使用父组件传递值\n  <!--more-->\n\n      ```html\n      <template>\n      \t{{ fatherValue }}\n      </template>\n      <script lang=\"js\">\n          import { defineComponent, ref } from \"vue\";\n\n          export default defineComponent ({\n              name: \"ChildComponent\",\n              props: {\n                  value: {\n                      type: String,\n                      default: \"\"\n                  }\n              },\n              setup( props ) {\n                  const fatherValue = ref(\"\");\n\n                  fatherValue = props.value\n                  console.log( fatherValue )\n\n                  return {\n                      fatherValue\n                  }\n              }\n          })\n      </script>\n      ```\n\n## refs\n\n- 通过 refs ，父组件可以直接获取子组件实例，并向子组件传值\n- 父组件举例\n\n  ```html\n  <template>\n    <child ref=\"childRef\" />\n    <button @click=\"sendValue()\">Change Child Value</button>\n  </template>\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"ChildComponent\",\n        props: {\n            value: {\n                type: String,\n                default: \"\"\n            }\n        },\n        setup( props ) {\n            const childRef = ref(\"\");\n\n            const sendValue = () => {\n                console.log(\"childRef\", childRef.value);\n\n                // 调用子组件方法\n                childRef.value.acceptValue(\"newValue\");\n            }\n\n            return {\n                fatherValue\n            }\n        }\n    })\n  </script>\n  ```\n\n- 子组件举例\n\n  ```html\n  <template> Son: {{ valueRef }} </template>\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"ChildComponent\",\n        props: {\n            value: {\n                type: String,\n                default: \"\"\n            }\n        },\n        setup( props ) {\n            const valueRef = ref(\"\");\n\n            const acceptValue = (value) => {\n            \tvalueRef.value = value;\n            }\n\n            return {\n                valueRef,\n                acceptValue\n            }\n        }\n    })\n  </script>\n  ```\n\n## emits\n\n- 子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数\n- 父亲组件举例\n\n  ```html\n  <template> <child-component :add-child=\"addChildMethod()\" </template>\n\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"FatherComponent\",\n        setup( props ) {\n            const addChildMethod = () => {\n                // mehtod\n            }\n            return {\n                addChildMethod\n            }\n        }\n    })\n  </script>\n  ```\n\n- 子组件举例\n  ```html\n  <template>\n    <div @click=\"$emit('addChild')\">\n      <!-- some -->\n    </div>\n  </template>\n  ```\n","source":"_posts/vue3个人常用通信方式总结.md","raw":"---\ntitle: vue3个人常用通信方式总结\ndate: 2021-12-06 15:11:16\ncategories: 前端\ntags: vue\n---\n\n## props\n\n- Vue3 子组件可以通过 props 接受父组件的传值\n- 在 setup() 中可以通过 `props.value` 来访问父组件传值\n- 父组件传值举例\n\n  ```html\n  <template>\n    <child-component :value=\"value\" />\n  </template>\n  ```\n\n- 子组件接受并使用父组件传递值\n  <!--more-->\n\n      ```html\n      <template>\n      \t{{ fatherValue }}\n      </template>\n      <script lang=\"js\">\n          import { defineComponent, ref } from \"vue\";\n\n          export default defineComponent ({\n              name: \"ChildComponent\",\n              props: {\n                  value: {\n                      type: String,\n                      default: \"\"\n                  }\n              },\n              setup( props ) {\n                  const fatherValue = ref(\"\");\n\n                  fatherValue = props.value\n                  console.log( fatherValue )\n\n                  return {\n                      fatherValue\n                  }\n              }\n          })\n      </script>\n      ```\n\n## refs\n\n- 通过 refs ，父组件可以直接获取子组件实例，并向子组件传值\n- 父组件举例\n\n  ```html\n  <template>\n    <child ref=\"childRef\" />\n    <button @click=\"sendValue()\">Change Child Value</button>\n  </template>\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"ChildComponent\",\n        props: {\n            value: {\n                type: String,\n                default: \"\"\n            }\n        },\n        setup( props ) {\n            const childRef = ref(\"\");\n\n            const sendValue = () => {\n                console.log(\"childRef\", childRef.value);\n\n                // 调用子组件方法\n                childRef.value.acceptValue(\"newValue\");\n            }\n\n            return {\n                fatherValue\n            }\n        }\n    })\n  </script>\n  ```\n\n- 子组件举例\n\n  ```html\n  <template> Son: {{ valueRef }} </template>\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"ChildComponent\",\n        props: {\n            value: {\n                type: String,\n                default: \"\"\n            }\n        },\n        setup( props ) {\n            const valueRef = ref(\"\");\n\n            const acceptValue = (value) => {\n            \tvalueRef.value = value;\n            }\n\n            return {\n                valueRef,\n                acceptValue\n            }\n        }\n    })\n  </script>\n  ```\n\n## emits\n\n- 子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数\n- 父亲组件举例\n\n  ```html\n  <template> <child-component :add-child=\"addChildMethod()\" </template>\n\n  <script lang=\"js\">\n    import { defineComponent, ref } from \"vue\";\n\n    export default defineComponent ({\n        name: \"FatherComponent\",\n        setup( props ) {\n            const addChildMethod = () => {\n                // mehtod\n            }\n            return {\n                addChildMethod\n            }\n        }\n    })\n  </script>\n  ```\n\n- 子组件举例\n  ```html\n  <template>\n    <div @click=\"$emit('addChild')\">\n      <!-- some -->\n    </div>\n  </template>\n  ```\n","slug":"vue3个人常用通信方式总结","published":1,"updated":"2022-07-30T10:24:32.154Z","_id":"cl0m014ay000ea7sjddkw8ook","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li><p>Vue3 子组件可以通过 props 接受父组件的传值</p>\n</li>\n<li><p>在 setup() 中可以通过 <code>props.value</code> 来访问父组件传值</p>\n</li>\n<li><p>父组件传值举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child-component</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件接受并使用父组件传递值</p>\n<span id=\"more\"></span>\n\n<pre><code><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&#123;&#123; fatherValue &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> fatherValue <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            fatherValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> fatherValue <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2><ul>\n<li><p>通过 refs ，父组件可以直接获取子组件实例，并向子组件传值</p>\n</li>\n<li><p>父组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childRef<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendValue()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change Child Value<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> childRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childRef\"</span><span class=\"token punctuation\">,</span> childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 调用子组件方法</span>\n              childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">acceptValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              fatherValue\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span> Son: &#123;&#123; valueRef &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> valueRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acceptValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          \tvalueRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              valueRef<span class=\"token punctuation\">,</span>\n              acceptValue\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"emits\"><a href=\"#emits\" class=\"headerlink\" title=\"emits\"></a>emits</h2><ul>\n<li><p>子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数</p>\n</li>\n<li><p>父亲组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span> &lt;child-component :add-child=\"addChildMethod()\" <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FatherComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addChildMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// mehtod</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              addChildMethod\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$emit(<span class=\"token punctuation\">'</span>addChild<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- some --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h2><ul>\n<li><p>Vue3 子组件可以通过 props 接受父组件的传值</p>\n</li>\n<li><p>在 setup() 中可以通过 <code>props.value</code> 来访问父组件传值</p>\n</li>\n<li><p>父组件传值举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child-component</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件接受并使用父组件传递值</p>","more":"<pre><code><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n\t&#123;&#123; fatherValue &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> fatherValue <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            fatherValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>value\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> fatherValue <span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n                fatherValue\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"refs\"></a>refs</h2><ul>\n<li><p>通过 refs ，父组件可以直接获取子组件实例，并向子组件传值</p>\n</li>\n<li><p>父组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>childRef<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendValue()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Change Child Value<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> childRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childRef\"</span><span class=\"token punctuation\">,</span> childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              <span class=\"token comment\">// 调用子组件方法</span>\n              childRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">acceptValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newValue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              fatherValue\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span> Son: &#123;&#123; valueRef &#125;&#125; <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ChildComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> valueRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acceptValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          \tvalueRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              valueRef<span class=\"token punctuation\">,</span>\n              acceptValue\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"emits\"><a href=\"#emits\" class=\"headerlink\" title=\"emits\"></a>emits</h2><ul>\n<li><p>子组件可以通过 emit 暴露属性，父组件通过 emit 暴露属性操作子组件，比如：点击子组件触发了一个父组件大函数</p>\n</li>\n<li><p>父亲组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span> &lt;child-component :add-child=\"addChildMethod()\" <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"FatherComponent\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">props</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addChildMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">// mehtod</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n              addChildMethod\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>子组件举例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$emit(<span class=\"token punctuation\">'</span>addChild<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- some --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>"},{"title":"webpack入门-loader","date":"2021-12-05T03:01:46.000Z","_content":"\n## loader 基础\n\n- 将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件\n- 在 module.rule 配置，必须包含 test 和 use 属性\n\n  - `test`： 标识出应该被对应的 loader 进行转换的某个或某些文件\n  - `use`：进行转换时，应该使用哪个 loader\n\n  ```javascript\n  const path = require(\"path\");\n\n  const config = {\n    module: {\n      rules: [\n        { test: /\\.css$/, use: \"css-loader\" },\n        { test: /\\.ts$/, use: \"ts-loader\" },\n      ],\n    },\n  };\n\n  module.exports = config;\n  ```\n\n- 使用 loader 的三种方式\n\n  - 配置（推荐）：在 webpack.config.js 中配置\n  - 内联：在每个 import 语句中显式指定 loader\n    `import Styles from 'style-loader!css-loader?modules!./styles.css';`\n  - CLI：在 shell 命令中指定它们\n    `webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n\n- loader 特性\n  - loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader\n  - loader 可同步也可异步\n  - loader 可以在 Node.js 环境运行\n  - loader 能够接受查询参数\n  - loader 可以使用 `opotions` 对象进行配置\n  - 可以将普通 npm 模块导出一个 loader\n","source":"_posts/webpack入门-loader.md","raw":"---\ntitle: webpack入门-loader\ndate: 2021-12-05 11:01:46\ncategories: 前端\ntags: webpack\n---\n\n## loader 基础\n\n- 将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件\n- 在 module.rule 配置，必须包含 test 和 use 属性\n\n  - `test`： 标识出应该被对应的 loader 进行转换的某个或某些文件\n  - `use`：进行转换时，应该使用哪个 loader\n\n  ```javascript\n  const path = require(\"path\");\n\n  const config = {\n    module: {\n      rules: [\n        { test: /\\.css$/, use: \"css-loader\" },\n        { test: /\\.ts$/, use: \"ts-loader\" },\n      ],\n    },\n  };\n\n  module.exports = config;\n  ```\n\n- 使用 loader 的三种方式\n\n  - 配置（推荐）：在 webpack.config.js 中配置\n  - 内联：在每个 import 语句中显式指定 loader\n    `import Styles from 'style-loader!css-loader?modules!./styles.css';`\n  - CLI：在 shell 命令中指定它们\n    `webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n\n- loader 特性\n  - loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader\n  - loader 可同步也可异步\n  - loader 可以在 Node.js 环境运行\n  - loader 能够接受查询参数\n  - loader 可以使用 `opotions` 对象进行配置\n  - 可以将普通 npm 模块导出一个 loader\n","slug":"webpack入门-loader","published":1,"updated":"2022-07-30T10:24:25.826Z","_id":"cl0m014az000ga7sj2fg73nhc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"loader-基础\"><a href=\"#loader-基础\" class=\"headerlink\" title=\"loader 基础\"></a>loader 基础</h2><ul>\n<li><p>将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件</p>\n</li>\n<li><p>在 module.rule 配置，必须包含 test 和 use 属性</p>\n<ul>\n<li><code>test</code>： 标识出应该被对应的 loader 进行转换的某个或某些文件</li>\n<li><code>use</code>：进行转换时，应该使用哪个 loader</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css-loader\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-loader\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用 loader 的三种方式</p>\n<ul>\n<li>配置（推荐）：在 webpack.config.js 中配置</li>\n<li>内联：在每个 import 语句中显式指定 loader<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></li>\n<li>CLI：在 shell 命令中指定它们<br><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code></li>\n</ul>\n</li>\n<li><p>loader 特性</p>\n<ul>\n<li>loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader</li>\n<li>loader 可同步也可异步</li>\n<li>loader 可以在 Node.js 环境运行</li>\n<li>loader 能够接受查询参数</li>\n<li>loader 可以使用 <code>opotions</code> 对象进行配置</li>\n<li>可以将普通 npm 模块导出一个 loader</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"loader-基础\"><a href=\"#loader-基础\" class=\"headerlink\" title=\"loader 基础\"></a>loader 基础</h2><ul>\n<li><p>将所有文件转换成 webpack 能够处理的模块，用于处理非 JS 文件</p>\n</li>\n<li><p>在 module.rule 配置，必须包含 test 和 use 属性</p>\n<ul>\n<li><code>test</code>： 标识出应该被对应的 loader 进行转换的某个或某些文件</li>\n<li><code>use</code>：进行转换时，应该使用哪个 loader</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css-loader\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-loader\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用 loader 的三种方式</p>\n<ul>\n<li>配置（推荐）：在 webpack.config.js 中配置</li>\n<li>内联：在每个 import 语句中显式指定 loader<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></li>\n<li>CLI：在 shell 命令中指定它们<br><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code></li>\n</ul>\n</li>\n<li><p>loader 特性</p>\n<ul>\n<li>loader 支持链式传递，反向执行，loader 链中的第一个 loader 返回值给下一个 loader</li>\n<li>loader 可同步也可异步</li>\n<li>loader 可以在 Node.js 环境运行</li>\n<li>loader 能够接受查询参数</li>\n<li>loader 可以使用 <code>opotions</code> 对象进行配置</li>\n<li>可以将普通 npm 模块导出一个 loader</li>\n</ul>\n</li>\n</ul>\n"},{"title":"webpack入门-入口与出口","date":"2021-12-01T23:27:44.000Z","_content":"\n## 入口及基础配置\n\n- webpack 该用哪个模块作为构建依赖图的开始\n- 在 `entry` 配置入口，可以指定一个或多个入口\n`javascript module.exports = { entry: './path/to/my/entry/file.js' }; `\n<!--more-->\n- 单页面场景配置\n  - 将应用入口和第三方库分离\n  - 可以使用 `CommonsChunkPlugin` 从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，`__webpack_require__()` 调用\n  ```javascript\n  const config = {\n    entry: {\n      app: \"./src/app.js\",\n      vendors: \"./src/vendors.js\",\n    },\n  };\n  ```\n- 多页面场景配置\n  - 不同页面入口分开配置，进入新页面时独立加载 html 和对应引用\n  - 可以使用 `CommonsChunkPlugin` 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果\n  ```javascript\n  const config = {\n    entry: {\n      pageOne: \"./src/pageOne/index.js\",\n      pageTwo: \"./src/pageTwo/index.js\",\n      pageThree: \"./src/pageThree/index.js\",\n    },\n  };\n  ```\n\n## 出口及基础配置\n\n- webpack 输出 bundles 的目录及命名方式配置，默认为 `./dist`\n- **可以指定多个入口，但只能有一个出口（output）**\n- 在 `output` 字段配置：输出为一个对象，输出路径和文件名\n\n  ```javascript\n  const path = require(\"path\");\n\n  module.exports = {\n    output: {\n      path: path.resolve(__dirname, \"dist\"),\n      filename: \"my-first-webpack.bundle.js\",\n    },\n  };\n  ```\n\n- 对于多文件入口，使用占位符保持文件名正确\n\n  ```javascript\n  {\n    entry: {\n  \tapp: './src/app.js',\n  \tsearch: './src/search.js'\n    },\n    output: {\n  \tfilename: '[name].js',\n  \tpath: __dirname + '/dist'\n    }\n  }\n\n  // 写入到硬盘：./dist/app.js, ./dist/search.js\n  ```\n\n- 在编译时不知道最终输出文件的 `publicPath` 的情况下，`publicPath` 留空，并且在入口起点设置 `__webpack_public_path__`\n\n  ```javascript\n  __webpack_public_path__ = myRuntimePublicPath;\n\n  // 剩余的应用程序入口\n  ```\n","source":"_posts/webpack入门-入口与出口.md","raw":"---\ntitle: webpack入门-入口与出口\ndate: 2021-12-02 07:27:44\ncategories: 前端\ntags: webpack\n---\n\n## 入口及基础配置\n\n- webpack 该用哪个模块作为构建依赖图的开始\n- 在 `entry` 配置入口，可以指定一个或多个入口\n`javascript module.exports = { entry: './path/to/my/entry/file.js' }; `\n<!--more-->\n- 单页面场景配置\n  - 将应用入口和第三方库分离\n  - 可以使用 `CommonsChunkPlugin` 从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，`__webpack_require__()` 调用\n  ```javascript\n  const config = {\n    entry: {\n      app: \"./src/app.js\",\n      vendors: \"./src/vendors.js\",\n    },\n  };\n  ```\n- 多页面场景配置\n  - 不同页面入口分开配置，进入新页面时独立加载 html 和对应引用\n  - 可以使用 `CommonsChunkPlugin` 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果\n  ```javascript\n  const config = {\n    entry: {\n      pageOne: \"./src/pageOne/index.js\",\n      pageTwo: \"./src/pageTwo/index.js\",\n      pageThree: \"./src/pageThree/index.js\",\n    },\n  };\n  ```\n\n## 出口及基础配置\n\n- webpack 输出 bundles 的目录及命名方式配置，默认为 `./dist`\n- **可以指定多个入口，但只能有一个出口（output）**\n- 在 `output` 字段配置：输出为一个对象，输出路径和文件名\n\n  ```javascript\n  const path = require(\"path\");\n\n  module.exports = {\n    output: {\n      path: path.resolve(__dirname, \"dist\"),\n      filename: \"my-first-webpack.bundle.js\",\n    },\n  };\n  ```\n\n- 对于多文件入口，使用占位符保持文件名正确\n\n  ```javascript\n  {\n    entry: {\n  \tapp: './src/app.js',\n  \tsearch: './src/search.js'\n    },\n    output: {\n  \tfilename: '[name].js',\n  \tpath: __dirname + '/dist'\n    }\n  }\n\n  // 写入到硬盘：./dist/app.js, ./dist/search.js\n  ```\n\n- 在编译时不知道最终输出文件的 `publicPath` 的情况下，`publicPath` 留空，并且在入口起点设置 `__webpack_public_path__`\n\n  ```javascript\n  __webpack_public_path__ = myRuntimePublicPath;\n\n  // 剩余的应用程序入口\n  ```\n","slug":"webpack入门-入口与出口","published":1,"updated":"2022-07-30T10:24:28.951Z","_id":"cl0m014b1000la7sj0a3sgd9i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"入口及基础配置\"><a href=\"#入口及基础配置\" class=\"headerlink\" title=\"入口及基础配置\"></a>入口及基础配置</h2><ul>\n<li>webpack 该用哪个模块作为构建依赖图的开始</li>\n<li>在 <code>entry</code> 配置入口，可以指定一个或多个入口<br><code>javascript module.exports = &#123; entry: &#39;./path/to/my/entry/file.js&#39; &#125;; </code><span id=\"more\"></span></li>\n<li>单页面场景配置<ul>\n<li>将应用入口和第三方库分离</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，<code>__webpack_require__()</code> 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/app.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/vendors.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>多页面场景配置<ul>\n<li>不同页面入口分开配置，进入新页面时独立加载 html 和对应引用</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">pageOne</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageOne/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">pageTwo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageTwo/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">pageThree</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageThree/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"出口及基础配置\"><a href=\"#出口及基础配置\" class=\"headerlink\" title=\"出口及基础配置\"></a>出口及基础配置</h2><ul>\n<li><p>webpack 输出 bundles 的目录及命名方式配置，默认为 <code>./dist</code></p>\n</li>\n<li><p><strong>可以指定多个入口，但只能有一个出口（output）</strong></p>\n</li>\n<li><p>在 <code>output</code> 字段配置：输出为一个对象，输出路径和文件名</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-first-webpack.bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对于多文件入口，使用占位符保持文件名正确</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">search</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/search.js'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/dist'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 留空，并且在入口起点设置 <code>__webpack_public_path__</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">__webpack_public_path__ <span class=\"token operator\">=</span> myRuntimePublicPath<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 剩余的应用程序入口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"入口及基础配置\"><a href=\"#入口及基础配置\" class=\"headerlink\" title=\"入口及基础配置\"></a>入口及基础配置</h2><ul>\n<li>webpack 该用哪个模块作为构建依赖图的开始</li>\n<li>在 <code>entry</code> 配置入口，可以指定一个或多个入口<br><code>javascript module.exports = &#123; entry: &#39;./path/to/my/entry/file.js&#39; &#125;; </code>","more":"</li>\n<li>单页面场景配置<ul>\n<li>将应用入口和第三方库分离</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 从「应用程序 bundle」中提取 vendor 引用到 vendor bundle，把引用 vendor 的部分替换为 ，<code>__webpack_require__()</code> 调用<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/app.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/vendors.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>多页面场景配置<ul>\n<li>不同页面入口分开配置，进入新页面时独立加载 html 和对应引用</li>\n<li>可以使用 <code>CommonsChunkPlugin</code> 为每个页面间的应用程序共享代码创建 bundle，实现代码复用的效果<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">pageOne</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageOne/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">pageTwo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageTwo/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">pageThree</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src/pageThree/index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"出口及基础配置\"><a href=\"#出口及基础配置\" class=\"headerlink\" title=\"出口及基础配置\"></a>出口及基础配置</h2><ul>\n<li><p>webpack 输出 bundles 的目录及命名方式配置，默认为 <code>./dist</code></p>\n</li>\n<li><p><strong>可以指定多个入口，但只能有一个出口（output）</strong></p>\n</li>\n<li><p>在 <code>output</code> 字段配置：输出为一个对象，输出路径和文件名</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-first-webpack.bundle.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对于多文件入口，使用占位符保持文件名正确</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">search</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/search.js'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/dist'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 写入到硬盘：./dist/app.js, ./dist/search.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>在编译时不知道最终输出文件的 <code>publicPath</code> 的情况下，<code>publicPath</code> 留空，并且在入口起点设置 <code>__webpack_public_path__</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">__webpack_public_path__ <span class=\"token operator\">=</span> myRuntimePublicPath<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 剩余的应用程序入口</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>"},{"title":"你不知道的 JS 学习笔记：作用域和闭包","date":"2022-02-04T06:50:04.000Z","_content":"## 第一章：作用域是什么\n### 1.1 编译原理\n- 编译过程\n\t- 分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元\n\t\t- 比如： `let a = 2;` 被分解为：`let、a、=、2、；` 5 个词法单元\n\t\t- 分词：无状态解析规则，词法分析：有状态解析规则\n\t- 解析 / 语法分析：词法单元 -> 抽象语法树（Abstract Syntax Tree，AST）\n\t- 代码生成：AST -> 可执行代码\n- JS 代码在执行前都需要编译\n\n### 1.2 理解作用域\n- 编译过程重要参与对象\n\t- 引擎：负责 JS 编译和执行过程\n\t- 编译器：负责编译过程\n\t- 作用域：**收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限**\n- 变量赋值的两个操作\n\t- 在当前作用域中声明一个变量（如果之前存在则忽略）\n\t- 运行时引擎在作用域中查找该变量，找到了就赋值\n- 编译器基础术语\n\t- 赋值操作使用 LHS，获取目标变量的值使用 RHS\n\t\t- LHS：从左侧查找，即：查找某个容器本身\n\t\t\t- 比如：`a = 2`，需要找到为 = 2 赋值的目标\n\t\t- RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）\n\t\t\t- 比如：`console.log(a);`，这里 a 没有被赋值，但需要找到 a 对应的 value\n\n### 1.3 作用域嵌套\n- 在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止\n\n### 1.4 异常\n- 如果在 RHS 在任何作用域都找不到，会抛出 `ReferenceError` 异常\n- 非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量\n- **严格模式禁止自动隐式或自动创建全局变量**\n- 如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 `TypeError` 异常\n- `ReferenceError` 说明作用域判断异常，`TypeError` 说明作用域判断成功但对值的操作失败了\n\n## 第二章：词法作用域\n### 2.1 词法阶段\n- 词法作用域由变量和块作用于写在哪里决定\n- 作用域查找会在匹配第一个标识符时停止\n\n### 2.2 欺骗词法\n- 欺骗词法作用域会导致性能下降\n- `eval([str]) `函数：\n\t- 通常被用来执行动态创建的代码\n\t- 字符串作为参数，内容视未好行书写时就存在于程序中的位置\n\t- 可以修改词法作用域\n- with 关键字\n\t- 重复引用同一个对象中多个属性的快捷方式\n\t- 将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域\n\t- 非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量\n\t```js\n\t  var obj = {\n\t\ta: 1,\n\t\tb: 2\n\t  }\n\n\t  function foo(obj) {\n\t\twith (obj) {\n\t\t  a = 2;\n\t\t}\n\t  }\n\n\t  console.log(foo(obj.a)); // undefined\n\t  console.log(foo(a)); // 2\n\n\t  ```\n\t- with 根据传递的对象凭空创建了一个全新的词法作用域\n\n### 2.3 性能\n- JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的\n\n## 第三章：函数作用域和块作用域\n### 3.1 函数中的作用域\n- 函数的全部变量在函数内部都可以被访问，从外部则无法访问\n\n### 3.2 隐藏内部实现\n- 最小特权原则：软件设计中，应该**最小限度**的暴露必要的内容，比如内部函数或者内部类\n- 隐藏作用域的变量和函数可以避免同名标识符的冲突\n\t- 避免全局变量的使用\n\t- 全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性\n\t- 模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中\n\n### 3.3 函数作用域\n- 函数表达式\n\t- 声明函数的 function 不在第一个位置\n\t```js\n\t  var a = 2;\n\n\t  (function foo() {\n\t\tvar a = 3;\n\t\tconsole.log( a );\n\t  })();\n\n\t  console.log( a ) // 2\n\t  ```\n\t- 函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域\n- 匿名函数：省略函数名称\n\t```js\n\t  setTimeout( function() {\n\t\tconsole.log( 1 );\n\t  }, 1000);\n\t  ```\n- 具名函数：声明函数名称\n- 立即执行函数表达式（IIFE，Immediately Invoked Function Expression）\n\t- 函数表达式末尾加上一个  `()` 让函数立即执行\n\t- 可以当作函数调用并传递参数\n\t```js\n\t  var a = 2;\n\n\t  (function foo( global) {\n\t\tvar a = 3;\n\t\tconsole.log( a ); // 3\n\t\tconsole.log( global.a ); // 2\n\t  })(window);\n\t  ```\n\n### 3.4 块作用域\n- 使用 var 申明变量会属于外部作用域\n- try ... catch 的 catch 部分会创建块作用域\n- let 关键字\n\t- 将变量绑定到所在的作用域中，外部变量无法访问\n\t- let 声明的代码在 let 之前无法被访问\n\t```js\n\t  {\n\t\tconsole.log( bar ); // ReferenceError\n\t\tlet bar = 2;\n\t  }\n\t  ```\n- const 关键字\n\t- 可以创建块作用域变量，但值是固定的\n\n## 第四章：提升\n- `var a = 2;` ，`var 2` 属于编译阶段任务，`a = 2` 属于解释阶段任务\n- 提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端\n- var 的变量声明会被提升\n- 函数的声明会被提升，**函数表达式的声明不会被提升**\n\t- 因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError\n\n## 第五章：作用域闭包\n- 当函数可以记住并访问所在的词法作用域时，就产生了**闭包**，即使函数是在当前词法作用域之外执行\n\t```js\n\t  function foo() {\n\t    var a = 2;\n\n\t    function bar() {\n\t      console.log( a );\n\t    }\n\n\t    return bar;\n\t  }\n\n\t  var baz = foo();\n\t  baz(); // 2\n\t  ```\n\t- bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递\n\t- **在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包**\n\t- **函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包**\n\t- 闭包使得函数可以继续访问定义时对词法作用域\n- 闭包应用示例：setTimeout\n\t```js\n\t  function wait(message) {\n\t    setTimeout( function timer() {\n\t      console.log( message );\n\t    }, 1000);\n\t  }\n\t  wait(\"hello message\");\n\t  ```\n\t- timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用\n- 循环和闭包\n\t- 循环输出问题\n\t\t```js\n\t\t  for (var i = 1; i <= 5; i++) {\n\t\t    setTimeout(function timer() {\n\t\t      console.log(i);\n\t\t    }, i * 1000);\n\t\t  }\n\t\t  ```\n\t\t- 以上代码会连续输出 5 个 6\n\t\t- **延迟函数的回调会在循环结束时执行**，即使延迟时间为 0\n\t\t- 问题原因：**i 是共享的全局作用域**，所以即使循环了 5 次，也相当于只有一个变量\n\t\t- 解决方案\n\t\t\t- 使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）\n\t\t\t```js\n\t\t\t  for (var i = 1; i <= 5; i++) {\n\t\t\t\t(function (j) {\n\t\t\t\t  setTimeout(function timer() {\n\t\t\t\t\tconsole.log(j);\n\t\t\t\t  }, i * 1000);\n\t\t\t\t})(i);\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- 使用 let 关键字\n\t\t\t\t- 将一个块转换成一个可以被关闭的作用域\n            ```js\n            for (let i = 1; i <= 5; i++) {\n            setTimeout(function timer() {\n                console.log(i);\n            }, i * 1000);\n            }\n            ```\n- 模块\n\t- 返回一个含有属性引用的对象将函数传递到词发作用域外部\n\t- 类似 React 和 Vue 的 hook 模式\n\t```js\n\t  function useState() {\n\t    var someThing = \"wujie\";\n\n\t    function getSomeThing() {\n\t      return someThing;\n\t    }\n\n\t    return {\n\t      getSomeThing: getSomeThing,\n\t    };\n\t  }\n\n\t  var state = useState();\n\t  console.log(state.getSomeThing()); // wujie\n\t  ```\n\t- 模块模式的两个必备条件\n\t\t- 必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）\n\t\t- 封闭函数必须返回至少一个内部函数（闭包）","source":"_posts/作用域和闭包.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：作用域和闭包\ndate: 2022-02-04 14:50:04\ncategories: 前端\ntags: JavaScript\n---\n## 第一章：作用域是什么\n### 1.1 编译原理\n- 编译过程\n\t- 分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元\n\t\t- 比如： `let a = 2;` 被分解为：`let、a、=、2、；` 5 个词法单元\n\t\t- 分词：无状态解析规则，词法分析：有状态解析规则\n\t- 解析 / 语法分析：词法单元 -> 抽象语法树（Abstract Syntax Tree，AST）\n\t- 代码生成：AST -> 可执行代码\n- JS 代码在执行前都需要编译\n\n### 1.2 理解作用域\n- 编译过程重要参与对象\n\t- 引擎：负责 JS 编译和执行过程\n\t- 编译器：负责编译过程\n\t- 作用域：**收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限**\n- 变量赋值的两个操作\n\t- 在当前作用域中声明一个变量（如果之前存在则忽略）\n\t- 运行时引擎在作用域中查找该变量，找到了就赋值\n- 编译器基础术语\n\t- 赋值操作使用 LHS，获取目标变量的值使用 RHS\n\t\t- LHS：从左侧查找，即：查找某个容器本身\n\t\t\t- 比如：`a = 2`，需要找到为 = 2 赋值的目标\n\t\t- RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）\n\t\t\t- 比如：`console.log(a);`，这里 a 没有被赋值，但需要找到 a 对应的 value\n\n### 1.3 作用域嵌套\n- 在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止\n\n### 1.4 异常\n- 如果在 RHS 在任何作用域都找不到，会抛出 `ReferenceError` 异常\n- 非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量\n- **严格模式禁止自动隐式或自动创建全局变量**\n- 如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 `TypeError` 异常\n- `ReferenceError` 说明作用域判断异常，`TypeError` 说明作用域判断成功但对值的操作失败了\n\n## 第二章：词法作用域\n### 2.1 词法阶段\n- 词法作用域由变量和块作用于写在哪里决定\n- 作用域查找会在匹配第一个标识符时停止\n\n### 2.2 欺骗词法\n- 欺骗词法作用域会导致性能下降\n- `eval([str]) `函数：\n\t- 通常被用来执行动态创建的代码\n\t- 字符串作为参数，内容视未好行书写时就存在于程序中的位置\n\t- 可以修改词法作用域\n- with 关键字\n\t- 重复引用同一个对象中多个属性的快捷方式\n\t- 将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域\n\t- 非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量\n\t```js\n\t  var obj = {\n\t\ta: 1,\n\t\tb: 2\n\t  }\n\n\t  function foo(obj) {\n\t\twith (obj) {\n\t\t  a = 2;\n\t\t}\n\t  }\n\n\t  console.log(foo(obj.a)); // undefined\n\t  console.log(foo(a)); // 2\n\n\t  ```\n\t- with 根据传递的对象凭空创建了一个全新的词法作用域\n\n### 2.3 性能\n- JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的\n\n## 第三章：函数作用域和块作用域\n### 3.1 函数中的作用域\n- 函数的全部变量在函数内部都可以被访问，从外部则无法访问\n\n### 3.2 隐藏内部实现\n- 最小特权原则：软件设计中，应该**最小限度**的暴露必要的内容，比如内部函数或者内部类\n- 隐藏作用域的变量和函数可以避免同名标识符的冲突\n\t- 避免全局变量的使用\n\t- 全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性\n\t- 模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中\n\n### 3.3 函数作用域\n- 函数表达式\n\t- 声明函数的 function 不在第一个位置\n\t```js\n\t  var a = 2;\n\n\t  (function foo() {\n\t\tvar a = 3;\n\t\tconsole.log( a );\n\t  })();\n\n\t  console.log( a ) // 2\n\t  ```\n\t- 函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域\n- 匿名函数：省略函数名称\n\t```js\n\t  setTimeout( function() {\n\t\tconsole.log( 1 );\n\t  }, 1000);\n\t  ```\n- 具名函数：声明函数名称\n- 立即执行函数表达式（IIFE，Immediately Invoked Function Expression）\n\t- 函数表达式末尾加上一个  `()` 让函数立即执行\n\t- 可以当作函数调用并传递参数\n\t```js\n\t  var a = 2;\n\n\t  (function foo( global) {\n\t\tvar a = 3;\n\t\tconsole.log( a ); // 3\n\t\tconsole.log( global.a ); // 2\n\t  })(window);\n\t  ```\n\n### 3.4 块作用域\n- 使用 var 申明变量会属于外部作用域\n- try ... catch 的 catch 部分会创建块作用域\n- let 关键字\n\t- 将变量绑定到所在的作用域中，外部变量无法访问\n\t- let 声明的代码在 let 之前无法被访问\n\t```js\n\t  {\n\t\tconsole.log( bar ); // ReferenceError\n\t\tlet bar = 2;\n\t  }\n\t  ```\n- const 关键字\n\t- 可以创建块作用域变量，但值是固定的\n\n## 第四章：提升\n- `var a = 2;` ，`var 2` 属于编译阶段任务，`a = 2` 属于解释阶段任务\n- 提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端\n- var 的变量声明会被提升\n- 函数的声明会被提升，**函数表达式的声明不会被提升**\n\t- 因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError\n\n## 第五章：作用域闭包\n- 当函数可以记住并访问所在的词法作用域时，就产生了**闭包**，即使函数是在当前词法作用域之外执行\n\t```js\n\t  function foo() {\n\t    var a = 2;\n\n\t    function bar() {\n\t      console.log( a );\n\t    }\n\n\t    return bar;\n\t  }\n\n\t  var baz = foo();\n\t  baz(); // 2\n\t  ```\n\t- bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递\n\t- **在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包**\n\t- **函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包**\n\t- 闭包使得函数可以继续访问定义时对词法作用域\n- 闭包应用示例：setTimeout\n\t```js\n\t  function wait(message) {\n\t    setTimeout( function timer() {\n\t      console.log( message );\n\t    }, 1000);\n\t  }\n\t  wait(\"hello message\");\n\t  ```\n\t- timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用\n- 循环和闭包\n\t- 循环输出问题\n\t\t```js\n\t\t  for (var i = 1; i <= 5; i++) {\n\t\t    setTimeout(function timer() {\n\t\t      console.log(i);\n\t\t    }, i * 1000);\n\t\t  }\n\t\t  ```\n\t\t- 以上代码会连续输出 5 个 6\n\t\t- **延迟函数的回调会在循环结束时执行**，即使延迟时间为 0\n\t\t- 问题原因：**i 是共享的全局作用域**，所以即使循环了 5 次，也相当于只有一个变量\n\t\t- 解决方案\n\t\t\t- 使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）\n\t\t\t```js\n\t\t\t  for (var i = 1; i <= 5; i++) {\n\t\t\t\t(function (j) {\n\t\t\t\t  setTimeout(function timer() {\n\t\t\t\t\tconsole.log(j);\n\t\t\t\t  }, i * 1000);\n\t\t\t\t})(i);\n\t\t\t  }\n\t\t\t  ```\n\t\t\t- 使用 let 关键字\n\t\t\t\t- 将一个块转换成一个可以被关闭的作用域\n            ```js\n            for (let i = 1; i <= 5; i++) {\n            setTimeout(function timer() {\n                console.log(i);\n            }, i * 1000);\n            }\n            ```\n- 模块\n\t- 返回一个含有属性引用的对象将函数传递到词发作用域外部\n\t- 类似 React 和 Vue 的 hook 模式\n\t```js\n\t  function useState() {\n\t    var someThing = \"wujie\";\n\n\t    function getSomeThing() {\n\t      return someThing;\n\t    }\n\n\t    return {\n\t      getSomeThing: getSomeThing,\n\t    };\n\t  }\n\n\t  var state = useState();\n\t  console.log(state.getSomeThing()); // wujie\n\t  ```\n\t- 模块模式的两个必备条件\n\t\t- 必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）\n\t\t- 封闭函数必须返回至少一个内部函数（闭包）","slug":"作用域和闭包","published":1,"updated":"2022-07-30T10:24:48.902Z","_id":"cl0m014b1000na7sj71p47rfn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：作用域是什么\"><a href=\"#第一章：作用域是什么\" class=\"headerlink\" title=\"第一章：作用域是什么\"></a>第一章：作用域是什么</h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><ul>\n<li>编译过程<ul>\n<li>分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元<ul>\n<li>比如： <code>let a = 2;</code> 被分解为：<code>let、a、=、2、；</code> 5 个词法单元</li>\n<li>分词：无状态解析规则，词法分析：有状态解析规则</li>\n</ul>\n</li>\n<li>解析 / 语法分析：词法单元 -&gt; 抽象语法树（Abstract Syntax Tree，AST）</li>\n<li>代码生成：AST -&gt; 可执行代码</li>\n</ul>\n</li>\n<li>JS 代码在执行前都需要编译</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><ul>\n<li>编译过程重要参与对象<ul>\n<li>引擎：负责 JS 编译和执行过程</li>\n<li>编译器：负责编译过程</li>\n<li>作用域：<strong>收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限</strong></li>\n</ul>\n</li>\n<li>变量赋值的两个操作<ul>\n<li>在当前作用域中声明一个变量（如果之前存在则忽略）</li>\n<li>运行时引擎在作用域中查找该变量，找到了就赋值</li>\n</ul>\n</li>\n<li>编译器基础术语<ul>\n<li>赋值操作使用 LHS，获取目标变量的值使用 RHS<ul>\n<li>LHS：从左侧查找，即：查找某个容器本身<ul>\n<li>比如：<code>a = 2</code>，需要找到为 = 2 赋值的目标</li>\n</ul>\n</li>\n<li>RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）<ul>\n<li>比如：<code>console.log(a);</code>，这里 a 没有被赋值，但需要找到 a 对应的 value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-作用域嵌套\"><a href=\"#1-3-作用域嵌套\" class=\"headerlink\" title=\"1.3 作用域嵌套\"></a>1.3 作用域嵌套</h3><ul>\n<li>在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止</li>\n</ul>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><ul>\n<li>如果在 RHS 在任何作用域都找不到，会抛出 <code>ReferenceError</code> 异常</li>\n<li>非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量</li>\n<li><strong>严格模式禁止自动隐式或自动创建全局变量</strong></li>\n<li>如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 <code>TypeError</code> 异常</li>\n<li><code>ReferenceError</code> 说明作用域判断异常，<code>TypeError</code> 说明作用域判断成功但对值的操作失败了</li>\n</ul>\n<h2 id=\"第二章：词法作用域\"><a href=\"#第二章：词法作用域\" class=\"headerlink\" title=\"第二章：词法作用域\"></a>第二章：词法作用域</h2><h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><ul>\n<li>词法作用域由变量和块作用于写在哪里决定</li>\n<li>作用域查找会在匹配第一个标识符时停止</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><ul>\n<li>欺骗词法作用域会导致性能下降</li>\n<li><code>eval([str]) </code>函数：<ul>\n<li>通常被用来执行动态创建的代码</li>\n<li>字符串作为参数，内容视未好行书写时就存在于程序中的位置</li>\n<li>可以修改词法作用域</li>\n</ul>\n</li>\n<li>with 关键字<ul>\n<li>重复引用同一个对象中多个属性的快捷方式</li>\n<li>将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域</li>\n<li>非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>with 根据传递的对象凭空创建了一个全新的词法作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-性能\"><a href=\"#2-3-性能\" class=\"headerlink\" title=\"2.3 性能\"></a>2.3 性能</h3><ul>\n<li>JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的</li>\n</ul>\n<h2 id=\"第三章：函数作用域和块作用域\"><a href=\"#第三章：函数作用域和块作用域\" class=\"headerlink\" title=\"第三章：函数作用域和块作用域\"></a>第三章：函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>函数的全部变量在函数内部都可以被访问，从外部则无法访问</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><ul>\n<li>最小特权原则：软件设计中，应该<strong>最小限度</strong>的暴露必要的内容，比如内部函数或者内部类</li>\n<li>隐藏作用域的变量和函数可以避免同名标识符的冲突<ul>\n<li>避免全局变量的使用</li>\n<li>全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性</li>\n<li>模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><ul>\n<li>函数表达式<ul>\n<li>声明函数的 function 不在第一个位置<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域</li>\n</ul>\n</li>\n<li>匿名函数：省略函数名称  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>具名函数：声明函数名称</li>\n<li>立即执行函数表达式（IIFE，Immediately Invoked Function Expression）<ul>\n<li>函数表达式末尾加上一个  <code>()</code> 让函数立即执行</li>\n<li>可以当作函数调用并传递参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> global<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><ul>\n<li>使用 var 申明变量会属于外部作用域</li>\n<li>try … catch 的 catch 部分会创建块作用域</li>\n<li>let 关键字<ul>\n<li>将变量绑定到所在的作用域中，外部变量无法访问</li>\n<li>let 声明的代码在 let 之前无法被访问<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>const 关键字<ul>\n<li>可以创建块作用域变量，但值是固定的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：提升\"><a href=\"#第四章：提升\" class=\"headerlink\" title=\"第四章：提升\"></a>第四章：提升</h2><ul>\n<li><code>var a = 2;</code> ，<code>var 2</code> 属于编译阶段任务，<code>a = 2</code> 属于解释阶段任务</li>\n<li>提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端</li>\n<li>var 的变量声明会被提升</li>\n<li>函数的声明会被提升，<strong>函数表达式的声明不会被提升</strong><ul>\n<li>因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：作用域闭包\"><a href=\"#第五章：作用域闭包\" class=\"headerlink\" title=\"第五章：作用域闭包\"></a>第五章：作用域闭包</h2><ul>\n<li>当函数可以记住并访问所在的词法作用域时，就产生了<strong>闭包</strong>，即使函数是在当前词法作用域之外执行  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递</li>\n<li><strong>在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包</strong></li>\n<li><strong>函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包</strong></li>\n<li>闭包使得函数可以继续访问定义时对词法作用域</li>\n</ul>\n</li>\n<li>闭包应用示例：setTimeout  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> message <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用</li>\n</ul>\n</li>\n<li>循环和闭包<ul>\n<li>循环输出问题  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>以上代码会连续输出 5 个 6</li>\n<li><strong>延迟函数的回调会在循环结束时执行</strong>，即使延迟时间为 0</li>\n<li>问题原因：<strong>i 是共享的全局作用域</strong>，所以即使循环了 5 次，也相当于只有一个变量</li>\n<li>解决方案<ul>\n<li>使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用 let 关键字<ul>\n<li>将一个块转换成一个可以被关闭的作用域<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块<ul>\n<li>返回一个含有属性引用的对象将函数传递到词发作用域外部</li>\n<li>类似 React 和 Vue 的 hook 模式<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> someThing <span class=\"token operator\">=</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> someThing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">getSomeThing</span><span class=\"token operator\">:</span> getSomeThing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wujie</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>模块模式的两个必备条件<ul>\n<li>必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）</li>\n<li>封闭函数必须返回至少一个内部函数（闭包）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：作用域是什么\"><a href=\"#第一章：作用域是什么\" class=\"headerlink\" title=\"第一章：作用域是什么\"></a>第一章：作用域是什么</h2><h3 id=\"1-1-编译原理\"><a href=\"#1-1-编译原理\" class=\"headerlink\" title=\"1.1 编译原理\"></a>1.1 编译原理</h3><ul>\n<li>编译过程<ul>\n<li>分词 / 词法分析：将一个语句分解为有意义的代码块，即：词法单元<ul>\n<li>比如： <code>let a = 2;</code> 被分解为：<code>let、a、=、2、；</code> 5 个词法单元</li>\n<li>分词：无状态解析规则，词法分析：有状态解析规则</li>\n</ul>\n</li>\n<li>解析 / 语法分析：词法单元 -&gt; 抽象语法树（Abstract Syntax Tree，AST）</li>\n<li>代码生成：AST -&gt; 可执行代码</li>\n</ul>\n</li>\n<li>JS 代码在执行前都需要编译</li>\n</ul>\n<h3 id=\"1-2-理解作用域\"><a href=\"#1-2-理解作用域\" class=\"headerlink\" title=\"1.2 理解作用域\"></a>1.2 理解作用域</h3><ul>\n<li>编译过程重要参与对象<ul>\n<li>引擎：负责 JS 编译和执行过程</li>\n<li>编译器：负责编译过程</li>\n<li>作用域：<strong>收集并维护所有声明的标识符（变量），通过规则限制代码对标识符的访问权限</strong></li>\n</ul>\n</li>\n<li>变量赋值的两个操作<ul>\n<li>在当前作用域中声明一个变量（如果之前存在则忽略）</li>\n<li>运行时引擎在作用域中查找该变量，找到了就赋值</li>\n</ul>\n</li>\n<li>编译器基础术语<ul>\n<li>赋值操作使用 LHS，获取目标变量的值使用 RHS<ul>\n<li>LHS：从左侧查找，即：查找某个容器本身<ul>\n<li>比如：<code>a = 2</code>，需要找到为 = 2 赋值的目标</li>\n</ul>\n</li>\n<li>RHS：从右侧查找，即：查找某个变量的值（retrieve his source value）<ul>\n<li>比如：<code>console.log(a);</code>，这里 a 没有被赋值，但需要找到 a 对应的 value</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-作用域嵌套\"><a href=\"#1-3-作用域嵌套\" class=\"headerlink\" title=\"1.3 作用域嵌套\"></a>1.3 作用域嵌套</h3><ul>\n<li>在当前作用域找不到变量，就向上层作用域查找，直到找到该变量，或者到最外层作用域（全局作用域）为止</li>\n</ul>\n<h3 id=\"1-4-异常\"><a href=\"#1-4-异常\" class=\"headerlink\" title=\"1.4 异常\"></a>1.4 异常</h3><ul>\n<li>如果在 RHS 在任何作用域都找不到，会抛出 <code>ReferenceError</code> 异常</li>\n<li>非严格模式下，如果在全局作用域也找不到，会在全局作用域创建一个该名称的变量</li>\n<li><strong>严格模式禁止自动隐式或自动创建全局变量</strong></li>\n<li>如果 RHS 找到一个变量，但操作不合理，比如引用 null ，会抛出 <code>TypeError</code> 异常</li>\n<li><code>ReferenceError</code> 说明作用域判断异常，<code>TypeError</code> 说明作用域判断成功但对值的操作失败了</li>\n</ul>\n<h2 id=\"第二章：词法作用域\"><a href=\"#第二章：词法作用域\" class=\"headerlink\" title=\"第二章：词法作用域\"></a>第二章：词法作用域</h2><h3 id=\"2-1-词法阶段\"><a href=\"#2-1-词法阶段\" class=\"headerlink\" title=\"2.1 词法阶段\"></a>2.1 词法阶段</h3><ul>\n<li>词法作用域由变量和块作用于写在哪里决定</li>\n<li>作用域查找会在匹配第一个标识符时停止</li>\n</ul>\n<h3 id=\"2-2-欺骗词法\"><a href=\"#2-2-欺骗词法\" class=\"headerlink\" title=\"2.2 欺骗词法\"></a>2.2 欺骗词法</h3><ul>\n<li>欺骗词法作用域会导致性能下降</li>\n<li><code>eval([str]) </code>函数：<ul>\n<li>通常被用来执行动态创建的代码</li>\n<li>字符串作为参数，内容视未好行书写时就存在于程序中的位置</li>\n<li>可以修改词法作用域</li>\n</ul>\n</li>\n<li>with 关键字<ul>\n<li>重复引用同一个对象中多个属性的快捷方式</li>\n<li>将一个对象的引用当作作用域来处理， 将对象的属性当作作用域中的标识符来处理，创建了一个新的词法作用域</li>\n<li>非严格模式，with 会造成变量泄漏到全局作用域，因为非严格模式会隐式创建全局变量<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>with 根据传递的对象凭空创建了一个全新的词法作用域</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-性能\"><a href=\"#2-3-性能\" class=\"headerlink\" title=\"2.3 性能\"></a>2.3 性能</h3><ul>\n<li>JS 引擎在编译阶段对静态代码优化时，并不能确认 eval 和 with 内部的代码，最糟糕的情况是优化的代码可能完全是无效的</li>\n</ul>\n<h2 id=\"第三章：函数作用域和块作用域\"><a href=\"#第三章：函数作用域和块作用域\" class=\"headerlink\" title=\"第三章：函数作用域和块作用域\"></a>第三章：函数作用域和块作用域</h2><h3 id=\"3-1-函数中的作用域\"><a href=\"#3-1-函数中的作用域\" class=\"headerlink\" title=\"3.1 函数中的作用域\"></a>3.1 函数中的作用域</h3><ul>\n<li>函数的全部变量在函数内部都可以被访问，从外部则无法访问</li>\n</ul>\n<h3 id=\"3-2-隐藏内部实现\"><a href=\"#3-2-隐藏内部实现\" class=\"headerlink\" title=\"3.2 隐藏内部实现\"></a>3.2 隐藏内部实现</h3><ul>\n<li>最小特权原则：软件设计中，应该<strong>最小限度</strong>的暴露必要的内容，比如内部函数或者内部类</li>\n<li>隐藏作用域的变量和函数可以避免同名标识符的冲突<ul>\n<li>避免全局变量的使用</li>\n<li>全局命名空间：通过对象实现，将对外暴露的功能都作为这个对象的属性</li>\n<li>模块管理：通过管理器将库的标识符显式导入另一个特定的作用域中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-函数作用域\"><a href=\"#3-3-函数作用域\" class=\"headerlink\" title=\"3.3 函数作用域\"></a>3.3 函数作用域</h3><ul>\n<li>函数表达式<ul>\n<li>声明函数的 function 不在第一个位置<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>函数表达式可以将函数隐藏在自己的作用域，外部无法访问，不会污染外部作用域</li>\n</ul>\n</li>\n<li>匿名函数：省略函数名称  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>具名函数：声明函数名称</li>\n<li>立即执行函数表达式（IIFE，Immediately Invoked Function Expression）<ul>\n<li>函数表达式末尾加上一个  <code>()</code> 让函数立即执行</li>\n<li>可以当作函数调用并传递参数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> global<span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-块作用域\"><a href=\"#3-4-块作用域\" class=\"headerlink\" title=\"3.4 块作用域\"></a>3.4 块作用域</h3><ul>\n<li>使用 var 申明变量会属于外部作用域</li>\n<li>try … catch 的 catch 部分会创建块作用域</li>\n<li>let 关键字<ul>\n<li>将变量绑定到所在的作用域中，外部变量无法访问</li>\n<li>let 声明的代码在 let 之前无法被访问<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> bar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>const 关键字<ul>\n<li>可以创建块作用域变量，但值是固定的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：提升\"><a href=\"#第四章：提升\" class=\"headerlink\" title=\"第四章：提升\"></a>第四章：提升</h2><ul>\n<li><code>var a = 2;</code> ，<code>var 2</code> 属于编译阶段任务，<code>a = 2</code> 属于解释阶段任务</li>\n<li>提升过程：现有声明，再有赋值。所有声明都被提升到各自作用域顶端</li>\n<li>var 的变量声明会被提升</li>\n<li>函数的声明会被提升，<strong>函数表达式的声明不会被提升</strong><ul>\n<li>因为函数表达式的变量赋值会被提升，但还是 undefined，变量的函数操作就属于 TypeError</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：作用域闭包\"><a href=\"#第五章：作用域闭包\" class=\"headerlink\" title=\"第五章：作用域闭包\"></a>第五章：作用域闭包</h2><ul>\n<li>当函数可以记住并访问所在的词法作用域时，就产生了<strong>闭包</strong>，即使函数是在当前词法作用域之外执行  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> baz <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>bar() 的词法作用域能够访问 foo() 内部作用域，将 bar() 函数本身作为一个值类型进行传递</li>\n<li><strong>在自己定义的词法作用域以外的地方执行，依然持有对该作用的引用，这个引用就是闭包</strong></li>\n<li><strong>函数可以记住并访问所在的词法作用域， 即使函数是在当前词法作用域之外执行，这时就产生了闭包</strong></li>\n<li>闭包使得函数可以继续访问定义时对词法作用域</li>\n</ul>\n</li>\n<li>闭包应用示例：setTimeout  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> message <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>timer 函数具有涵盖 wait 作用域的闭包，因此还有对变量 message 的引用</li>\n</ul>\n</li>\n<li>循环和闭包<ul>\n<li>循环输出问题  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>以上代码会连续输出 5 个 6</li>\n<li><strong>延迟函数的回调会在循环结束时执行</strong>，即使延迟时间为 0</li>\n<li>问题原因：<strong>i 是共享的全局作用域</strong>，所以即使循环了 5 次，也相当于只有一个变量</li>\n<li>解决方案<ul>\n<li>使用 IIFE 立即执行函数, 并且需要一个变量来存储每个迭代中的 i （即传入的参数）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用 let 关键字<ul>\n<li>将一个块转换成一个可以被关闭的作用域<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块<ul>\n<li>返回一个含有属性引用的对象将函数传递到词发作用域外部</li>\n<li>类似 React 和 Vue 的 hook 模式<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> someThing <span class=\"token operator\">=</span> <span class=\"token string\">\"wujie\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> someThing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">getSomeThing</span><span class=\"token operator\">:</span> getSomeThing<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">getSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wujie</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>模块模式的两个必备条件<ul>\n<li>必须有外部封闭函数，且该函数至少被调用一次（注：每次调用都会创建新的模块）</li>\n<li>封闭函数必须返回至少一个内部函数（闭包）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"你不知道的 JS 学习笔记：this和对象原型","date":"2022-02-05T12:18:01.000Z","_content":"## 第一章：关于 this\n- 误解\n\t- this 不是指向函数自身\n\t- this 在任何情况下都不指向函数的词法作用域\n- this 是函数被调用时发生的绑定，**指向什么完全取决于在哪里被调用**\n\n## 第二章 this 全面解析\n### 2.1 调用位置\n- 确认函数的调用位置的方式是：分析调用栈\n\n### 2.2 绑定规则\n- 默认绑定\n\t- 在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined\n\t- 非严格模式示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var a = 2;\n\n\t  foo(); // 2\n\t  ```\n- 隐式绑定\n\t- 当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象\n\t- 示例代码\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo\n\t  }\n\n\t  obj.foo(); // 2\n\t  ```\n\t- 隐式丢失：丢失隐式绑定对象，从而使用默认绑定\n\t- 非严格模式的隐式丢失示例\n\t\t- 此时 bar 引用的 foo 函数本身\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  bar(); // 2\n\n\t  ```\n\t- 传入回调参数是同样会存在隐式丢失问题\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  function doFoo(fn) {\n\t\t// fn 引用的就是 foo\n\t\tfn();\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  doFoo(obj.foo);\n\t  ```\n- 显式绑定\n\t- 使用 call 函数或者 apply 函数实现\n\t- 第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this\n\t- call 函数示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  foo.call(obj); // 2\n\t  ```\n\t- 硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象\n\t\t- 应用：创建包裹函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = function () {\n\t\treturn foo.apply(obj, arguments);\n\t  };\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n\t\t- 应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = foo.bind(obj); // bar 是一个新的函数，this 指向 obj\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n- new 绑定\n\t- new 调用函数（发生构造函数调用）过程\n\t\t- 创建一个全新的对象\n\t\t- 新对象被执行`[[原型]]`连接\n\t\t- 新对象被绑定到函数调用的 this\n\t\t- 如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象\n\t- 示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上\n\t  ```js\n\t  function foo(a) {\n\t\tthis.a = a;\n\t  }\n\n\t  var bar = new foo(2);\n\t  console.log(bar.a); // 2\n\t  ```\n\n### 2.3 优先级\n- 显式绑定优先级 > 隐式绑定\n- new 绑定优先级 > 隐式绑定\n- **判断 this 规则的方式**\n\t- 是否在 new 中调用，是的话 this 绑定的是新创建的对象\n\t- 是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象\n\t- 是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象\n\t- 以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象\n\t- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png)\n\n### 2.4 绑定例外\n- 如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定\n\t- 应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符\n\t```js\n\t  function foo(a, b) {\n\t\tconsole.log(`a: ${a}, b: ${b}`);\n\t  }\n\n\t  // 数组展开为参数\n\t  foo.apply(null, [2, 3]); // a: 2, b: 3\n\n\t  // 使用 bind 进行柯里化\n\t  var bar = foo.bind(null, 2); // a: 2, b: 5\n\t  bar(5);\n\t  ```\n\t- 可以使用 `Object.create(null)` 创建空对象（不会创建 `Object.prototype`，比 `{}` 更空），称作 DMZ 对象\n- 间接引用情况会导致绑定例外\n  ```js\n  function foo(a) {\n\tconsole.log(a);\n  }\n\n  var a = 2;\n  var o = { a: 3, foo: foo };\n  var p = { a: 4 };\n  o.foo(); // 3\n  // 注意：返回值是目标函数的引用，相当于直接调用 foo 函数\n  (p.foo = o.foo)(); // 2\n  ```\n- 软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定\n  ```js\n  if (!Function.prototype.softBind) {\n\tFunction.prototype.softBind = function (obj) {\n\t  var fn = this;\n\t  // 获取所用 curried 参数\n\t  var curried = [].slice.call(arguments, 1);\n\t  var bound = function () {\n\t\treturn fn.apply(\n\t\t  !this || this === (window || global) ? obj : this,\n\t\t  curried.concat.apply(curried, arguments)\n\t\t);\n\t  };\n\t  bound.prototype = Object.create(fn.prototype);\n\t  return bound;\n\t};\n  }\n  ```\n\n### 2.5 this 词法\n- **箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定**\n  - 箭头函数会继承外层函数调用的 this 绑定\n  - 内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1\n  ```js\n  function foo() {\n\treturn (a) => {\n\t  // 注意：this 继承自 foo\n\t  console.log(this.a);\n\t};\n  }\n\n  var obj1 = { a: 2 };\n  var obj2 = { a: 3 };\n\n  var bar = foo.call(obj1);\n  bar.call(obj2); // 2\n  ```\n\n## 第三章：对象\n### 3.1 对象\n- 可以通过 `{}` 或者 new 关键字声明对象\n\n### 3.2 类型\n- 内置对象\n\t- String\n\t- Number\n\t- Boolean\n\t- Object\n\t- Function\n\t- Array\n\t- Date\n\t- RegExp\n\t- Error\n- JS 会自动把字面量转换为一个对象\n\t- 比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法\n- null 、undefined 只有文字形式\n- Date 只有构造形式（对象）\n- Object、Array、Function、RegExp，只有构造形式，都是对象\n\n### 3.3 内容\n- 可以通过 `.` 或者 `[]` 来访问对象中的属性，\n- 属性名都是字符串，所以传入的值会被自动转化为字符串\n- 可计算属性名称\n\t- 使用 [] 包裹的表达式作为属性名\n\t- 常用于 Symbol\n  ```js\n  var MyObject = {\n\t[Symbol.Something]: \"wujieli\"\n  }\n  ```\n- 复制对象\n\t- 浅拷贝\n\t\t- 引用类型还是指向原来的对象\n\t\t- `JSON.parse(JSON.stringify(someObj))` 和 `Object.assign()` 可以实现浅拷贝\n\t- 深拷贝\n\t\t- 引用类型复制一套独立的\n- 属性操作符（数据描述符）\n\t- 除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）\n\t\t- writable 为 false 则不可修改\n\t\t- configurable 为 false 则不可以通过 `Object.defineProperty()` 修改属性描述符，不能删除属性\n\t\t- enumerable 为 false，属性不会出现在循环枚举中\n\t- Object.defineProperty()： 添加新属性或者修改已有属性\n\t  ```js\n\t  var obj = {};\n\n\t  Object.defineProperty(obj, \"a\", {\n\t\tvalue: 2,\n\t\twritable: true,\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t  });\n\n\t  console.log(obj.a); // 2\n\t  ```\n- 对象不变性\n\t- 通过 `writable: false` 和 `configurable: false` 可以创建一个常量属性，不可修改、重定义、删除\n\t- Object.preventExtensions( obj ) ：禁止添加新属性\n\t- Object.seal( obj ) ：创建一个密封对象，在现有对象调用 `Object.preventExtensions` 且 `configurable: false`\n\t- Object.freeze( obj ) ：现有对象调用 `Object.seal` 且 `writable: false`\n- `[[get]]` 属性\n\t- 在对象中查找同名属性，找到了就返回\n\t- 如果没找到就根据原型链找，找不到则返回 undefined\n- `[[put]]` 属性\n\t- 属性是否是访问描述符，如果是并存在 setter 就调用 setter\n\t- writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常\n\t- 以上都不是，将值设置为该属性的值\n- 访问描述符\n\t- 通过 getter 获取属性，通过 setter 设置属性，通常成对出现\n\t- 访问描述符只有：set、get、configurable、enumerable 属性\n- 属性存在性\n\t- `[属性名称]` in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链\n\t- Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链\n\n### 3.4 遍历\n- for...in 循环：遍历对象可枚举属性，包括原型链\n- for...of 循环：循环遍历对象的所有 value\n\t- 向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值\n\t- 数组内置 `@@iterator` 返回迭代器对象的函数\n\t- 普通对象没有 `@@terator` 目的是为了避免影响未来对象类型\n\n\n## 第四章：混合对象“类”\n### 4.1 类理论\n- 数据及对数据的操作应该封装打包作为数据结构\n- 使用**类（class）**对数据结构进行分类\n- 类的核心概念\n\t- 实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同\n\t- 继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法\n\t- 多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为\n\n### 4.2 类的机制\n- 如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例\n- 构造函数：\n\t- 用于构造类实例，一个特殊的类方法，通常和类同名\n\t- 返回一个对象（即：类实例）\n\n### 4.3 类的继承\n- 子类和父类是完全不同的类，子类会包含**父类原始行为的副本**，但也可以重复父类的行为甚至定义新的行为\n- 多态：\n\t- 子类可以重写父类方法\n\t- 继承链中不同层次的方法名可以被多次定义\n- 子类可以相对引用它继承的父类，这种相对引用称为 super\n- JS 自身不提供多重继承\n\n### 4.4 混入\n- JS 中对象没有自动复制的行为\n- 显式混入\n\t- 如果子对象中不存在对应属性则复制父亲对象属性\n\t  ```js\n\t  function mixin(souceObj, targetObj) {\n\t\tfor (let key in souceObj) {\n\t\t  // 只会在不存在的情况下复制\n\t\t  if (!(key in targetObj)) {\n\t\t\ttargetObj[key] = souceObj[key];\n\t\t  }\n\t\t}\n\n\t\treturn targetObj;\n\t  }\n\n\t  let Vehicle = {\n\t\tengines: 1,\n\n\t\tignition: function () {\n\t\t  console.log(\"发动引擎！\");\n\t\t},\n\t\tdrive: function () {\n\t\t  this.ignition();\n\t\t  console.log(\"启动！\");\n\t\t},\n\t  };\n\n\t  let Car = mixin(Vehicle, {\n\t\twheels: 4,\n\n\t\tdrive: function () {\n\t\t  Vehicle.drive.call(this); // 显式多态\n\t\t  console.log(`启动${this.wheels}个轮子的这辆车`);\n\t\t},\n\t  });\n\n\t  console.log(Car.drive());\n\t  ```\n\t- 显示混入的变体：寄生继承\n\t\t- 先通过潜拷贝获取父对象，再添加新的方法\n- 隐式混入\n\t- 通过 `call(this)` 方法把父对象方法绑定到子对象\n- 尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患\n\n## 第五章：原型\n### 5.1 [[Prototype]]\n- `[[Prototype]]`：JS 对象的内置属性，是对于其他对象的引用\n- 对于属性查找操作（如：`[[Get]]`，for...in，in），**如果在对象本身找不到需要的属性，就通过 `[[Prototype]]` 访问对象的原型链向上查找**，找不到就返回 undefined\n- 所有普通的 `[[Prototype]]` 最终都会指向内置的 Object.prototype\n- 原型链 = `[[Prototype]]` 链\n- 属性设置\n\t- 对于 `obj.foo = \"bar\";` 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 `[[Prototype]]` 查找原型链，如果原型链找不到则直接赋值在 obj 上\n\t- 屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：**选择最底层的属性**），但分为三种情况讨论\n\t\t- 原型链属性 `writable: true` ，会直接在底层对象新增一个属性，**属于屏蔽属性**\n\t\t- 原型链属性 `writable: false` ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值\n\t\t- 原型链存在该属性并且是一个 setter，则直接调用该 setter\n\n### 5.2 ”类“\n- JS 中不会把一个对象（类）复制到另一个对象（实例），**只是关联起来**\n- `new Foo()` 会生成一个新对象，新对象的内部链接 `[[Prototype]]` 关联到的是 `Foo.prototype` 对象\n- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png)\n- 构造函数：\n\t- 函数原型的 construtor 默认指向自己，即：`Foo.prototype.constructor === Foo` 是 true\n\t- 调用 `new` 创建的对象的 constructor 属性指向 -> 创建这个对象的函数\n\t- 参考代码\n\t  ```js\n\t  function Foo() {}\n\n\t  console.log(Foo.prototype.constructor === Foo); // true\n\n\t  var a = new Foo();\n\t  console.log(a.constructor === Foo); // true\n\t  ```\n\t- JS 中的函数就是普通函数\n\t- new 会劫持所有所有的普通函数，并通过构造对象调用它\n\t- 注意：`.constructor` 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了\n\n### 5.3 （原型）继承\n- 在 ES6 之前，将子对象的 prototype 通过 `Object.create()` 指向父亲对象\n- ES6 可以通过 `Object.setPrototypeOf` 直接修改子对象原型，两种方式效果相同\n  ```js\n  // ES 6 之前\n  Bar.prototype = Object.create( Foo.prototype );\n  // ES 6\n  Object.setPrototypeOf( Bar.prototype, Foo.prototype );\n  ```\n- 查找”类“关系\n\t- 反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）\n\t- 通过 instanceof 查找反射（不建议使用）：`a instanceof Foo;` ，a 的整条原型链是否有指向 Foo.prototype 的对象\n\t- 通过 `Foo.prototype.isPrototypeOf( a );` 查找反射：a 的原型链是否出现过 Foo.prototype\n\t- `.__proto__` 不是一个属性，而是一个 getter / setter\n\t\t- 通过 ES6 的方式实现 `.__proto__` 参考\n\t ```js\n\t  Object.defineProperty(Object.prototype, \"__proto__\", {\n\t\tget: function () {\n\t\t  return Object.getPrototypeOf(this);\n\t\t},\n\t\tset: function (o) {\n\t\t  Object.setPrototypeOf(this, o);\n\t\t  return o;\n\t\t},\n\t  });\n\t  ```\n\n### 5.4 对象关联\n- `let bar = Object.create( obj )` 可以将新对象 bar 原型指向 obj\n- Object.create() 在 ES5 中的实现代码\n  ```js\n  if (!Object.create) {\n\tObject.create = function(o) {\n\t  function F(){}\n\t  F.prototype = o;\n\t  return new F();\n\t}\n  }\n  ```\n\n\n## 第六章：行为委托\n- 在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法\n- 委托理论\n    - 对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系\n    - 定义的都是对象，一个对象通过 `Object.create()` 创建，把 `[[Prototype]]` 委托给另一个对象\n    - 示例代码\n      ```js\n      Task = {\n      setID: function (ID) {\n          this.id = ID;\n      },\n      outputID: function () {\n          console.log(this.id);\n      },\n      };\n      // 让XYZ委托Task\n      XYZ = Object.create(Task);\n\n      XYZ.prepareTask = function (ID, Label) {\n      this.setID(ID);\n      this.label = Label;\n      };\n      XYZ.outputTaskDetails = function () {\n      this.outputID();\n      console.log(this.label);\n      };\n      ```\n- 这类编码风格称为 对象关联（OLOO，objects linked to other objects）\n\t- 对于实例化后的属性数据都存储于子对象上\n\t- 尽量避免原型链上存在相同的命名\n\t- 子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象\n- 禁止双向委托\n\n## 附录：ES6 中的 Class\n- ES6 中的 class 语法糖解决的问题\n\t- 不再使用 .prototype\n\t- 子类通过 extends 直接继承父类，不需要再通过 Object.create()\n\t- 可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法\n\t- class 语法不能声明属性（需要通过 constructor），避免错误\n- class 语法糖存在的问题\n\t- 如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式\n\t- super 不是动态绑定的，而是在声明时静态绑定的\n","source":"_posts/你不知道的-JS-学习笔记：第二部分-this和对象原型.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：this和对象原型\ndate: 2022-02-05 20:18:01\ncategories: 前端\ntags: JavaScript\n---\n## 第一章：关于 this\n- 误解\n\t- this 不是指向函数自身\n\t- this 在任何情况下都不指向函数的词法作用域\n- this 是函数被调用时发生的绑定，**指向什么完全取决于在哪里被调用**\n\n## 第二章 this 全面解析\n### 2.1 调用位置\n- 确认函数的调用位置的方式是：分析调用栈\n\n### 2.2 绑定规则\n- 默认绑定\n\t- 在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined\n\t- 非严格模式示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var a = 2;\n\n\t  foo(); // 2\n\t  ```\n- 隐式绑定\n\t- 当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象\n\t- 示例代码\n\t  ```js\n\t  function foo() {\n\t\tconsole.log( this.a );\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo\n\t  }\n\n\t  obj.foo(); // 2\n\t  ```\n\t- 隐式丢失：丢失隐式绑定对象，从而使用默认绑定\n\t- 非严格模式的隐式丢失示例\n\t\t- 此时 bar 引用的 foo 函数本身\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  bar(); // 2\n\n\t  ```\n\t- 传入回调参数是同样会存在隐式丢失问题\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  function doFoo(fn) {\n\t\t// fn 引用的就是 foo\n\t\tfn();\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t\tfoo: foo,\n\t  };\n\n\t  var bar = obj.foo;\n\n\t  var a = \"global\";\n\n\t  doFoo(obj.foo);\n\t  ```\n- 显式绑定\n\t- 使用 call 函数或者 apply 函数实现\n\t- 第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this\n\t- call 函数示例\n\t  ```js\n\t  function foo() {\n\t\tconsole.log(this.a);\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  foo.call(obj); // 2\n\t  ```\n\t- 硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象\n\t\t- 应用：创建包裹函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = function () {\n\t\treturn foo.apply(obj, arguments);\n\t  };\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n\t\t- 应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数\n\t  ```js\n\t  function foo(something) {\n\t\tconsole.log(this.a, something);\n\t\treturn this.a + something;\n\t  }\n\n\t  var obj = {\n\t\ta: 2,\n\t  };\n\n\t  var bar = foo.bind(obj); // bar 是一个新的函数，this 指向 obj\n\n\t  var b = bar(3); // 2 3\n\t  console.log(b);\n\t  ```\n- new 绑定\n\t- new 调用函数（发生构造函数调用）过程\n\t\t- 创建一个全新的对象\n\t\t- 新对象被执行`[[原型]]`连接\n\t\t- 新对象被绑定到函数调用的 this\n\t\t- 如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象\n\t- 示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上\n\t  ```js\n\t  function foo(a) {\n\t\tthis.a = a;\n\t  }\n\n\t  var bar = new foo(2);\n\t  console.log(bar.a); // 2\n\t  ```\n\n### 2.3 优先级\n- 显式绑定优先级 > 隐式绑定\n- new 绑定优先级 > 隐式绑定\n- **判断 this 规则的方式**\n\t- 是否在 new 中调用，是的话 this 绑定的是新创建的对象\n\t- 是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象\n\t- 是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象\n\t- 以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象\n\t- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png)\n\n### 2.4 绑定例外\n- 如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定\n\t- 应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符\n\t```js\n\t  function foo(a, b) {\n\t\tconsole.log(`a: ${a}, b: ${b}`);\n\t  }\n\n\t  // 数组展开为参数\n\t  foo.apply(null, [2, 3]); // a: 2, b: 3\n\n\t  // 使用 bind 进行柯里化\n\t  var bar = foo.bind(null, 2); // a: 2, b: 5\n\t  bar(5);\n\t  ```\n\t- 可以使用 `Object.create(null)` 创建空对象（不会创建 `Object.prototype`，比 `{}` 更空），称作 DMZ 对象\n- 间接引用情况会导致绑定例外\n  ```js\n  function foo(a) {\n\tconsole.log(a);\n  }\n\n  var a = 2;\n  var o = { a: 3, foo: foo };\n  var p = { a: 4 };\n  o.foo(); // 3\n  // 注意：返回值是目标函数的引用，相当于直接调用 foo 函数\n  (p.foo = o.foo)(); // 2\n  ```\n- 软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定\n  ```js\n  if (!Function.prototype.softBind) {\n\tFunction.prototype.softBind = function (obj) {\n\t  var fn = this;\n\t  // 获取所用 curried 参数\n\t  var curried = [].slice.call(arguments, 1);\n\t  var bound = function () {\n\t\treturn fn.apply(\n\t\t  !this || this === (window || global) ? obj : this,\n\t\t  curried.concat.apply(curried, arguments)\n\t\t);\n\t  };\n\t  bound.prototype = Object.create(fn.prototype);\n\t  return bound;\n\t};\n  }\n  ```\n\n### 2.5 this 词法\n- **箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定**\n  - 箭头函数会继承外层函数调用的 this 绑定\n  - 内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1\n  ```js\n  function foo() {\n\treturn (a) => {\n\t  // 注意：this 继承自 foo\n\t  console.log(this.a);\n\t};\n  }\n\n  var obj1 = { a: 2 };\n  var obj2 = { a: 3 };\n\n  var bar = foo.call(obj1);\n  bar.call(obj2); // 2\n  ```\n\n## 第三章：对象\n### 3.1 对象\n- 可以通过 `{}` 或者 new 关键字声明对象\n\n### 3.2 类型\n- 内置对象\n\t- String\n\t- Number\n\t- Boolean\n\t- Object\n\t- Function\n\t- Array\n\t- Date\n\t- RegExp\n\t- Error\n- JS 会自动把字面量转换为一个对象\n\t- 比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法\n- null 、undefined 只有文字形式\n- Date 只有构造形式（对象）\n- Object、Array、Function、RegExp，只有构造形式，都是对象\n\n### 3.3 内容\n- 可以通过 `.` 或者 `[]` 来访问对象中的属性，\n- 属性名都是字符串，所以传入的值会被自动转化为字符串\n- 可计算属性名称\n\t- 使用 [] 包裹的表达式作为属性名\n\t- 常用于 Symbol\n  ```js\n  var MyObject = {\n\t[Symbol.Something]: \"wujieli\"\n  }\n  ```\n- 复制对象\n\t- 浅拷贝\n\t\t- 引用类型还是指向原来的对象\n\t\t- `JSON.parse(JSON.stringify(someObj))` 和 `Object.assign()` 可以实现浅拷贝\n\t- 深拷贝\n\t\t- 引用类型复制一套独立的\n- 属性操作符（数据描述符）\n\t- 除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）\n\t\t- writable 为 false 则不可修改\n\t\t- configurable 为 false 则不可以通过 `Object.defineProperty()` 修改属性描述符，不能删除属性\n\t\t- enumerable 为 false，属性不会出现在循环枚举中\n\t- Object.defineProperty()： 添加新属性或者修改已有属性\n\t  ```js\n\t  var obj = {};\n\n\t  Object.defineProperty(obj, \"a\", {\n\t\tvalue: 2,\n\t\twritable: true,\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t  });\n\n\t  console.log(obj.a); // 2\n\t  ```\n- 对象不变性\n\t- 通过 `writable: false` 和 `configurable: false` 可以创建一个常量属性，不可修改、重定义、删除\n\t- Object.preventExtensions( obj ) ：禁止添加新属性\n\t- Object.seal( obj ) ：创建一个密封对象，在现有对象调用 `Object.preventExtensions` 且 `configurable: false`\n\t- Object.freeze( obj ) ：现有对象调用 `Object.seal` 且 `writable: false`\n- `[[get]]` 属性\n\t- 在对象中查找同名属性，找到了就返回\n\t- 如果没找到就根据原型链找，找不到则返回 undefined\n- `[[put]]` 属性\n\t- 属性是否是访问描述符，如果是并存在 setter 就调用 setter\n\t- writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常\n\t- 以上都不是，将值设置为该属性的值\n- 访问描述符\n\t- 通过 getter 获取属性，通过 setter 设置属性，通常成对出现\n\t- 访问描述符只有：set、get、configurable、enumerable 属性\n- 属性存在性\n\t- `[属性名称]` in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链\n\t- Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链\n\n### 3.4 遍历\n- for...in 循环：遍历对象可枚举属性，包括原型链\n- for...of 循环：循环遍历对象的所有 value\n\t- 向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值\n\t- 数组内置 `@@iterator` 返回迭代器对象的函数\n\t- 普通对象没有 `@@terator` 目的是为了避免影响未来对象类型\n\n\n## 第四章：混合对象“类”\n### 4.1 类理论\n- 数据及对数据的操作应该封装打包作为数据结构\n- 使用**类（class）**对数据结构进行分类\n- 类的核心概念\n\t- 实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同\n\t- 继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法\n\t- 多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为\n\n### 4.2 类的机制\n- 如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例\n- 构造函数：\n\t- 用于构造类实例，一个特殊的类方法，通常和类同名\n\t- 返回一个对象（即：类实例）\n\n### 4.3 类的继承\n- 子类和父类是完全不同的类，子类会包含**父类原始行为的副本**，但也可以重复父类的行为甚至定义新的行为\n- 多态：\n\t- 子类可以重写父类方法\n\t- 继承链中不同层次的方法名可以被多次定义\n- 子类可以相对引用它继承的父类，这种相对引用称为 super\n- JS 自身不提供多重继承\n\n### 4.4 混入\n- JS 中对象没有自动复制的行为\n- 显式混入\n\t- 如果子对象中不存在对应属性则复制父亲对象属性\n\t  ```js\n\t  function mixin(souceObj, targetObj) {\n\t\tfor (let key in souceObj) {\n\t\t  // 只会在不存在的情况下复制\n\t\t  if (!(key in targetObj)) {\n\t\t\ttargetObj[key] = souceObj[key];\n\t\t  }\n\t\t}\n\n\t\treturn targetObj;\n\t  }\n\n\t  let Vehicle = {\n\t\tengines: 1,\n\n\t\tignition: function () {\n\t\t  console.log(\"发动引擎！\");\n\t\t},\n\t\tdrive: function () {\n\t\t  this.ignition();\n\t\t  console.log(\"启动！\");\n\t\t},\n\t  };\n\n\t  let Car = mixin(Vehicle, {\n\t\twheels: 4,\n\n\t\tdrive: function () {\n\t\t  Vehicle.drive.call(this); // 显式多态\n\t\t  console.log(`启动${this.wheels}个轮子的这辆车`);\n\t\t},\n\t  });\n\n\t  console.log(Car.drive());\n\t  ```\n\t- 显示混入的变体：寄生继承\n\t\t- 先通过潜拷贝获取父对象，再添加新的方法\n- 隐式混入\n\t- 通过 `call(this)` 方法把父对象方法绑定到子对象\n- 尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患\n\n## 第五章：原型\n### 5.1 [[Prototype]]\n- `[[Prototype]]`：JS 对象的内置属性，是对于其他对象的引用\n- 对于属性查找操作（如：`[[Get]]`，for...in，in），**如果在对象本身找不到需要的属性，就通过 `[[Prototype]]` 访问对象的原型链向上查找**，找不到就返回 undefined\n- 所有普通的 `[[Prototype]]` 最终都会指向内置的 Object.prototype\n- 原型链 = `[[Prototype]]` 链\n- 属性设置\n\t- 对于 `obj.foo = \"bar\";` 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 `[[Prototype]]` 查找原型链，如果原型链找不到则直接赋值在 obj 上\n\t- 屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：**选择最底层的属性**），但分为三种情况讨论\n\t\t- 原型链属性 `writable: true` ，会直接在底层对象新增一个属性，**属于屏蔽属性**\n\t\t- 原型链属性 `writable: false` ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值\n\t\t- 原型链存在该属性并且是一个 setter，则直接调用该 setter\n\n### 5.2 ”类“\n- JS 中不会把一个对象（类）复制到另一个对象（实例），**只是关联起来**\n- `new Foo()` 会生成一个新对象，新对象的内部链接 `[[Prototype]]` 关联到的是 `Foo.prototype` 对象\n- ![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png)\n- 构造函数：\n\t- 函数原型的 construtor 默认指向自己，即：`Foo.prototype.constructor === Foo` 是 true\n\t- 调用 `new` 创建的对象的 constructor 属性指向 -> 创建这个对象的函数\n\t- 参考代码\n\t  ```js\n\t  function Foo() {}\n\n\t  console.log(Foo.prototype.constructor === Foo); // true\n\n\t  var a = new Foo();\n\t  console.log(a.constructor === Foo); // true\n\t  ```\n\t- JS 中的函数就是普通函数\n\t- new 会劫持所有所有的普通函数，并通过构造对象调用它\n\t- 注意：`.constructor` 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了\n\n### 5.3 （原型）继承\n- 在 ES6 之前，将子对象的 prototype 通过 `Object.create()` 指向父亲对象\n- ES6 可以通过 `Object.setPrototypeOf` 直接修改子对象原型，两种方式效果相同\n  ```js\n  // ES 6 之前\n  Bar.prototype = Object.create( Foo.prototype );\n  // ES 6\n  Object.setPrototypeOf( Bar.prototype, Foo.prototype );\n  ```\n- 查找”类“关系\n\t- 反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）\n\t- 通过 instanceof 查找反射（不建议使用）：`a instanceof Foo;` ，a 的整条原型链是否有指向 Foo.prototype 的对象\n\t- 通过 `Foo.prototype.isPrototypeOf( a );` 查找反射：a 的原型链是否出现过 Foo.prototype\n\t- `.__proto__` 不是一个属性，而是一个 getter / setter\n\t\t- 通过 ES6 的方式实现 `.__proto__` 参考\n\t ```js\n\t  Object.defineProperty(Object.prototype, \"__proto__\", {\n\t\tget: function () {\n\t\t  return Object.getPrototypeOf(this);\n\t\t},\n\t\tset: function (o) {\n\t\t  Object.setPrototypeOf(this, o);\n\t\t  return o;\n\t\t},\n\t  });\n\t  ```\n\n### 5.4 对象关联\n- `let bar = Object.create( obj )` 可以将新对象 bar 原型指向 obj\n- Object.create() 在 ES5 中的实现代码\n  ```js\n  if (!Object.create) {\n\tObject.create = function(o) {\n\t  function F(){}\n\t  F.prototype = o;\n\t  return new F();\n\t}\n  }\n  ```\n\n\n## 第六章：行为委托\n- 在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法\n- 委托理论\n    - 对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系\n    - 定义的都是对象，一个对象通过 `Object.create()` 创建，把 `[[Prototype]]` 委托给另一个对象\n    - 示例代码\n      ```js\n      Task = {\n      setID: function (ID) {\n          this.id = ID;\n      },\n      outputID: function () {\n          console.log(this.id);\n      },\n      };\n      // 让XYZ委托Task\n      XYZ = Object.create(Task);\n\n      XYZ.prepareTask = function (ID, Label) {\n      this.setID(ID);\n      this.label = Label;\n      };\n      XYZ.outputTaskDetails = function () {\n      this.outputID();\n      console.log(this.label);\n      };\n      ```\n- 这类编码风格称为 对象关联（OLOO，objects linked to other objects）\n\t- 对于实例化后的属性数据都存储于子对象上\n\t- 尽量避免原型链上存在相同的命名\n\t- 子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象\n- 禁止双向委托\n\n## 附录：ES6 中的 Class\n- ES6 中的 class 语法糖解决的问题\n\t- 不再使用 .prototype\n\t- 子类通过 extends 直接继承父类，不需要再通过 Object.create()\n\t- 可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法\n\t- class 语法不能声明属性（需要通过 constructor），避免错误\n- class 语法糖存在的问题\n\t- 如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式\n\t- super 不是动态绑定的，而是在声明时静态绑定的\n","slug":"你不知道的-JS-学习笔记：第二部分-this和对象原型","published":1,"updated":"2022-07-30T10:25:05.881Z","_id":"cl0m014b3000sa7sj81z3cot3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：关于-this\"><a href=\"#第一章：关于-this\" class=\"headerlink\" title=\"第一章：关于 this\"></a>第一章：关于 this</h2><ul>\n<li>误解<ul>\n<li>this 不是指向函数自身</li>\n<li>this 在任何情况下都不指向函数的词法作用域</li>\n</ul>\n</li>\n<li>this 是函数被调用时发生的绑定，<strong>指向什么完全取决于在哪里被调用</strong></li>\n</ul>\n<h2 id=\"第二章-this-全面解析\"><a href=\"#第二章-this-全面解析\" class=\"headerlink\" title=\"第二章 this 全面解析\"></a>第二章 this 全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><ul>\n<li>确认函数的调用位置的方式是：分析调用栈</li>\n</ul>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><ul>\n<li>默认绑定<ul>\n<li>在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined</li>\n<li>非严格模式示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>隐式绑定<ul>\n<li>当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo\n <span class=\"token punctuation\">&#125;</span>\n\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>隐式丢失：丢失隐式绑定对象，从而使用默认绑定</li>\n<li>非严格模式的隐式丢失示例<ul>\n<li>此时 bar 引用的 foo 函数本身<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>传入回调参数是同样会存在隐式丢失问题<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// fn 引用的就是 foo</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>显式绑定<ul>\n<li>使用 call 函数或者 apply 函数实现</li>\n<li>第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this</li>\n<li>call 函数示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象<ul>\n<li>应用：创建包裹函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar 是一个新的函数，this 指向 obj</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>new 绑定<ul>\n<li>new 调用函数（发生构造函数调用）过程<ul>\n<li>创建一个全新的对象</li>\n<li>新对象被执行<code>[[原型]]</code>连接</li>\n<li>新对象被绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象</li>\n</ul>\n</li>\n<li>示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><ul>\n<li>显式绑定优先级 &gt; 隐式绑定</li>\n<li>new 绑定优先级 &gt; 隐式绑定</li>\n<li><strong>判断 this 规则的方式</strong><ul>\n<li>是否在 new 中调用，是的话 this 绑定的是新创建的对象</li>\n<li>是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象</li>\n<li>是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象</li>\n<li>以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png\"\n                     \n                ></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><ul>\n<li>如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定<ul>\n<li>应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token comment\">// 数组展开为参数</span>\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 3</span>\n\n <span class=\"token comment\">// 使用 bind 进行柯里化</span>\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 5</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以使用 <code>Object.create(null)</code> 创建空对象（不会创建 <code>Object.prototype</code>，比 <code>&#123;&#125;</code> 更空），称作 DMZ 对象</li>\n</ul>\n</li>\n<li>间接引用情况会导致绑定例外<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n o<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n <span class=\"token comment\">// 注意：返回值是目标函数的引用，相当于直接调用 foo 函数</span>\n <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>softBind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">softBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取所用 curried 参数</span>\n  <span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n\t  <span class=\"token operator\">!</span><span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>window <span class=\"token operator\">||</span> global<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t  curried<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>curried<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-5-this-词法\"><a href=\"#2-5-this-词法\" class=\"headerlink\" title=\"2.5 this 词法\"></a>2.5 this 词法</h3><ul>\n<li><strong>箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定</strong><ul>\n<li>箭头函数会继承外层函数调用的 this 绑定</li>\n<li>内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 注意：this 继承自 foo</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：对象\"><a href=\"#第三章：对象\" class=\"headerlink\" title=\"第三章：对象\"></a>第三章：对象</h2><h3 id=\"3-1-对象\"><a href=\"#3-1-对象\" class=\"headerlink\" title=\"3.1 对象\"></a>3.1 对象</h3><ul>\n<li>可以通过 <code>&#123;&#125;</code> 或者 new 关键字声明对象</li>\n</ul>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><ul>\n<li>内置对象<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n</li>\n<li>JS 会自动把字面量转换为一个对象<ul>\n<li>比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法</li>\n</ul>\n</li>\n<li>null 、undefined 只有文字形式</li>\n<li>Date 只有构造形式（对象）</li>\n<li>Object、Array、Function、RegExp，只有构造形式，都是对象</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><ul>\n<li>可以通过 <code>.</code> 或者 <code>[]</code> 来访问对象中的属性，</li>\n<li>属性名都是字符串，所以传入的值会被自动转化为字符串</li>\n<li>可计算属性名称<ul>\n<li>使用 [] 包裹的表达式作为属性名</li>\n<li>常用于 Symbol<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> MyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>Something<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wujieli\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>复制对象<ul>\n<li>浅拷贝<ul>\n<li>引用类型还是指向原来的对象</li>\n<li><code>JSON.parse(JSON.stringify(someObj))</code> 和 <code>Object.assign()</code> 可以实现浅拷贝</li>\n</ul>\n</li>\n<li>深拷贝<ul>\n<li>引用类型复制一套独立的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性操作符（数据描述符）<ul>\n<li>除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）<ul>\n<li>writable 为 false 则不可修改</li>\n<li>configurable 为 false 则不可以通过 <code>Object.defineProperty()</code> 修改属性描述符，不能删除属性</li>\n<li>enumerable 为 false，属性不会出现在循环枚举中</li>\n</ul>\n</li>\n<li>Object.defineProperty()： 添加新属性或者修改已有属性<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>对象不变性<ul>\n<li>通过 <code>writable: false</code> 和 <code>configurable: false</code> 可以创建一个常量属性，不可修改、重定义、删除</li>\n<li>Object.preventExtensions( obj ) ：禁止添加新属性</li>\n<li>Object.seal( obj ) ：创建一个密封对象，在现有对象调用 <code>Object.preventExtensions</code> 且 <code>configurable: false</code></li>\n<li>Object.freeze( obj ) ：现有对象调用 <code>Object.seal</code> 且 <code>writable: false</code></li>\n</ul>\n</li>\n<li><code>[[get]]</code> 属性<ul>\n<li>在对象中查找同名属性，找到了就返回</li>\n<li>如果没找到就根据原型链找，找不到则返回 undefined</li>\n</ul>\n</li>\n<li><code>[[put]]</code> 属性<ul>\n<li>属性是否是访问描述符，如果是并存在 setter 就调用 setter</li>\n<li>writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常</li>\n<li>以上都不是，将值设置为该属性的值</li>\n</ul>\n</li>\n<li>访问描述符<ul>\n<li>通过 getter 获取属性，通过 setter 设置属性，通常成对出现</li>\n<li>访问描述符只有：set、get、configurable、enumerable 属性</li>\n</ul>\n</li>\n<li>属性存在性<ul>\n<li><code>[属性名称]</code> in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链</li>\n<li>Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><ul>\n<li>for…in 循环：遍历对象可枚举属性，包括原型链</li>\n<li>for…of 循环：循环遍历对象的所有 value<ul>\n<li>向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值</li>\n<li>数组内置 <code>@@iterator</code> 返回迭代器对象的函数</li>\n<li>普通对象没有 <code>@@terator</code> 目的是为了避免影响未来对象类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：混合对象“类”\"><a href=\"#第四章：混合对象“类”\" class=\"headerlink\" title=\"第四章：混合对象“类”\"></a>第四章：混合对象“类”</h2><h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><ul>\n<li>数据及对数据的操作应该封装打包作为数据结构</li>\n<li>使用<strong>类（class）</strong>对数据结构进行分类</li>\n<li>类的核心概念<ul>\n<li>实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同</li>\n<li>继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法</li>\n<li>多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 类的机制</h3><ul>\n<li>如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例</li>\n<li>构造函数：<ul>\n<li>用于构造类实例，一个特殊的类方法，通常和类同名</li>\n<li>返回一个对象（即：类实例）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><ul>\n<li>子类和父类是完全不同的类，子类会包含<strong>父类原始行为的副本</strong>，但也可以重复父类的行为甚至定义新的行为</li>\n<li>多态：<ul>\n<li>子类可以重写父类方法</li>\n<li>继承链中不同层次的方法名可以被多次定义</li>\n</ul>\n</li>\n<li>子类可以相对引用它继承的父类，这种相对引用称为 super</li>\n<li>JS 自身不提供多重继承</li>\n</ul>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 混入</h3><ul>\n<li>JS 中对象没有自动复制的行为</li>\n<li>显式混入<ul>\n<li>如果子对象中不存在对应属性则复制父亲对象属性<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">souceObj<span class=\"token punctuation\">,</span> targetObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> souceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 只会在不存在的情况下复制</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> targetObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttargetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> souceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">let</span> Vehicle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">engines</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">ignition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发动引擎！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">let</span> Car <span class=\"token operator\">=</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">wheels</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式多态</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">启动</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个轮子的这辆车</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>显示混入的变体：寄生继承<ul>\n<li>先通过潜拷贝获取父对象，再添加新的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隐式混入<ul>\n<li>通过 <code>call(this)</code> 方法把父对象方法绑定到子对象</li>\n</ul>\n</li>\n<li>尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患</li>\n</ul>\n<h2 id=\"第五章：原型\"><a href=\"#第五章：原型\" class=\"headerlink\" title=\"第五章：原型\"></a>第五章：原型</h2><h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 [[Prototype]]</h3><ul>\n<li><code>[[Prototype]]</code>：JS 对象的内置属性，是对于其他对象的引用</li>\n<li>对于属性查找操作（如：<code>[[Get]]</code>，for…in，in），<strong>如果在对象本身找不到需要的属性，就通过 <code>[[Prototype]]</code> 访问对象的原型链向上查找</strong>，找不到就返回 undefined</li>\n<li>所有普通的 <code>[[Prototype]]</code> 最终都会指向内置的 Object.prototype</li>\n<li>原型链 = <code>[[Prototype]]</code> 链</li>\n<li>属性设置<ul>\n<li>对于 <code>obj.foo = &quot;bar&quot;;</code> 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 <code>[[Prototype]]</code> 查找原型链，如果原型链找不到则直接赋值在 obj 上</li>\n<li>屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：<strong>选择最底层的属性</strong>），但分为三种情况讨论<ul>\n<li>原型链属性 <code>writable: true</code> ，会直接在底层对象新增一个属性，<strong>属于屏蔽属性</strong></li>\n<li>原型链属性 <code>writable: false</code> ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值</li>\n<li>原型链存在该属性并且是一个 setter，则直接调用该 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-”类“\"><a href=\"#5-2-”类“\" class=\"headerlink\" title=\"5.2 ”类“\"></a>5.2 ”类“</h3><ul>\n<li>JS 中不会把一个对象（类）复制到另一个对象（实例），<strong>只是关联起来</strong></li>\n<li><code>new Foo()</code> 会生成一个新对象，新对象的内部链接 <code>[[Prototype]]</code> 关联到的是 <code>Foo.prototype</code> 对象</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png\"\n                     \n                ></li>\n<li>构造函数：<ul>\n<li>函数原型的 construtor 默认指向自己，即：<code>Foo.prototype.constructor === Foo</code> 是 true</li>\n<li>调用 <code>new</code> 创建的对象的 constructor 属性指向 -&gt; 创建这个对象的函数</li>\n<li>参考代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>JS 中的函数就是普通函数</li>\n<li>new 会劫持所有所有的普通函数，并通过构造对象调用它</li>\n<li>注意：<code>.constructor</code> 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-（原型）继承\"><a href=\"#5-3-（原型）继承\" class=\"headerlink\" title=\"5.3 （原型）继承\"></a>5.3 （原型）继承</h3><ul>\n<li>在 ES6 之前，将子对象的 prototype 通过 <code>Object.create()</code> 指向父亲对象</li>\n<li>ES6 可以通过 <code>Object.setPrototypeOf</code> 直接修改子对象原型，两种方式效果相同<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES 6 之前</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES 6</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查找”类“关系<ul>\n<li>反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）</li>\n<li>通过 instanceof 查找反射（不建议使用）：<code>a instanceof Foo;</code> ，a 的整条原型链是否有指向 Foo.prototype 的对象</li>\n<li>通过 <code>Foo.prototype.isPrototypeOf( a );</code> 查找反射：a 的原型链是否出现过 Foo.prototype</li>\n<li><code>.__proto__</code> 不是一个属性，而是一个 getter / setter<ul>\n<li>通过 ES6 的方式实现 <code>.__proto__</code> 参考<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><ul>\n<li><code>let bar = Object.create( obj )</code> 可以将新对象 bar 原型指向 obj</li>\n<li>Object.create() 在 ES5 中的实现代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"第六章：行为委托\"><a href=\"#第六章：行为委托\" class=\"headerlink\" title=\"第六章：行为委托\"></a>第六章：行为委托</h2><ul>\n<li>在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法</li>\n<li>委托理论<ul>\n<li>对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系</li>\n<li>定义的都是对象，一个对象通过 <code>Object.create()</code> 创建，把 <code>[[Prototype]]</code> 委托给另一个对象</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Task <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">setID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">outputID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让XYZ委托Task</span>\n<span class=\"token constant\">XYZ</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prepareTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> Label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setID</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> Label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">outputTaskDetails</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">outputID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>这类编码风格称为 对象关联（OLOO，objects linked to other objects）<ul>\n<li>对于实例化后的属性数据都存储于子对象上</li>\n<li>尽量避免原型链上存在相同的命名</li>\n<li>子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象</li>\n</ul>\n</li>\n<li>禁止双向委托</li>\n</ul>\n<h2 id=\"附录：ES6-中的-Class\"><a href=\"#附录：ES6-中的-Class\" class=\"headerlink\" title=\"附录：ES6 中的 Class\"></a>附录：ES6 中的 Class</h2><ul>\n<li>ES6 中的 class 语法糖解决的问题<ul>\n<li>不再使用 .prototype</li>\n<li>子类通过 extends 直接继承父类，不需要再通过 Object.create()</li>\n<li>可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法</li>\n<li>class 语法不能声明属性（需要通过 constructor），避免错误</li>\n</ul>\n</li>\n<li>class 语法糖存在的问题<ul>\n<li>如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式</li>\n<li>super 不是动态绑定的，而是在声明时静态绑定的</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：关于-this\"><a href=\"#第一章：关于-this\" class=\"headerlink\" title=\"第一章：关于 this\"></a>第一章：关于 this</h2><ul>\n<li>误解<ul>\n<li>this 不是指向函数自身</li>\n<li>this 在任何情况下都不指向函数的词法作用域</li>\n</ul>\n</li>\n<li>this 是函数被调用时发生的绑定，<strong>指向什么完全取决于在哪里被调用</strong></li>\n</ul>\n<h2 id=\"第二章-this-全面解析\"><a href=\"#第二章-this-全面解析\" class=\"headerlink\" title=\"第二章 this 全面解析\"></a>第二章 this 全面解析</h2><h3 id=\"2-1-调用位置\"><a href=\"#2-1-调用位置\" class=\"headerlink\" title=\"2.1 调用位置\"></a>2.1 调用位置</h3><ul>\n<li>确认函数的调用位置的方式是：分析调用栈</li>\n</ul>\n<h3 id=\"2-2-绑定规则\"><a href=\"#2-2-绑定规则\" class=\"headerlink\" title=\"2.2 绑定规则\"></a>2.2 绑定规则</h3><ul>\n<li>默认绑定<ul>\n<li>在没有其他规则时，非严格模式，this 默认指向全局变量，严格模式，this 指向 undefined</li>\n<li>非严格模式示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>隐式绑定<ul>\n<li>当函数引用有上下文时，隐式绑定规则会把函数调用中的 this 绑定到上下文对象</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo\n <span class=\"token punctuation\">&#125;</span>\n\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>隐式丢失：丢失隐式绑定对象，从而使用默认绑定</li>\n<li>非严格模式的隐式丢失示例<ul>\n<li>此时 bar 引用的 foo 函数本身<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>传入回调参数是同样会存在隐式丢失问题<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// fn 引用的就是 foo</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>显式绑定<ul>\n<li>使用 call 函数或者 apply 函数实现</li>\n<li>第一个参数是一个对象，把对象绑定到 this，调用函数时再指定这个 this</li>\n<li>call 函数示例<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>硬绑定：创建函数并在内部手工调用 call 或 apply，强制把函数的 this 绑定到对象<ul>\n<li>应用：创建包裹函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>应用：bind 函数：把参数设置为 this 到上下文并调用原始函数，返回一个新函数<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar 是一个新的函数，this 指向 obj</span>\n\n <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 3</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>new 绑定<ul>\n<li>new 调用函数（发生构造函数调用）过程<ul>\n<li>创建一个全新的对象</li>\n<li>新对象被执行<code>[[原型]]</code>连接</li>\n<li>新对象被绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，new 表达式的函数调用自动返回这个新对象</li>\n</ul>\n</li>\n<li>示例代码：new 操作符会构造一个新对象并绑定到 foo 调用的 this 上<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-优先级\"><a href=\"#2-3-优先级\" class=\"headerlink\" title=\"2.3 优先级\"></a>2.3 优先级</h3><ul>\n<li>显式绑定优先级 &gt; 隐式绑定</li>\n<li>new 绑定优先级 &gt; 隐式绑定</li>\n<li><strong>判断 this 规则的方式</strong><ul>\n<li>是否在 new 中调用，是的话 this 绑定的是新创建的对象</li>\n<li>是否通过 call、apply、bind 的显示绑定，是的话 this 绑定的是指定的对象</li>\n<li>是否在某个上下文对象中调用绑定，是的话 this 绑定的是上下文对象</li>\n<li>以上三种都不是的话，使用默认绑定，严格模式帮定至 undefined，非严格模式绑定到全局对象</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205200347.png\"\n                     \n                ></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-绑定例外\"><a href=\"#2-4-绑定例外\" class=\"headerlink\" title=\"2.4 绑定例外\"></a>2.4 绑定例外</h3><ul>\n<li>如果把 null / undefined 作为 this 绑定对象传入 call、apply、bind，这些 null / undefined 在调用时会被忽略，使用的是隐式绑定<ul>\n<li>应用：apply 展开数组 or 函数柯里化，传入一个 null 作为占位符<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token comment\">// 数组展开为参数</span>\n <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 3</span>\n\n <span class=\"token comment\">// 使用 bind 进行柯里化</span>\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a: 2, b: 5</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以使用 <code>Object.create(null)</code> 创建空对象（不会创建 <code>Object.prototype</code>，比 <code>&#123;&#125;</code> 更空），称作 DMZ 对象</li>\n</ul>\n</li>\n<li>间接引用情况会导致绑定例外<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n o<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n <span class=\"token comment\">// 注意：返回值是目标函数的引用，相当于直接调用 foo 函数</span>\n <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>软绑定：可以手动指定 this，否则应用默认隐式绑定或默认绑定<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>softBind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">softBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 获取所用 curried 参数</span>\n  <span class=\"token keyword\">var</span> curried <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bound</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n\t  <span class=\"token operator\">!</span><span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token punctuation\">(</span>window <span class=\"token operator\">||</span> global<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> obj <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n\t  curried<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>curried<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  bound<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> bound<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-5-this-词法\"><a href=\"#2-5-this-词法\" class=\"headerlink\" title=\"2.5 this 词法\"></a>2.5 this 词法</h3><ul>\n<li><strong>箭头函数不使用 this 的四种规则，而是根据外层（函数或者全局）作用域决定</strong><ul>\n<li>箭头函数会继承外层函数调用的 this 绑定</li>\n<li>内部的箭头函数会捕获调用时 foo 的this，而 foo 的 this 被绑定到 obj1<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 注意：this 继承自 foo</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：对象\"><a href=\"#第三章：对象\" class=\"headerlink\" title=\"第三章：对象\"></a>第三章：对象</h2><h3 id=\"3-1-对象\"><a href=\"#3-1-对象\" class=\"headerlink\" title=\"3.1 对象\"></a>3.1 对象</h3><ul>\n<li>可以通过 <code>&#123;&#125;</code> 或者 new 关键字声明对象</li>\n</ul>\n<h3 id=\"3-2-类型\"><a href=\"#3-2-类型\" class=\"headerlink\" title=\"3.2 类型\"></a>3.2 类型</h3><ul>\n<li>内置对象<ul>\n<li>String</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error</li>\n</ul>\n</li>\n<li>JS 会自动把字面量转换为一个对象<ul>\n<li>比如：自动将字符串字面量转会为 String 对象，从而可以访问 String 对象的方法</li>\n</ul>\n</li>\n<li>null 、undefined 只有文字形式</li>\n<li>Date 只有构造形式（对象）</li>\n<li>Object、Array、Function、RegExp，只有构造形式，都是对象</li>\n</ul>\n<h3 id=\"3-3-内容\"><a href=\"#3-3-内容\" class=\"headerlink\" title=\"3.3 内容\"></a>3.3 内容</h3><ul>\n<li>可以通过 <code>.</code> 或者 <code>[]</code> 来访问对象中的属性，</li>\n<li>属性名都是字符串，所以传入的值会被自动转化为字符串</li>\n<li>可计算属性名称<ul>\n<li>使用 [] 包裹的表达式作为属性名</li>\n<li>常用于 Symbol<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> MyObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>Something<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wujieli\"</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>复制对象<ul>\n<li>浅拷贝<ul>\n<li>引用类型还是指向原来的对象</li>\n<li><code>JSON.parse(JSON.stringify(someObj))</code> 和 <code>Object.assign()</code> 可以实现浅拷贝</li>\n</ul>\n</li>\n<li>深拷贝<ul>\n<li>引用类型复制一套独立的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>属性操作符（数据描述符）<ul>\n<li>除 value 外，还包括：writable（可写）、enumerable（可枚举）、configurable（可配置）<ul>\n<li>writable 为 false 则不可修改</li>\n<li>configurable 为 false 则不可以通过 <code>Object.defineProperty()</code> 修改属性描述符，不能删除属性</li>\n<li>enumerable 为 false，属性不会出现在循环枚举中</li>\n</ul>\n</li>\n<li>Object.defineProperty()： 添加新属性或者修改已有属性<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>对象不变性<ul>\n<li>通过 <code>writable: false</code> 和 <code>configurable: false</code> 可以创建一个常量属性，不可修改、重定义、删除</li>\n<li>Object.preventExtensions( obj ) ：禁止添加新属性</li>\n<li>Object.seal( obj ) ：创建一个密封对象，在现有对象调用 <code>Object.preventExtensions</code> 且 <code>configurable: false</code></li>\n<li>Object.freeze( obj ) ：现有对象调用 <code>Object.seal</code> 且 <code>writable: false</code></li>\n</ul>\n</li>\n<li><code>[[get]]</code> 属性<ul>\n<li>在对象中查找同名属性，找到了就返回</li>\n<li>如果没找到就根据原型链找，找不到则返回 undefined</li>\n</ul>\n</li>\n<li><code>[[put]]</code> 属性<ul>\n<li>属性是否是访问描述符，如果是并存在 setter 就调用 setter</li>\n<li>writable 是否为 false，是 false 的话非严格模式静默失败，严格模式抛出 TypeError 异常</li>\n<li>以上都不是，将值设置为该属性的值</li>\n</ul>\n</li>\n<li>访问描述符<ul>\n<li>通过 getter 获取属性，通过 setter 设置属性，通常成对出现</li>\n<li>访问描述符只有：set、get、configurable、enumerable 属性</li>\n</ul>\n</li>\n<li>属性存在性<ul>\n<li><code>[属性名称]</code> in obj：in 关键可以检查属性是否存在与对象，找不到会查找对象的原型链</li>\n<li>Object.hasOwnProperty()：查找对象是否包含属性，不会查找原型链</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-遍历\"><a href=\"#3-4-遍历\" class=\"headerlink\" title=\"3.4 遍历\"></a>3.4 遍历</h3><ul>\n<li>for…in 循环：遍历对象可枚举属性，包括原型链</li>\n<li>for…of 循环：循环遍历对象的所有 value<ul>\n<li>向被访问对象请求一个迭代器，通过迭代器对象的 next() 方法实现遍历所有值</li>\n<li>数组内置 <code>@@iterator</code> 返回迭代器对象的函数</li>\n<li>普通对象没有 <code>@@terator</code> 目的是为了避免影响未来对象类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：混合对象“类”\"><a href=\"#第四章：混合对象“类”\" class=\"headerlink\" title=\"第四章：混合对象“类”\"></a>第四章：混合对象“类”</h2><h3 id=\"4-1-类理论\"><a href=\"#4-1-类理论\" class=\"headerlink\" title=\"4.1 类理论\"></a>4.1 类理论</h3><ul>\n<li>数据及对数据的操作应该封装打包作为数据结构</li>\n<li>使用<strong>类（class）</strong>对数据结构进行分类</li>\n<li>类的核心概念<ul>\n<li>实例化：类虽然有相同的属性或方法，但是实例中的数据可能不同</li>\n<li>继承：类的属性或方法不用在子类重复定义，而是直接继承父类的属性或方法</li>\n<li>多态：父类通用行为可以被子类更特殊行为重写，从而扩展子类的行为</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-类的机制\"><a href=\"#4-2-类的机制\" class=\"headerlink\" title=\"4.2 类的机制\"></a>4.2 类的机制</h3><ul>\n<li>如果把类比做建筑中的图纸，通过图纸（类）建造出来的房子就是实例</li>\n<li>构造函数：<ul>\n<li>用于构造类实例，一个特殊的类方法，通常和类同名</li>\n<li>返回一个对象（即：类实例）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-类的继承\"><a href=\"#4-3-类的继承\" class=\"headerlink\" title=\"4.3 类的继承\"></a>4.3 类的继承</h3><ul>\n<li>子类和父类是完全不同的类，子类会包含<strong>父类原始行为的副本</strong>，但也可以重复父类的行为甚至定义新的行为</li>\n<li>多态：<ul>\n<li>子类可以重写父类方法</li>\n<li>继承链中不同层次的方法名可以被多次定义</li>\n</ul>\n</li>\n<li>子类可以相对引用它继承的父类，这种相对引用称为 super</li>\n<li>JS 自身不提供多重继承</li>\n</ul>\n<h3 id=\"4-4-混入\"><a href=\"#4-4-混入\" class=\"headerlink\" title=\"4.4 混入\"></a>4.4 混入</h3><ul>\n<li>JS 中对象没有自动复制的行为</li>\n<li>显式混入<ul>\n<li>如果子对象中不存在对应属性则复制父亲对象属性<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">souceObj<span class=\"token punctuation\">,</span> targetObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> souceObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 只会在不存在的情况下复制</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> targetObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\ttargetObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> souceObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">return</span> targetObj<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">let</span> Vehicle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">engines</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">ignition</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发动引擎！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">let</span> Car <span class=\"token operator\">=</span> <span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>Vehicle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">wheels</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token function-variable function\">drive</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式多态</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">启动</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wheels<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个轮子的这辆车</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Car<span class=\"token punctuation\">.</span><span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>显示混入的变体：寄生继承<ul>\n<li>先通过潜拷贝获取父对象，再添加新的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>隐式混入<ul>\n<li>通过 <code>call(this)</code> 方法把父对象方法绑定到子对象</li>\n</ul>\n</li>\n<li>尽量避使用混入，因为复制的是函数的引用而不是自身，可能会造成隐患</li>\n</ul>\n<h2 id=\"第五章：原型\"><a href=\"#第五章：原型\" class=\"headerlink\" title=\"第五章：原型\"></a>第五章：原型</h2><h3 id=\"5-1-Prototype\"><a href=\"#5-1-Prototype\" class=\"headerlink\" title=\"5.1 [[Prototype]]\"></a>5.1 [[Prototype]]</h3><ul>\n<li><code>[[Prototype]]</code>：JS 对象的内置属性，是对于其他对象的引用</li>\n<li>对于属性查找操作（如：<code>[[Get]]</code>，for…in，in），<strong>如果在对象本身找不到需要的属性，就通过 <code>[[Prototype]]</code> 访问对象的原型链向上查找</strong>，找不到就返回 undefined</li>\n<li>所有普通的 <code>[[Prototype]]</code> 最终都会指向内置的 Object.prototype</li>\n<li>原型链 = <code>[[Prototype]]</code> 链</li>\n<li>属性设置<ul>\n<li>对于 <code>obj.foo = &quot;bar&quot;;</code> 赋值语句来说，如果 foo 属性不是存在 obj 自身，就会通过 <code>[[Prototype]]</code> 查找原型链，如果原型链找不到则直接赋值在 obj 上</li>\n<li>屏蔽属性：如果 foo 同时存在于 obj 和其原型链，则 obj 会屏蔽所有原型链上的所有 foo 属性（即：<strong>选择最底层的属性</strong>），但分为三种情况讨论<ul>\n<li>原型链属性 <code>writable: true</code> ，会直接在底层对象新增一个属性，<strong>属于屏蔽属性</strong></li>\n<li>原型链属性 <code>writable: false</code> ，原型链属性无法修改，也无法在底层对象新增属性，严格模式会报错，非严格模式会静默忽略赋值</li>\n<li>原型链存在该属性并且是一个 setter，则直接调用该 setter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-”类“\"><a href=\"#5-2-”类“\" class=\"headerlink\" title=\"5.2 ”类“\"></a>5.2 ”类“</h3><ul>\n<li>JS 中不会把一个对象（类）复制到另一个对象（实例），<strong>只是关联起来</strong></li>\n<li><code>new Foo()</code> 会生成一个新对象，新对象的内部链接 <code>[[Prototype]]</code> 关联到的是 <code>Foo.prototype</code> 对象</li>\n<li><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20220205201345.png\"\n                     \n                ></li>\n<li>构造函数：<ul>\n<li>函数原型的 construtor 默认指向自己，即：<code>Foo.prototype.constructor === Foo</code> 是 true</li>\n<li>调用 <code>new</code> 创建的对象的 constructor 属性指向 -&gt; 创建这个对象的函数</li>\n<li>参考代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>JS 中的函数就是普通函数</li>\n<li>new 会劫持所有所有的普通函数，并通过构造对象调用它</li>\n<li>注意：<code>.constructor</code> 仅仅是一个不可枚举，但是可以修改或配置的属性，因此在创建对象时可以被覆盖，也就不是上面的等式了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-（原型）继承\"><a href=\"#5-3-（原型）继承\" class=\"headerlink\" title=\"5.3 （原型）继承\"></a>5.3 （原型）继承</h3><ul>\n<li>在 ES6 之前，将子对象的 prototype 通过 <code>Object.create()</code> 指向父亲对象</li>\n<li>ES6 可以通过 <code>Object.setPrototypeOf</code> 直接修改子对象原型，两种方式效果相同<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ES 6 之前</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES 6</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>查找”类“关系<ul>\n<li>反射（内省）：查找一个实例（JS 中的对象）的继承祖先（JS 中的委托关联）</li>\n<li>通过 instanceof 查找反射（不建议使用）：<code>a instanceof Foo;</code> ，a 的整条原型链是否有指向 Foo.prototype 的对象</li>\n<li>通过 <code>Foo.prototype.isPrototypeOf( a );</code> 查找反射：a 的原型链是否出现过 Foo.prototype</li>\n<li><code>.__proto__</code> 不是一个属性，而是一个 getter / setter<ul>\n<li>通过 ES6 的方式实现 <code>.__proto__</code> 参考<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__proto__\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-对象关联\"><a href=\"#5-4-对象关联\" class=\"headerlink\" title=\"5.4 对象关联\"></a>5.4 对象关联</h3><ul>\n<li><code>let bar = Object.create( obj )</code> 可以将新对象 bar 原型指向 obj</li>\n<li>Object.create() 在 ES5 中的实现代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"第六章：行为委托\"><a href=\"#第六章：行为委托\" class=\"headerlink\" title=\"第六章：行为委托\"></a>第六章：行为委托</h2><ul>\n<li>在面向类的设计模式中，鼓励使用继承和多态，通常先定义一个父类和通用方法，再定义子类和子类的特有方法，或者重写父类方法</li>\n<li>委托理论<ul>\n<li>对象找不到属性或方法时，会把这个请求委托给另一个对象，对象间是兄弟关系</li>\n<li>定义的都是对象，一个对象通过 <code>Object.create()</code> 创建，把 <code>[[Prototype]]</code> 委托给另一个对象</li>\n<li>示例代码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Task <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function-variable function\">setID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token function-variable function\">outputID</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让XYZ委托Task</span>\n<span class=\"token constant\">XYZ</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">prepareTask</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span> Label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setID</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> Label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">XYZ</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">outputTaskDetails</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">outputID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>这类编码风格称为 对象关联（OLOO，objects linked to other objects）<ul>\n<li>对于实例化后的属性数据都存储于子对象上</li>\n<li>尽量避免原型链上存在相同的命名</li>\n<li>子对象包含 this 的方法在调用原型链上的方法是，触发了隐式绑定，this 还是指向子对象</li>\n</ul>\n</li>\n<li>禁止双向委托</li>\n</ul>\n<h2 id=\"附录：ES6-中的-Class\"><a href=\"#附录：ES6-中的-Class\" class=\"headerlink\" title=\"附录：ES6 中的 Class\"></a>附录：ES6 中的 Class</h2><ul>\n<li>ES6 中的 class 语法糖解决的问题<ul>\n<li>不再使用 .prototype</li>\n<li>子类通过 extends 直接继承父类，不需要再通过 Object.create()</li>\n<li>可以通过 super() 实现相对多态，任何方法都可以引用原型链上的同名方法</li>\n<li>class 语法不能声明属性（需要通过 constructor），避免错误</li>\n</ul>\n</li>\n<li>class 语法糖存在的问题<ul>\n<li>如果需要跟踪实例间的共享属性，只能使用 .prototype 的方式</li>\n<li>super 不是动态绑定的，而是在声明时静态绑定的</li>\n</ul>\n</li>\n</ul>\n"},{"title":"你不知道的 JS 学习笔记：类型和语法","date":"2022-02-21T11:40:23.000Z","_content":"## 第一章：类型\n- **JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值**\n- JS 的七种内置类型\n  - number 数字\n  - string 字符串\n  - boolean 布尔值\n  - null 空值\n  - undefined 未定义\n  - symbol 符号\n  - object 对象（除了 object 其他都是基本类型）\n- 可以使用 typeof 检查基本类型\n    ``` js\n        console.log(typeof \"42\" === \"string\"); // true\n        console.log(typeof 42 === \"number\"); // true\n        console.log(typeof true === \"boolean\"); // true\n        console.log(typeof null === \"object\"); // true 注意 null 是 object，这是 JS 的 BUG\n        console.log(typeof undefined === \"undefined\"); // true\n        // ES6中新加入的类型\n        console.log(typeof Symbol() === \"symbol\"); // true\n        console.log(typeof { life: 42 } === \"object\"); // true\n    ```\n- Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）\n- JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言\n- undefined\n\t- 已经在作用域声明，但还没被赋值\n\t- 在作用域中没有被声明是 undeclared\n\t- **注意**：对于上面两种情况，typeof 返回的都是 undefined\n\n## 第二章：值\n- 2.1 数组\n\t- 数组可以存放任何类型的值\n\t- JS 中数组不用预先声明大小\n\t- 数组也是对象，可以包含自己的键值属性，但不会计算在 length 中\n\t- 类数组\n\t\t- 一组通过数字索引的值，比如：DOM 查询操作返回结果\n\t\t- 可以使用 `Array.slice` 或 `Array.from` 将类数组转化为数组\n- 2.2 字符串\n\t- 字符串可以借用数组方法\n\t\t- 借用 join 方法示例：`let b = Array.prototype.join( a, \"-\");`\n\t\t- 无法直接借用 reverse 方法，需要先转化为字符数组才能使用\n            ``` js\n                let c = a\n                .split( \"\" )\n                .reverse()\n                .join( \"\" );\n            ```\n- 2.3 数字\n\t- 数字以十进制的方式显示，小数后的 0 会被省略\n\t- `tofiexed()` 方法可以指定小数部分的显示位数，结果是字符串形式\n\t- `toprecision()` 方法可以指定有效位数的显示位数\n        ``` js\n            var a = 42.59; a.toPrecision(1); // \"4e+1\"\n            a.toPrecision(2); // \"43\"\n            a.toPrecision(3); // \"42.6\"\n            a.toPrecision(4); // \"42.59\"\n            a.toPrecision(5); // \"42.590\"\n            a.toPrecision(6); // \"42.5900\"\n        ```\n\t- 存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）\n        ``` js\n            console.log(0.1 + 0.2 === 0.3); // false\n        ```\n\t\t- 原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false\n\t\t- 解决方案：使用误差范围值\n\t\t\t- ES6 中定义为 `Number.EPSILON`,通常为：2^-52 (2.220446049250313e-16)\n\t\t\t- 使用误差范围判断两个数字是否相等\n                ``` js\n                    function numbersCloseEnoughToEqual(n1, n2) {\n                    return Math.abs(n1 - n2) < Number.EPSILON;\n                    }\n\n                    console.log(numbersCloseEnoughToEqual(0.1 + 0.2, 0.3)); // true\n                    console.log(numbersCloseEnoughToEqual(0.0000001, 0.0000002)); // false\n                ```\n\t- 整数的安全范围\n\t\t- ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]\n\t\t- 即：[-(2^53  -  1), 2^53  -  1]\n\t- 判断是否是整数\n\t\t- 使用 `Number.isInteger()` 判断是否是整数\n\t\t- 使用 `Number.isSafeInteger()` 判断是否是安全范围内的整数\n- 2.4 特殊数值\n\t- undefined 和 null\n\t\t- undefined 类型只有一个值，即：undefined\n\t\t- null 类型只有一个值，即：null\n\t\t- undefined 指未被赋值，null 指曾被赋值，但目前没有值\n\t\t- undefined 可以作为变量声明和赋值（**不要这么做**）\n\t- void\n\t\t- 指没有返回值，多用于函数没有返回结果\n\t\t- **可以使用 `void 0` 获取真正的 undefined**（非严格模式 undefined 可以被赋值，而 `void 0` 必定返回 undefined）\n\t- 特殊的数字\n\t\t- NAN：\n\t\t\t- 无效数值（仍然是一个数字类型，但指数字类型中的错误情况）\n\t\t\t- NAN 和谁比较都是 false，包括自己\n\t\t\t- 使用 `Number.isNaN()` 判断一个数字是否为 NAN\n                ``` js\n                    if (!Number.isNaN) {\n                    Number.isNaN = function (n) {\n                        return typeof n === \"number\" && window.isNaN(n);\n                    };\n                    }\n                ```\n\t\t- 无穷数字：Infinity\n\t\t\t- ES6 中定义为：`Number.POSITIVE_INFINITY`，`Number.NEGATIVE_INFINITY`\n\t\t\t- 计算结果一旦溢出为无穷数，就无法再转换为有穷数\n\t\t- 零值：0、-0\n\t\t\t- 乘法和除法运算会得到 -0\n\t\t\t- 存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）\n\t\t\t- 0 === -0\n\t- 特殊等式\n\t\t- `Object.is(a, b)` 可以判断两个值是否绝对相等\n\t\t- 优先使用 == 和 ===，因为效率更高\n- 2.5 值和引用\n\t- JS 中没有指针，JS 的变量不可能指向另一个变量的引用，**JS 引用指向的是值**\n\t- 基本类型通过**复制**方式复制或传递，引用类型通过**引用**方式复制或传递\n\t- 函数中的引用问题\n\t\t- 函数参数 a 通过**复制**的方式复制给函数内的 x\n\t\t- **引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值**\n            ``` js\n                function foo(x) {\n                x.push(4);\n                console.log(x);\n\n                // 注意引用 x 指向了其他的值\n                x = [4, 5, 6];\n                x.push(7);\n                console.log(x);\n                }\n\n                const a = [1, 2, 3];\n                foo(a); // 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]\n                console.log(a); // [ 1, 2, 3, 4 ]\n            ```\n\t- 我们无法自行决定使用复制赋值还是引用赋值，**一切由值的类型决定**\n\n## 第三章：原生函数\n- JS 常用的原生函数\n\t- String()\n\t- Number()\n\t- Boolean()\n\t- Array()\n\t- Object()\n\t- Function()\n\t- RegExp()\n\t- Date()\n\t- Error()\n\t- Symbol()\n- 3.1 内部属性 `[[Class]]`\n\t- 所有 typeof 返回为 “object” 的对象都包含内部属性 `[[Class]]`，可以通过 toString 方法查看\n        ``` js\n            console.log(Object.prototype.toString.call([1, 2, 3])); // [object Array]\n            console.log(Object.prototype.toString.call(() => {})); // [object Function]\n        ```\n- 3.2 封装对象包装\n\t- 基本类型没有如：`length` 属性和 `toString()` 方法，**JS 会自动为基本类型包装一个封装对象**\n\t- 浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率\n- 3.3 拆封\n\t- 可以使用 `valuOf()` 获取封装对象中基本类型的值\n        ``` js\n            let a = new String(\"abc\");\n            let b = new Number(12);\n            let c = new Boolean(true);\n\n            console.log(a.valueOf()); // abc\n            console.log(b.valueOf()); // 12\n            console.log(c.valueOf()); // true\n        ```\n- 3.4 原生函数作为构造函数\n\t- 尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题\n\t- 尽量不要创建和使用空单元数组\n\t- 对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）\n\t- Symbol\n\t\t- 具有唯一性的特殊值，用于声名对象属性不容易导致重名\n\t\t- 使用 Symbol() 原声构造函数自定义符号**不能**带 `new` 关键字\n\t\t- 注意：Symbol 不是对象，而是**一个基本类型**\n\t- 原生原型\n\t\t- 可以将 `Array.prototype.join()` 写作 `Array#join()`\n\t\t- 三个特殊的默认类型\n\t\t\t- Function.prototype 默认是一个函数\n\t\t\t- RegExp.prototype 默认是一个正则表达式\n\t\t\t- Array. prototype 默认是一个数组\n\t\t\t- 默认值在使用的时候只创建一次，可以节约资源\n\n## 第四章：强制类型转换\n- 4.1 值类型转换\n\t- 类型转换：值的类型从一种类型转换为另一种类型，为显式转换\n\t- 隐式的类型转换即强制类型转换\n\t- 类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时\n    ``` js\n        const a = 31;\n        console.log(a + \"\"); // 隐式类型转换\n        console.log(String(a)); // 显式类型转换\n    ```\n- 4.2 抽象值操作\n\t- 抽象操作 ToString\n\t\t- null -> \"null\"\n\t\t- undefined -> \"undefined\"\n\t\t- true -> \"true\"\n\t\t- 6 -> \"6\"\n\t\t- 数组特殊：[1,2,3] -> \"1,2,3\"\n\t\t- `JSON.stringfy()` 转化为字符串也用了 ToString\n\t\t\t- 结果总是字符串：`JSON.stringify(\"42\"); // \"\"42\"\" 包含双引号`\n\t\t\t- 字符串、数字、布尔值、null 的规则和 TOString 相同\n\t\t\t- 遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null\n\t\t\t- 包含循环引用会报错\n\t\t\t- 如果对象存在 `toJSON()` 方法，调用 `JSON.stringfy()` 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值\n\t- 抽象操作 ToNumber\n\t\t- 数字 -> 自身\n\t\t- 布尔值：false -> 0，true -> 1\n\t\t- null -> 0\n\t\t- undefined -> NaN\n\t\t- 对象 -> 抽象操作 ToPrimitive 规则\n\t- 抽象操作 ToBoolean\n\t\t- undefined、null、false、\"\"、0 / -0、NaN -> false\n\t\t- 上述以外 -> true\n\t- 抽象操作 ToPrimitive\n\t\t- 如果有 `Symbol.toPrimitive` 方法，优先调用\n\t\t- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n\t\t- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n\t\t- 以上三种没有转换成功则报错\n\n- 4.3 显式强制类型转换\n\t- 字符串、数字间的相互转换\n\t\t- 使用 `String()`、`Number()`、`.toString()` 方法\n\t\t- 使用 `+` 可以将字符串转化为数字\n\t\t- 字符串 -> 数字\n\t\t\t- 如果只有数字 -> 十进制数字\n\t\t\t- 如果包含有效浮点数数字 -> 浮点数数字\n\t\t\t- \"\" -> 0\n\t\t\t- 以上三种以外为 NaN\n\t\t- parseInt(string, radix) 方法\n\t\t\t- 如果 string 开头是 x / X -> 16 进制数字，开头是 0 -> 8 进制数字\n\t\t\t- 最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）\n\t\t\t- ES5 之后默认转化为 10 进制\n\t- `+` 可以将日期显示转化为数字，比如获取当前时间戳：`+new Date()`，但做好还是使用 `new Date().getTime()` 和 `Date.now()` 的方式\n\t- `~` 非运算符\n\t\t- `~x` 大致等同于 `-(x+1)`，`console.log(~42); // 43`\n\t\t- `~-1` -> `0`，可以用于如：`indexOf()` 方法返回为 -1 情况\n\t- 显示转化为布尔值\n\t\t- 使用 `Boolean()` 方法\n\t\t- 使用 `!!` ，第一个 `!` 将值显式转化为布尔值，第二个 `!` 将结果反转回原值\n\n- 4.4 隐式强制类型转换\n\t- 字符串与数字之间隐式强制类型转换\n\t\t- 使用 `+` 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法\n            ``` js\n                console.log(1 + 2); // 3\n                console.log(1 + \"2\"); // 12\n                console.log([1, 2] + [3, 4]); // 1,23,4\n            ```\n\t\t- `数字 + \"\"` 将数字转化为字符串，使用是 `valueOf()` 方法\n\t\t- 使用 `String(数字)` 的方式将数字转化为字符串使用的是 `toString()` 方法\n\t\t- 所以在定制 `valueOf()` 和 `toString()` 方法要注意，因为会影响强制类型转换的结果\n\t\t- `字符串 - 0` 可以将字符串转化为数字\n\t- 注意：`[] + {}` 和 `{} + []`，它们返回不同的结果，分别是 `[object Object]` 和 0\n\t\t- `{}` 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 `[]` 会被强制类型转换为 `\"\"`，而 {} 会被强制类型转换为 `[object Object]`\n\t\t- `{}` 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 `[]` 显式强制类型转换为 0\n\t- 布尔值 -> 数字的隐式强制类型转换\n\t\t- undefined、null、false、\"\"、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1\n\t- 转换为布尔值的隐式强制类型转换\n\t\t- 以下五种情况非布尔值会被强制转换为布尔值\n\t\t\t- `if()` 判断表达式\n\t\t\t- `for ( .. ; .. ; .. )` 语句中的第二个条件判断表达式\n\t\t\t- `while()` 和 `do...while()` 判断表达式\n\t\t\t- `?:` 判断表达式\n\t\t\t- `||` 和 `&& ` 判断表达式\n\t- `&&` 和 `||` 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值\n\t\t- `let a = b || \"123\";` 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123\n\t\t- `a && foo()` 等价于 `if (a) { foo() };`\n\t- Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误\n        ``` js\n            let s1 = Symbol(\"cool\");\n            String(s1); // \"Symbol(cool)\"\n            let s2 = Symbol(\"not cool\");\n            s2 + \"\"; // TypeError\n        ```\n- 4.5 宽松相等和严格相等\n\t- **`==` 允许在相等比较中进行强制类型转换，而 `===` 不允许**\n\t- 抽象相等（`==` 的行为）\n\t\t- 如果两个值的类型相同，就仅比较它们是否相等\n\t\t\t- 注意：`NaN` 不等于 `NaN`，`+0` 不等于 `-0`\n\t\t- 两个对象指向同一个值时即视为相等，不发生强制类型转换\n\t\t- `==` 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较\n\t\t- 在 `==` 中 null 和 undefined 相等\n\n- 4.6 抽象关系比较\n\t- 对于 `a < b` 的比较规则\n\t\t- 双方先调用 ToPrimitive 转化为字符串，\n\t\t\t- 如果存在数字就转化为数字比较\n\t\t\t- 如果双方都是字符串就按字母顺序比较\n\n## 第五章：语法\n- 5.1 语句和表达式\n\t- 语句和表达式示例\n        ``` js\n            let a = 3 * 5; // 声明语句\n            let b;\n            b = a; // 赋值表达式\n            b; // 表达式语句\n        ```\n\t- 语句都有一个结果值，结果值也包括 undefined\n\t\t- 在浏览器 console 输入语句，默认会显示最后一条语句的结果值\n\t- 表达式的副作用：造成其他的改变\n\t\t- 函数调用产生的副作用\n            ``` js\n                function foo() {\n                a = a + 1;\n                }\n\n                var a = 1;\n                foo(); // 结果值：undefined，副作用：a 的值被改变\n            ```\n\t\t- `delete` 操作对象的副作用是属性从对象中被删除\n\t- 上下文规则\n\t\t- 同样的语法在不同的情况会有不同的解释\n\t\t- 大括号 `{}` 规则\n\t\t\t- 定义对象常量\n\t\t\t\t- a 是赋值的对象（左值），{...} 好似所赋予的值（右值）\n                    ``` js\n                        let a = {\n                        foo: bar() // 假设 bar 已经声明\n                        }\n                    ```\n\t\t\t- 标签\n\t\t\t\t- `{}` 在此是为一个普通的代码块\n\t\t\t\t- 标签语句：`foo` 是 `bar()` 的标签，即通过 `foo` 能够跳转到 `bar()` 函数\n\t\t\t\t\t- 比如 `break` 语句可以从内层循环条装到外层循环或者结束循环，所以 `break` 也是一个标签\n                        ``` js\n                            {\n                            foo: bar() // 假设 bar 已经声明\n                            }\n                        ```\n\t\t\t- 对象解构\n\t\t\t- `if...else` 的代码块\n- 5.2 运算符优先级\n\t- `,` 连接一系列语句时，它的优先级最低\n\t- `&&` 运算符的优先级 > `=`\n\t- `&&` 运算符优先级 > `||`\n\t- 短路特性：进行 `&&` 或 `||` 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断\n\t- 三元运算符的执行方式\n\t\t- `a ? b : c ? d : e;` 等价于 `a ? b : (c ? d : e)`\n- 5.3 自动分号\n\t- 分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号\n- 5.4 错误\n\t- 暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况\n- 5.5 函数参数\n\t- 不要同时访问命名参数和其对应的arguments数组单元\n- 5.6 try...finally\n\t- 如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃\n- 5.7 switch\n\t- switch 使用的是 `===` 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题\n        ``` js\n            var a = \"hello world\";\n            var b = 10;\n            switch (true) {\n            case a || b == 10: // 返回的是 \"hello world\"\n                // 永远执行不到这里\n                break;\n            default:\n                console.log(\"Oops\");\n            }\n        ```\n\n## 附录A：混合环境 JS\n- JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现\n- 由于浏览器兼容性问题存在可能导致与官方规范的差异\n\t- 在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）\n\t- `window.escape(..)` 和 `window.unescape(..)` 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，`window.escape( \"? foo=97%&bar=3%\" )` 结果为 `\"%3Ffoo%3D97%25%26bar%3D3%25\"`\n\t- `String.prototype.substr` 第二个参数是结束位置索引（非自包含）， `String.prototype.substring`  第二个参数是长度（需要包含的字符数）\n- 宿主对象\n\t- 内建对象和函数，比如：DOM 元素，内部的 `[[class]]` 来自预定义属性\n\t- 和普通对象的行为差异\n\t\t- 无法正常访问 object 的内建方法，如 `toString()`\n\t\t- 无法写覆盖\n\t\t- 包含一些预定义的只读属性\n\t\t- 包含无法将 this 重载为其他对象的方法\n- 声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性\n\t- 由于浏览器历史问题，**在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量**\n- 不要扩展原生原型，可能产生冲突\n- 使用 `<script> .. </script>` 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用\n\t- 下面的代码都无法运行（foo() 还未被声明）\n        ``` html\n            <script>\n                foo();\n            </script>\n            <script>\n                function foo() { .. }\n            </script>\n        ```","source":"_posts/你不知道的-JS-学习笔记：类型和语法.md","raw":"---\ntitle: 你不知道的 JS 学习笔记：类型和语法\ndate: 2022-02-21 19:40:23\ncategories: 前端\ntags: JavaScript\n---\n## 第一章：类型\n- **JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值**\n- JS 的七种内置类型\n  - number 数字\n  - string 字符串\n  - boolean 布尔值\n  - null 空值\n  - undefined 未定义\n  - symbol 符号\n  - object 对象（除了 object 其他都是基本类型）\n- 可以使用 typeof 检查基本类型\n    ``` js\n        console.log(typeof \"42\" === \"string\"); // true\n        console.log(typeof 42 === \"number\"); // true\n        console.log(typeof true === \"boolean\"); // true\n        console.log(typeof null === \"object\"); // true 注意 null 是 object，这是 JS 的 BUG\n        console.log(typeof undefined === \"undefined\"); // true\n        // ES6中新加入的类型\n        console.log(typeof Symbol() === \"symbol\"); // true\n        console.log(typeof { life: 42 } === \"object\"); // true\n    ```\n- Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）\n- JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言\n- undefined\n\t- 已经在作用域声明，但还没被赋值\n\t- 在作用域中没有被声明是 undeclared\n\t- **注意**：对于上面两种情况，typeof 返回的都是 undefined\n\n## 第二章：值\n- 2.1 数组\n\t- 数组可以存放任何类型的值\n\t- JS 中数组不用预先声明大小\n\t- 数组也是对象，可以包含自己的键值属性，但不会计算在 length 中\n\t- 类数组\n\t\t- 一组通过数字索引的值，比如：DOM 查询操作返回结果\n\t\t- 可以使用 `Array.slice` 或 `Array.from` 将类数组转化为数组\n- 2.2 字符串\n\t- 字符串可以借用数组方法\n\t\t- 借用 join 方法示例：`let b = Array.prototype.join( a, \"-\");`\n\t\t- 无法直接借用 reverse 方法，需要先转化为字符数组才能使用\n            ``` js\n                let c = a\n                .split( \"\" )\n                .reverse()\n                .join( \"\" );\n            ```\n- 2.3 数字\n\t- 数字以十进制的方式显示，小数后的 0 会被省略\n\t- `tofiexed()` 方法可以指定小数部分的显示位数，结果是字符串形式\n\t- `toprecision()` 方法可以指定有效位数的显示位数\n        ``` js\n            var a = 42.59; a.toPrecision(1); // \"4e+1\"\n            a.toPrecision(2); // \"43\"\n            a.toPrecision(3); // \"42.6\"\n            a.toPrecision(4); // \"42.59\"\n            a.toPrecision(5); // \"42.590\"\n            a.toPrecision(6); // \"42.5900\"\n        ```\n\t- 存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）\n        ``` js\n            console.log(0.1 + 0.2 === 0.3); // false\n        ```\n\t\t- 原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false\n\t\t- 解决方案：使用误差范围值\n\t\t\t- ES6 中定义为 `Number.EPSILON`,通常为：2^-52 (2.220446049250313e-16)\n\t\t\t- 使用误差范围判断两个数字是否相等\n                ``` js\n                    function numbersCloseEnoughToEqual(n1, n2) {\n                    return Math.abs(n1 - n2) < Number.EPSILON;\n                    }\n\n                    console.log(numbersCloseEnoughToEqual(0.1 + 0.2, 0.3)); // true\n                    console.log(numbersCloseEnoughToEqual(0.0000001, 0.0000002)); // false\n                ```\n\t- 整数的安全范围\n\t\t- ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]\n\t\t- 即：[-(2^53  -  1), 2^53  -  1]\n\t- 判断是否是整数\n\t\t- 使用 `Number.isInteger()` 判断是否是整数\n\t\t- 使用 `Number.isSafeInteger()` 判断是否是安全范围内的整数\n- 2.4 特殊数值\n\t- undefined 和 null\n\t\t- undefined 类型只有一个值，即：undefined\n\t\t- null 类型只有一个值，即：null\n\t\t- undefined 指未被赋值，null 指曾被赋值，但目前没有值\n\t\t- undefined 可以作为变量声明和赋值（**不要这么做**）\n\t- void\n\t\t- 指没有返回值，多用于函数没有返回结果\n\t\t- **可以使用 `void 0` 获取真正的 undefined**（非严格模式 undefined 可以被赋值，而 `void 0` 必定返回 undefined）\n\t- 特殊的数字\n\t\t- NAN：\n\t\t\t- 无效数值（仍然是一个数字类型，但指数字类型中的错误情况）\n\t\t\t- NAN 和谁比较都是 false，包括自己\n\t\t\t- 使用 `Number.isNaN()` 判断一个数字是否为 NAN\n                ``` js\n                    if (!Number.isNaN) {\n                    Number.isNaN = function (n) {\n                        return typeof n === \"number\" && window.isNaN(n);\n                    };\n                    }\n                ```\n\t\t- 无穷数字：Infinity\n\t\t\t- ES6 中定义为：`Number.POSITIVE_INFINITY`，`Number.NEGATIVE_INFINITY`\n\t\t\t- 计算结果一旦溢出为无穷数，就无法再转换为有穷数\n\t\t- 零值：0、-0\n\t\t\t- 乘法和除法运算会得到 -0\n\t\t\t- 存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）\n\t\t\t- 0 === -0\n\t- 特殊等式\n\t\t- `Object.is(a, b)` 可以判断两个值是否绝对相等\n\t\t- 优先使用 == 和 ===，因为效率更高\n- 2.5 值和引用\n\t- JS 中没有指针，JS 的变量不可能指向另一个变量的引用，**JS 引用指向的是值**\n\t- 基本类型通过**复制**方式复制或传递，引用类型通过**引用**方式复制或传递\n\t- 函数中的引用问题\n\t\t- 函数参数 a 通过**复制**的方式复制给函数内的 x\n\t\t- **引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值**\n            ``` js\n                function foo(x) {\n                x.push(4);\n                console.log(x);\n\n                // 注意引用 x 指向了其他的值\n                x = [4, 5, 6];\n                x.push(7);\n                console.log(x);\n                }\n\n                const a = [1, 2, 3];\n                foo(a); // 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]\n                console.log(a); // [ 1, 2, 3, 4 ]\n            ```\n\t- 我们无法自行决定使用复制赋值还是引用赋值，**一切由值的类型决定**\n\n## 第三章：原生函数\n- JS 常用的原生函数\n\t- String()\n\t- Number()\n\t- Boolean()\n\t- Array()\n\t- Object()\n\t- Function()\n\t- RegExp()\n\t- Date()\n\t- Error()\n\t- Symbol()\n- 3.1 内部属性 `[[Class]]`\n\t- 所有 typeof 返回为 “object” 的对象都包含内部属性 `[[Class]]`，可以通过 toString 方法查看\n        ``` js\n            console.log(Object.prototype.toString.call([1, 2, 3])); // [object Array]\n            console.log(Object.prototype.toString.call(() => {})); // [object Function]\n        ```\n- 3.2 封装对象包装\n\t- 基本类型没有如：`length` 属性和 `toString()` 方法，**JS 会自动为基本类型包装一个封装对象**\n\t- 浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率\n- 3.3 拆封\n\t- 可以使用 `valuOf()` 获取封装对象中基本类型的值\n        ``` js\n            let a = new String(\"abc\");\n            let b = new Number(12);\n            let c = new Boolean(true);\n\n            console.log(a.valueOf()); // abc\n            console.log(b.valueOf()); // 12\n            console.log(c.valueOf()); // true\n        ```\n- 3.4 原生函数作为构造函数\n\t- 尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题\n\t- 尽量不要创建和使用空单元数组\n\t- 对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）\n\t- Symbol\n\t\t- 具有唯一性的特殊值，用于声名对象属性不容易导致重名\n\t\t- 使用 Symbol() 原声构造函数自定义符号**不能**带 `new` 关键字\n\t\t- 注意：Symbol 不是对象，而是**一个基本类型**\n\t- 原生原型\n\t\t- 可以将 `Array.prototype.join()` 写作 `Array#join()`\n\t\t- 三个特殊的默认类型\n\t\t\t- Function.prototype 默认是一个函数\n\t\t\t- RegExp.prototype 默认是一个正则表达式\n\t\t\t- Array. prototype 默认是一个数组\n\t\t\t- 默认值在使用的时候只创建一次，可以节约资源\n\n## 第四章：强制类型转换\n- 4.1 值类型转换\n\t- 类型转换：值的类型从一种类型转换为另一种类型，为显式转换\n\t- 隐式的类型转换即强制类型转换\n\t- 类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时\n    ``` js\n        const a = 31;\n        console.log(a + \"\"); // 隐式类型转换\n        console.log(String(a)); // 显式类型转换\n    ```\n- 4.2 抽象值操作\n\t- 抽象操作 ToString\n\t\t- null -> \"null\"\n\t\t- undefined -> \"undefined\"\n\t\t- true -> \"true\"\n\t\t- 6 -> \"6\"\n\t\t- 数组特殊：[1,2,3] -> \"1,2,3\"\n\t\t- `JSON.stringfy()` 转化为字符串也用了 ToString\n\t\t\t- 结果总是字符串：`JSON.stringify(\"42\"); // \"\"42\"\" 包含双引号`\n\t\t\t- 字符串、数字、布尔值、null 的规则和 TOString 相同\n\t\t\t- 遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null\n\t\t\t- 包含循环引用会报错\n\t\t\t- 如果对象存在 `toJSON()` 方法，调用 `JSON.stringfy()` 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值\n\t- 抽象操作 ToNumber\n\t\t- 数字 -> 自身\n\t\t- 布尔值：false -> 0，true -> 1\n\t\t- null -> 0\n\t\t- undefined -> NaN\n\t\t- 对象 -> 抽象操作 ToPrimitive 规则\n\t- 抽象操作 ToBoolean\n\t\t- undefined、null、false、\"\"、0 / -0、NaN -> false\n\t\t- 上述以外 -> true\n\t- 抽象操作 ToPrimitive\n\t\t- 如果有 `Symbol.toPrimitive` 方法，优先调用\n\t\t- 调用 `valueOf()` 方法，如果转换为基础数据类型则返回\n\t\t- 调用 `toString()` 方法，如果转换为基础数据类型则返回\n\t\t- 以上三种没有转换成功则报错\n\n- 4.3 显式强制类型转换\n\t- 字符串、数字间的相互转换\n\t\t- 使用 `String()`、`Number()`、`.toString()` 方法\n\t\t- 使用 `+` 可以将字符串转化为数字\n\t\t- 字符串 -> 数字\n\t\t\t- 如果只有数字 -> 十进制数字\n\t\t\t- 如果包含有效浮点数数字 -> 浮点数数字\n\t\t\t- \"\" -> 0\n\t\t\t- 以上三种以外为 NaN\n\t\t- parseInt(string, radix) 方法\n\t\t\t- 如果 string 开头是 x / X -> 16 进制数字，开头是 0 -> 8 进制数字\n\t\t\t- 最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）\n\t\t\t- ES5 之后默认转化为 10 进制\n\t- `+` 可以将日期显示转化为数字，比如获取当前时间戳：`+new Date()`，但做好还是使用 `new Date().getTime()` 和 `Date.now()` 的方式\n\t- `~` 非运算符\n\t\t- `~x` 大致等同于 `-(x+1)`，`console.log(~42); // 43`\n\t\t- `~-1` -> `0`，可以用于如：`indexOf()` 方法返回为 -1 情况\n\t- 显示转化为布尔值\n\t\t- 使用 `Boolean()` 方法\n\t\t- 使用 `!!` ，第一个 `!` 将值显式转化为布尔值，第二个 `!` 将结果反转回原值\n\n- 4.4 隐式强制类型转换\n\t- 字符串与数字之间隐式强制类型转换\n\t\t- 使用 `+` 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法\n            ``` js\n                console.log(1 + 2); // 3\n                console.log(1 + \"2\"); // 12\n                console.log([1, 2] + [3, 4]); // 1,23,4\n            ```\n\t\t- `数字 + \"\"` 将数字转化为字符串，使用是 `valueOf()` 方法\n\t\t- 使用 `String(数字)` 的方式将数字转化为字符串使用的是 `toString()` 方法\n\t\t- 所以在定制 `valueOf()` 和 `toString()` 方法要注意，因为会影响强制类型转换的结果\n\t\t- `字符串 - 0` 可以将字符串转化为数字\n\t- 注意：`[] + {}` 和 `{} + []`，它们返回不同的结果，分别是 `[object Object]` 和 0\n\t\t- `{}` 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 `[]` 会被强制类型转换为 `\"\"`，而 {} 会被强制类型转换为 `[object Object]`\n\t\t- `{}` 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 `[]` 显式强制类型转换为 0\n\t- 布尔值 -> 数字的隐式强制类型转换\n\t\t- undefined、null、false、\"\"、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1\n\t- 转换为布尔值的隐式强制类型转换\n\t\t- 以下五种情况非布尔值会被强制转换为布尔值\n\t\t\t- `if()` 判断表达式\n\t\t\t- `for ( .. ; .. ; .. )` 语句中的第二个条件判断表达式\n\t\t\t- `while()` 和 `do...while()` 判断表达式\n\t\t\t- `?:` 判断表达式\n\t\t\t- `||` 和 `&& ` 判断表达式\n\t- `&&` 和 `||` 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值\n\t\t- `let a = b || \"123\";` 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123\n\t\t- `a && foo()` 等价于 `if (a) { foo() };`\n\t- Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误\n        ``` js\n            let s1 = Symbol(\"cool\");\n            String(s1); // \"Symbol(cool)\"\n            let s2 = Symbol(\"not cool\");\n            s2 + \"\"; // TypeError\n        ```\n- 4.5 宽松相等和严格相等\n\t- **`==` 允许在相等比较中进行强制类型转换，而 `===` 不允许**\n\t- 抽象相等（`==` 的行为）\n\t\t- 如果两个值的类型相同，就仅比较它们是否相等\n\t\t\t- 注意：`NaN` 不等于 `NaN`，`+0` 不等于 `-0`\n\t\t- 两个对象指向同一个值时即视为相等，不发生强制类型转换\n\t\t- `==` 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较\n\t\t- 在 `==` 中 null 和 undefined 相等\n\n- 4.6 抽象关系比较\n\t- 对于 `a < b` 的比较规则\n\t\t- 双方先调用 ToPrimitive 转化为字符串，\n\t\t\t- 如果存在数字就转化为数字比较\n\t\t\t- 如果双方都是字符串就按字母顺序比较\n\n## 第五章：语法\n- 5.1 语句和表达式\n\t- 语句和表达式示例\n        ``` js\n            let a = 3 * 5; // 声明语句\n            let b;\n            b = a; // 赋值表达式\n            b; // 表达式语句\n        ```\n\t- 语句都有一个结果值，结果值也包括 undefined\n\t\t- 在浏览器 console 输入语句，默认会显示最后一条语句的结果值\n\t- 表达式的副作用：造成其他的改变\n\t\t- 函数调用产生的副作用\n            ``` js\n                function foo() {\n                a = a + 1;\n                }\n\n                var a = 1;\n                foo(); // 结果值：undefined，副作用：a 的值被改变\n            ```\n\t\t- `delete` 操作对象的副作用是属性从对象中被删除\n\t- 上下文规则\n\t\t- 同样的语法在不同的情况会有不同的解释\n\t\t- 大括号 `{}` 规则\n\t\t\t- 定义对象常量\n\t\t\t\t- a 是赋值的对象（左值），{...} 好似所赋予的值（右值）\n                    ``` js\n                        let a = {\n                        foo: bar() // 假设 bar 已经声明\n                        }\n                    ```\n\t\t\t- 标签\n\t\t\t\t- `{}` 在此是为一个普通的代码块\n\t\t\t\t- 标签语句：`foo` 是 `bar()` 的标签，即通过 `foo` 能够跳转到 `bar()` 函数\n\t\t\t\t\t- 比如 `break` 语句可以从内层循环条装到外层循环或者结束循环，所以 `break` 也是一个标签\n                        ``` js\n                            {\n                            foo: bar() // 假设 bar 已经声明\n                            }\n                        ```\n\t\t\t- 对象解构\n\t\t\t- `if...else` 的代码块\n- 5.2 运算符优先级\n\t- `,` 连接一系列语句时，它的优先级最低\n\t- `&&` 运算符的优先级 > `=`\n\t- `&&` 运算符优先级 > `||`\n\t- 短路特性：进行 `&&` 或 `||` 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断\n\t- 三元运算符的执行方式\n\t\t- `a ? b : c ? d : e;` 等价于 `a ? b : (c ? d : e)`\n- 5.3 自动分号\n\t- 分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号\n- 5.4 错误\n\t- 暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况\n- 5.5 函数参数\n\t- 不要同时访问命名参数和其对应的arguments数组单元\n- 5.6 try...finally\n\t- 如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃\n- 5.7 switch\n\t- switch 使用的是 `===` 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题\n        ``` js\n            var a = \"hello world\";\n            var b = 10;\n            switch (true) {\n            case a || b == 10: // 返回的是 \"hello world\"\n                // 永远执行不到这里\n                break;\n            default:\n                console.log(\"Oops\");\n            }\n        ```\n\n## 附录A：混合环境 JS\n- JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现\n- 由于浏览器兼容性问题存在可能导致与官方规范的差异\n\t- 在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）\n\t- `window.escape(..)` 和 `window.unescape(..)` 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，`window.escape( \"? foo=97%&bar=3%\" )` 结果为 `\"%3Ffoo%3D97%25%26bar%3D3%25\"`\n\t- `String.prototype.substr` 第二个参数是结束位置索引（非自包含）， `String.prototype.substring`  第二个参数是长度（需要包含的字符数）\n- 宿主对象\n\t- 内建对象和函数，比如：DOM 元素，内部的 `[[class]]` 来自预定义属性\n\t- 和普通对象的行为差异\n\t\t- 无法正常访问 object 的内建方法，如 `toString()`\n\t\t- 无法写覆盖\n\t\t- 包含一些预定义的只读属性\n\t\t- 包含无法将 this 重载为其他对象的方法\n- 声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性\n\t- 由于浏览器历史问题，**在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量**\n- 不要扩展原生原型，可能产生冲突\n- 使用 `<script> .. </script>` 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用\n\t- 下面的代码都无法运行（foo() 还未被声明）\n        ``` html\n            <script>\n                foo();\n            </script>\n            <script>\n                function foo() { .. }\n            </script>\n        ```","slug":"你不知道的-JS-学习笔记：类型和语法","published":1,"updated":"2022-07-30T10:25:03.044Z","_id":"cl0m014b4000va7sjeoiqfsox","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"第一章：类型\"><a href=\"#第一章：类型\" class=\"headerlink\" title=\"第一章：类型\"></a>第一章：类型</h2><ul>\n<li><strong>JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值</strong></li>\n<li>JS 的七种内置类型<ul>\n<li>number 数字</li>\n<li>string 字符串</li>\n<li>boolean 布尔值</li>\n<li>null 空值</li>\n<li>undefined 未定义</li>\n<li>symbol 符号</li>\n<li>object 对象（除了 object 其他都是基本类型）</li>\n</ul>\n</li>\n<li>可以使用 typeof 检查基本类型  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true 注意 null 是 object，这是 JS 的 BUG</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// ES6中新加入的类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">life</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）</li>\n<li>JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言</li>\n<li>undefined<ul>\n<li>已经在作用域声明，但还没被赋值</li>\n<li>在作用域中没有被声明是 undeclared</li>\n<li><strong>注意</strong>：对于上面两种情况，typeof 返回的都是 undefined</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章：值\"><a href=\"#第二章：值\" class=\"headerlink\" title=\"第二章：值\"></a>第二章：值</h2><ul>\n<li>2.1 数组<ul>\n<li>数组可以存放任何类型的值</li>\n<li>JS 中数组不用预先声明大小</li>\n<li>数组也是对象，可以包含自己的键值属性，但不会计算在 length 中</li>\n<li>类数组<ul>\n<li>一组通过数字索引的值，比如：DOM 查询操作返回结果</li>\n<li>可以使用 <code>Array.slice</code> 或 <code>Array.from</code> 将类数组转化为数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.2 字符串<ul>\n<li>字符串可以借用数组方法<ul>\n<li>借用 join 方法示例：<code>let b = Array.prototype.join( a, &quot;-&quot;);</code></li>\n<li>无法直接借用 reverse 方法，需要先转化为字符数组才能使用  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 数字<ul>\n<li>数字以十进制的方式显示，小数后的 0 会被省略</li>\n<li><code>tofiexed()</code> 方法可以指定小数部分的显示位数，结果是字符串形式</li>\n<li><code>toprecision()</code> 方法可以指定有效位数的显示位数  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4e+1\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false</li>\n<li>解决方案：使用误差范围值<ul>\n<li>ES6 中定义为 <code>Number.EPSILON</code>,通常为：2^-52 (2.220446049250313e-16)</li>\n<li>使用误差范围判断两个数字是否相等  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0000002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整数的安全范围<ul>\n<li>ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]</li>\n<li>即：[-(2^53  -  1), 2^53  -  1]</li>\n</ul>\n</li>\n<li>判断是否是整数<ul>\n<li>使用 <code>Number.isInteger()</code> 判断是否是整数</li>\n<li>使用 <code>Number.isSafeInteger()</code> 判断是否是安全范围内的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.4 特殊数值<ul>\n<li>undefined 和 null<ul>\n<li>undefined 类型只有一个值，即：undefined</li>\n<li>null 类型只有一个值，即：null</li>\n<li>undefined 指未被赋值，null 指曾被赋值，但目前没有值</li>\n<li>undefined 可以作为变量声明和赋值（<strong>不要这么做</strong>）</li>\n</ul>\n</li>\n<li>void<ul>\n<li>指没有返回值，多用于函数没有返回结果</li>\n<li><strong>可以使用 <code>void 0</code> 获取真正的 undefined</strong>（非严格模式 undefined 可以被赋值，而 <code>void 0</code> 必定返回 undefined）</li>\n</ul>\n</li>\n<li>特殊的数字<ul>\n<li>NAN：<ul>\n<li>无效数值（仍然是一个数字类型，但指数字类型中的错误情况）</li>\n<li>NAN 和谁比较都是 false，包括自己</li>\n<li>使用 <code>Number.isNaN()</code> 判断一个数字是否为 NAN  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span>isNaN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>无穷数字：Infinity<ul>\n<li>ES6 中定义为：<code>Number.POSITIVE_INFINITY</code>，<code>Number.NEGATIVE_INFINITY</code></li>\n<li>计算结果一旦溢出为无穷数，就无法再转换为有穷数</li>\n</ul>\n</li>\n<li>零值：0、-0<ul>\n<li>乘法和除法运算会得到 -0</li>\n<li>存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）</li>\n<li>0 === -0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊等式<ul>\n<li><code>Object.is(a, b)</code> 可以判断两个值是否绝对相等</li>\n<li>优先使用 == 和 ===，因为效率更高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.5 值和引用<ul>\n<li>JS 中没有指针，JS 的变量不可能指向另一个变量的引用，<strong>JS 引用指向的是值</strong></li>\n<li>基本类型通过<strong>复制</strong>方式复制或传递，引用类型通过<strong>引用</strong>方式复制或传递</li>\n<li>函数中的引用问题<ul>\n<li>函数参数 a 通过<strong>复制</strong>的方式复制给函数内的 x</li>\n<li><strong>引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值</strong>  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注意引用 x 指向了其他的值</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>我们无法自行决定使用复制赋值还是引用赋值，<strong>一切由值的类型决定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：原生函数\"><a href=\"#第三章：原生函数\" class=\"headerlink\" title=\"第三章：原生函数\"></a>第三章：原生函数</h2><ul>\n<li>JS 常用的原生函数<ul>\n<li>String()</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>Array()</li>\n<li>Object()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Date()</li>\n<li>Error()</li>\n<li>Symbol()</li>\n</ul>\n</li>\n<li>3.1 内部属性 <code>[[Class]]</code><ul>\n<li>所有 typeof 返回为 “object” 的对象都包含内部属性 <code>[[Class]]</code>，可以通过 toString 方法查看  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.2 封装对象包装<ul>\n<li>基本类型没有如：<code>length</code> 属性和 <code>toString()</code> 方法，<strong>JS 会自动为基本类型包装一个封装对象</strong></li>\n<li>浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率</li>\n</ul>\n</li>\n<li>3.3 拆封<ul>\n<li>可以使用 <code>valuOf()</code> 获取封装对象中基本类型的值  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.4 原生函数作为构造函数<ul>\n<li>尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题</li>\n<li>尽量不要创建和使用空单元数组</li>\n<li>对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）</li>\n<li>Symbol<ul>\n<li>具有唯一性的特殊值，用于声名对象属性不容易导致重名</li>\n<li>使用 Symbol() 原声构造函数自定义符号<strong>不能</strong>带 <code>new</code> 关键字</li>\n<li>注意：Symbol 不是对象，而是<strong>一个基本类型</strong></li>\n</ul>\n</li>\n<li>原生原型<ul>\n<li>可以将 <code>Array.prototype.join()</code> 写作 <code>Array#join()</code></li>\n<li>三个特殊的默认类型<ul>\n<li>Function.prototype 默认是一个函数</li>\n<li>RegExp.prototype 默认是一个正则表达式</li>\n<li>Array. prototype 默认是一个数组</li>\n<li>默认值在使用的时候只创建一次，可以节约资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：强制类型转换\"><a href=\"#第四章：强制类型转换\" class=\"headerlink\" title=\"第四章：强制类型转换\"></a>第四章：强制类型转换</h2><ul>\n<li><p>4.1 值类型转换</p>\n<ul>\n<li>类型转换：值的类型从一种类型转换为另一种类型，为显式转换</li>\n<li>隐式的类型转换即强制类型转换</li>\n<li>类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式类型转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式类型转换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.2 抽象值操作</p>\n<ul>\n<li>抽象操作 ToString<ul>\n<li>null -&gt; “null”</li>\n<li>undefined -&gt; “undefined”</li>\n<li>true -&gt; “true”</li>\n<li>6 -&gt; “6”</li>\n<li>数组特殊：[1,2,3] -&gt; “1,2,3”</li>\n<li><code>JSON.stringfy()</code> 转化为字符串也用了 ToString<ul>\n<li>结果总是字符串：<code>JSON.stringify(&quot;42&quot;); // &quot;&quot;42&quot;&quot; 包含双引号</code></li>\n<li>字符串、数字、布尔值、null 的规则和 TOString 相同</li>\n<li>遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null</li>\n<li>包含循环引用会报错</li>\n<li>如果对象存在 <code>toJSON()</code> 方法，调用 <code>JSON.stringfy()</code> 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>抽象操作 ToNumber<ul>\n<li>数字 -&gt; 自身</li>\n<li>布尔值：false -&gt; 0，true -&gt; 1</li>\n<li>null -&gt; 0</li>\n<li>undefined -&gt; NaN</li>\n<li>对象 -&gt; 抽象操作 ToPrimitive 规则</li>\n</ul>\n</li>\n<li>抽象操作 ToBoolean<ul>\n<li>undefined、null、false、””、0 / -0、NaN -&gt; false</li>\n<li>上述以外 -&gt; true</li>\n</ul>\n</li>\n<li>抽象操作 ToPrimitive<ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.3 显式强制类型转换</p>\n<ul>\n<li>字符串、数字间的相互转换<ul>\n<li>使用 <code>String()</code>、<code>Number()</code>、<code>.toString()</code> 方法</li>\n<li>使用 <code>+</code> 可以将字符串转化为数字</li>\n<li>字符串 -&gt; 数字<ul>\n<li>如果只有数字 -&gt; 十进制数字</li>\n<li>如果包含有效浮点数数字 -&gt; 浮点数数字</li>\n<li>“” -&gt; 0</li>\n<li>以上三种以外为 NaN</li>\n</ul>\n</li>\n<li>parseInt(string, radix) 方法<ul>\n<li>如果 string 开头是 x / X -&gt; 16 进制数字，开头是 0 -&gt; 8 进制数字</li>\n<li>最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）</li>\n<li>ES5 之后默认转化为 10 进制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>+</code> 可以将日期显示转化为数字，比如获取当前时间戳：<code>+new Date()</code>，但做好还是使用 <code>new Date().getTime()</code> 和 <code>Date.now()</code> 的方式</li>\n<li><code>~</code> 非运算符<ul>\n<li><code>~x</code> 大致等同于 <code>-(x+1)</code>，<code>console.log(~42); // 43</code></li>\n<li><code>~-1</code> -&gt; <code>0</code>，可以用于如：<code>indexOf()</code> 方法返回为 -1 情况</li>\n</ul>\n</li>\n<li>显示转化为布尔值<ul>\n<li>使用 <code>Boolean()</code> 方法</li>\n<li>使用 <code>!!</code> ，第一个 <code>!</code> 将值显式转化为布尔值，第二个 <code>!</code> 将结果反转回原值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.4 隐式强制类型转换</p>\n<ul>\n<li>字符串与数字之间隐式强制类型转换<ul>\n<li>使用 <code>+</code> 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,23,4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><code>数字 + &quot;&quot;</code> 将数字转化为字符串，使用是 <code>valueOf()</code> 方法</li>\n<li>使用 <code>String(数字)</code> 的方式将数字转化为字符串使用的是 <code>toString()</code> 方法</li>\n<li>所以在定制 <code>valueOf()</code> 和 <code>toString()</code> 方法要注意，因为会影响强制类型转换的结果</li>\n<li><code>字符串 - 0</code> 可以将字符串转化为数字</li>\n</ul>\n</li>\n<li>注意：<code>[] + &#123;&#125;</code> 和 <code>&#123;&#125; + []</code>，它们返回不同的结果，分别是 <code>[object Object]</code> 和 0<ul>\n<li><code>&#123;&#125;</code> 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 <code>[]</code> 会被强制类型转换为 <code>&quot;&quot;</code>，而 {} 会被强制类型转换为 <code>[object Object]</code></li>\n<li><code>&#123;&#125;</code> 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 <code>[]</code> 显式强制类型转换为 0</li>\n</ul>\n</li>\n<li>布尔值 -&gt; 数字的隐式强制类型转换<ul>\n<li>undefined、null、false、””、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1</li>\n</ul>\n</li>\n<li>转换为布尔值的隐式强制类型转换<ul>\n<li>以下五种情况非布尔值会被强制转换为布尔值<ul>\n<li><code>if()</code> 判断表达式</li>\n<li><code>for ( .. ; .. ; .. )</code> 语句中的第二个条件判断表达式</li>\n<li><code>while()</code> 和 <code>do...while()</code> 判断表达式</li>\n<li><code>?:</code> 判断表达式</li>\n<li><code>||</code> 和 <code>&amp;&amp; </code> 判断表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&amp;&amp;</code> 和 <code>||</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值<ul>\n<li><code>let a = b || &quot;123&quot;;</code> 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123</li>\n<li><code>a &amp;&amp; foo()</code> 等价于 <code>if (a) &#123; foo() &#125;;</code></li>\n</ul>\n</li>\n<li>Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(cool)\"</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.5 宽松相等和严格相等</p>\n<ul>\n<li><strong><code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许</strong></li>\n<li>抽象相等（<code>==</code> 的行为）<ul>\n<li>如果两个值的类型相同，就仅比较它们是否相等<ul>\n<li>注意：<code>NaN</code> 不等于 <code>NaN</code>，<code>+0</code> 不等于 <code>-0</code></li>\n</ul>\n</li>\n<li>两个对象指向同一个值时即视为相等，不发生强制类型转换</li>\n<li><code>==</code> 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较</li>\n<li>在 <code>==</code> 中 null 和 undefined 相等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.6 抽象关系比较</p>\n<ul>\n<li>对于 <code>a &lt; b</code> 的比较规则<ul>\n<li>双方先调用 ToPrimitive 转化为字符串，<ul>\n<li>如果存在数字就转化为数字比较</li>\n<li>如果双方都是字符串就按字母顺序比较</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：语法\"><a href=\"#第五章：语法\" class=\"headerlink\" title=\"第五章：语法\"></a>第五章：语法</h2><ul>\n<li>5.1 语句和表达式<ul>\n<li>语句和表达式示例  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明语句</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值表达式</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式语句</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>语句都有一个结果值，结果值也包括 undefined<ul>\n<li>在浏览器 console 输入语句，默认会显示最后一条语句的结果值</li>\n</ul>\n</li>\n<li>表达式的副作用：造成其他的改变<ul>\n<li>函数调用产生的副作用  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果值：undefined，副作用：a 的值被改变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><code>delete</code> 操作对象的副作用是属性从对象中被删除</li>\n</ul>\n</li>\n<li>上下文规则<ul>\n<li>同样的语法在不同的情况会有不同的解释</li>\n<li>大括号 <code>&#123;&#125;</code> 规则<ul>\n<li>定义对象常量<ul>\n<li>a 是赋值的对象（左值），{…} 好似所赋予的值（右值）  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标签<ul>\n<li><code>&#123;&#125;</code> 在此是为一个普通的代码块</li>\n<li>标签语句：<code>foo</code> 是 <code>bar()</code> 的标签，即通过 <code>foo</code> 能够跳转到 <code>bar()</code> 函数<ul>\n<li>比如 <code>break</code> 语句可以从内层循环条装到外层循环或者结束循环，所以 <code>break</code> 也是一个标签  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象解构</li>\n<li><code>if...else</code> 的代码块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.2 运算符优先级<ul>\n<li><code>,</code> 连接一系列语句时，它的优先级最低</li>\n<li><code>&amp;&amp;</code> 运算符的优先级 &gt; <code>=</code></li>\n<li><code>&amp;&amp;</code> 运算符优先级 &gt; <code>||</code></li>\n<li>短路特性：进行 <code>&amp;&amp;</code> 或 <code>||</code> 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断</li>\n<li>三元运算符的执行方式<ul>\n<li><code>a ? b : c ? d : e;</code> 等价于 <code>a ? b : (c ? d : e)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.3 自动分号<ul>\n<li>分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号</li>\n</ul>\n</li>\n<li>5.4 错误<ul>\n<li>暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况</li>\n</ul>\n</li>\n<li>5.5 函数参数<ul>\n<li>不要同时访问命名参数和其对应的arguments数组单元</li>\n</ul>\n</li>\n<li>5.6 try…finally<ul>\n<li>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃</li>\n</ul>\n</li>\n<li>5.7 switch<ul>\n<li>switch 使用的是 <code>===</code> 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> a <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 返回的是 \"hello world\"</span>\n    <span class=\"token comment\">// 永远执行不到这里</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录A：混合环境-JS\"><a href=\"#附录A：混合环境-JS\" class=\"headerlink\" title=\"附录A：混合环境 JS\"></a>附录A：混合环境 JS</h2><ul>\n<li>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现</li>\n<li>由于浏览器兼容性问题存在可能导致与官方规范的差异<ul>\n<li>在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）</li>\n<li><code>window.escape(..)</code> 和 <code>window.unescape(..)</code> 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，<code>window.escape( &quot;? foo=97%&amp;bar=3%&quot; )</code> 结果为 <code>&quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;</code></li>\n<li><code>String.prototype.substr</code> 第二个参数是结束位置索引（非自包含）， <code>String.prototype.substring</code>  第二个参数是长度（需要包含的字符数）</li>\n</ul>\n</li>\n<li>宿主对象<ul>\n<li>内建对象和函数，比如：DOM 元素，内部的 <code>[[class]]</code> 来自预定义属性</li>\n<li>和普通对象的行为差异<ul>\n<li>无法正常访问 object 的内建方法，如 <code>toString()</code></li>\n<li>无法写覆盖</li>\n<li>包含一些预定义的只读属性</li>\n<li>包含无法将 this 重载为其他对象的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性<ul>\n<li>由于浏览器历史问题，<strong>在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量</strong></li>\n</ul>\n</li>\n<li>不要扩展原生原型，可能产生冲突</li>\n<li>使用 <code>&lt;script&gt; .. &lt;/script&gt;</code> 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用<ul>\n<li>下面的代码都无法运行（foo() 还未被声明）  <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一章：类型\"><a href=\"#第一章：类型\" class=\"headerlink\" title=\"第一章：类型\"></a>第一章：类型</h2><ul>\n<li><strong>JS 中的类型：值的内部特征，定义了值的行为，使其区别于其他值</strong></li>\n<li>JS 的七种内置类型<ul>\n<li>number 数字</li>\n<li>string 字符串</li>\n<li>boolean 布尔值</li>\n<li>null 空值</li>\n<li>undefined 未定义</li>\n<li>symbol 符号</li>\n<li>object 对象（除了 object 其他都是基本类型）</li>\n</ul>\n</li>\n<li>可以使用 typeof 检查基本类型  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">\"42\"</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true 注意 null 是 object，这是 JS 的 BUG</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// ES6中新加入的类型</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">life</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Function 是对象的字类型，拥有自己的属性（比如 length，返回参数的个数）</li>\n<li>JS 中的变量没有类型，只有值才有，变量先被赋值字符串类型的值，后被赋值数字类型的值，所以 JS 是弱类型语言</li>\n<li>undefined<ul>\n<li>已经在作用域声明，但还没被赋值</li>\n<li>在作用域中没有被声明是 undeclared</li>\n<li><strong>注意</strong>：对于上面两种情况，typeof 返回的都是 undefined</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第二章：值\"><a href=\"#第二章：值\" class=\"headerlink\" title=\"第二章：值\"></a>第二章：值</h2><ul>\n<li>2.1 数组<ul>\n<li>数组可以存放任何类型的值</li>\n<li>JS 中数组不用预先声明大小</li>\n<li>数组也是对象，可以包含自己的键值属性，但不会计算在 length 中</li>\n<li>类数组<ul>\n<li>一组通过数字索引的值，比如：DOM 查询操作返回结果</li>\n<li>可以使用 <code>Array.slice</code> 或 <code>Array.from</code> 将类数组转化为数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.2 字符串<ul>\n<li>字符串可以借用数组方法<ul>\n<li>借用 join 方法示例：<code>let b = Array.prototype.join( a, &quot;-&quot;);</code></li>\n<li>无法直接借用 reverse 方法，需要先转化为字符数组才能使用  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> a\n<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.3 数字<ul>\n<li>数字以十进制的方式显示，小数后的 0 会被省略</li>\n<li><code>tofiexed()</code> 方法可以指定小数部分的显示位数，结果是字符串形式</li>\n<li><code>toprecision()</code> 方法可以指定有效位数的显示位数  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">42.59</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"4e+1\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"43\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.6\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.59\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.590\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"42.5900\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>存在二进制浮点数计算精度问题（所有遵循IEEE 754规范的语言都是如此）  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>原因：二进制浮点数 0.1 和 0.2 相加后约等于 0.30000000000000004，所用判断为 false</li>\n<li>解决方案：使用误差范围值<ul>\n<li>ES6 中定义为 <code>Number.EPSILON</code>,通常为：2^-52 (2.220446049250313e-16)</li>\n<li>使用误差范围判断两个数字是否相等  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span> n2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">-</span> n2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numbersCloseEnoughToEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0000001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0000002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整数的安全范围<ul>\n<li>ES6 定义：[Number.MIN_SAFE_INTEGER, MAX_SAFE_INTEGER]</li>\n<li>即：[-(2^53  -  1), 2^53  -  1]</li>\n</ul>\n</li>\n<li>判断是否是整数<ul>\n<li>使用 <code>Number.isInteger()</code> 判断是否是整数</li>\n<li>使用 <code>Number.isSafeInteger()</code> 判断是否是安全范围内的整数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.4 特殊数值<ul>\n<li>undefined 和 null<ul>\n<li>undefined 类型只有一个值，即：undefined</li>\n<li>null 类型只有一个值，即：null</li>\n<li>undefined 指未被赋值，null 指曾被赋值，但目前没有值</li>\n<li>undefined 可以作为变量声明和赋值（<strong>不要这么做</strong>）</li>\n</ul>\n</li>\n<li>void<ul>\n<li>指没有返回值，多用于函数没有返回结果</li>\n<li><strong>可以使用 <code>void 0</code> 获取真正的 undefined</strong>（非严格模式 undefined 可以被赋值，而 <code>void 0</code> 必定返回 undefined）</li>\n</ul>\n</li>\n<li>特殊的数字<ul>\n<li>NAN：<ul>\n<li>无效数值（仍然是一个数字类型，但指数字类型中的错误情况）</li>\n<li>NAN 和谁比较都是 false，包括自己</li>\n<li>使用 <code>Number.isNaN()</code> 判断一个数字是否为 NAN  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span>isNaN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nNumber<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isNaN</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> n <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>无穷数字：Infinity<ul>\n<li>ES6 中定义为：<code>Number.POSITIVE_INFINITY</code>，<code>Number.NEGATIVE_INFINITY</code></li>\n<li>计算结果一旦溢出为无穷数，就无法再转换为有穷数</li>\n</ul>\n</li>\n<li>零值：0、-0<ul>\n<li>乘法和除法运算会得到 -0</li>\n<li>存在 -0 的原因：某些程序需要使用级数来表示（比如动画帧的移动速度），数字的符号位（sign）用来代表其他信息（比如移动的方向）</li>\n<li>0 === -0</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>特殊等式<ul>\n<li><code>Object.is(a, b)</code> 可以判断两个值是否绝对相等</li>\n<li>优先使用 == 和 ===，因为效率更高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.5 值和引用<ul>\n<li>JS 中没有指针，JS 的变量不可能指向另一个变量的引用，<strong>JS 引用指向的是值</strong></li>\n<li>基本类型通过<strong>复制</strong>方式复制或传递，引用类型通过<strong>引用</strong>方式复制或传递</li>\n<li>函数中的引用问题<ul>\n<li>函数参数 a 通过<strong>复制</strong>的方式复制给函数内的 x</li>\n<li><strong>引用 x 不能改变引用 a 的指向，只能改变 a 和 x 共同指向的值</strong>  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 注意引用 x 指向了其他的值</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别输出：[ 1, 2, 3, 4 ] [ 4, 5, 6, 7 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 2, 3, 4 ]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>我们无法自行决定使用复制赋值还是引用赋值，<strong>一切由值的类型决定</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第三章：原生函数\"><a href=\"#第三章：原生函数\" class=\"headerlink\" title=\"第三章：原生函数\"></a>第三章：原生函数</h2><ul>\n<li>JS 常用的原生函数<ul>\n<li>String()</li>\n<li>Number()</li>\n<li>Boolean()</li>\n<li>Array()</li>\n<li>Object()</li>\n<li>Function()</li>\n<li>RegExp()</li>\n<li>Date()</li>\n<li>Error()</li>\n<li>Symbol()</li>\n</ul>\n</li>\n<li>3.1 内部属性 <code>[[Class]]</code><ul>\n<li>所有 typeof 返回为 “object” 的对象都包含内部属性 <code>[[Class]]</code>，可以通过 toString 方法查看  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Array]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Function]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.2 封装对象包装<ul>\n<li>基本类型没有如：<code>length</code> 属性和 <code>toString()</code> 方法，<strong>JS 会自动为基本类型包装一个封装对象</strong></li>\n<li>浏览器已经为封装对象做优化，写代码时不用考虑提前包装，不然可能降低执行效率</li>\n</ul>\n</li>\n<li>3.3 拆封<ul>\n<li>可以使用 <code>valuOf()</code> 获取封装对象中基本类型的值  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>3.4 原生函数作为构造函数<ul>\n<li>尽量不要使用构造函数的方式创建：数组、对象、函数、正则表达式，容易造成意想不到的问题</li>\n<li>尽量不要创建和使用空单元数组</li>\n<li>对于 Date 和 Error 必须使用原生函数创建（因为没有对应的常量形式）</li>\n<li>Symbol<ul>\n<li>具有唯一性的特殊值，用于声名对象属性不容易导致重名</li>\n<li>使用 Symbol() 原声构造函数自定义符号<strong>不能</strong>带 <code>new</code> 关键字</li>\n<li>注意：Symbol 不是对象，而是<strong>一个基本类型</strong></li>\n</ul>\n</li>\n<li>原生原型<ul>\n<li>可以将 <code>Array.prototype.join()</code> 写作 <code>Array#join()</code></li>\n<li>三个特殊的默认类型<ul>\n<li>Function.prototype 默认是一个函数</li>\n<li>RegExp.prototype 默认是一个正则表达式</li>\n<li>Array. prototype 默认是一个数组</li>\n<li>默认值在使用的时候只创建一次，可以节约资源</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第四章：强制类型转换\"><a href=\"#第四章：强制类型转换\" class=\"headerlink\" title=\"第四章：强制类型转换\"></a>第四章：强制类型转换</h2><ul>\n<li><p>4.1 值类型转换</p>\n<ul>\n<li>类型转换：值的类型从一种类型转换为另一种类型，为显式转换</li>\n<li>隐式的类型转换即强制类型转换</li>\n<li>类型转换（显示转换）发生在静态类型语言编译阶段，强制类型转换发生在动态类型语言运行时<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 隐式类型转换</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显式类型转换</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.2 抽象值操作</p>\n<ul>\n<li>抽象操作 ToString<ul>\n<li>null -&gt; “null”</li>\n<li>undefined -&gt; “undefined”</li>\n<li>true -&gt; “true”</li>\n<li>6 -&gt; “6”</li>\n<li>数组特殊：[1,2,3] -&gt; “1,2,3”</li>\n<li><code>JSON.stringfy()</code> 转化为字符串也用了 ToString<ul>\n<li>结果总是字符串：<code>JSON.stringify(&quot;42&quot;); // &quot;&quot;42&quot;&quot; 包含双引号</code></li>\n<li>字符串、数字、布尔值、null 的规则和 TOString 相同</li>\n<li>遇到 undefined、function、symbol 会自动忽略，在数组中出现前面三个则返回 null</li>\n<li>包含循环引用会报错</li>\n<li>如果对象存在 <code>toJSON()</code> 方法，调用 <code>JSON.stringfy()</code> 方法会使用该函数的返回值，返回：一个能够被字符串化的安全的 JSON 值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>抽象操作 ToNumber<ul>\n<li>数字 -&gt; 自身</li>\n<li>布尔值：false -&gt; 0，true -&gt; 1</li>\n<li>null -&gt; 0</li>\n<li>undefined -&gt; NaN</li>\n<li>对象 -&gt; 抽象操作 ToPrimitive 规则</li>\n</ul>\n</li>\n<li>抽象操作 ToBoolean<ul>\n<li>undefined、null、false、””、0 / -0、NaN -&gt; false</li>\n<li>上述以外 -&gt; true</li>\n</ul>\n</li>\n<li>抽象操作 ToPrimitive<ul>\n<li>如果有 <code>Symbol.toPrimitive</code> 方法，优先调用</li>\n<li>调用 <code>valueOf()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>调用 <code>toString()</code> 方法，如果转换为基础数据类型则返回</li>\n<li>以上三种没有转换成功则报错</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.3 显式强制类型转换</p>\n<ul>\n<li>字符串、数字间的相互转换<ul>\n<li>使用 <code>String()</code>、<code>Number()</code>、<code>.toString()</code> 方法</li>\n<li>使用 <code>+</code> 可以将字符串转化为数字</li>\n<li>字符串 -&gt; 数字<ul>\n<li>如果只有数字 -&gt; 十进制数字</li>\n<li>如果包含有效浮点数数字 -&gt; 浮点数数字</li>\n<li>“” -&gt; 0</li>\n<li>以上三种以外为 NaN</li>\n</ul>\n</li>\n<li>parseInt(string, radix) 方法<ul>\n<li>如果 string 开头是 x / X -&gt; 16 进制数字，开头是 0 -&gt; 8 进制数字</li>\n<li>最好将 radix 显式设置为 10，不然遇到 08、09 的情况会被转化为 0，（08、09 不是有效的 10 进制数字）</li>\n<li>ES5 之后默认转化为 10 进制</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>+</code> 可以将日期显示转化为数字，比如获取当前时间戳：<code>+new Date()</code>，但做好还是使用 <code>new Date().getTime()</code> 和 <code>Date.now()</code> 的方式</li>\n<li><code>~</code> 非运算符<ul>\n<li><code>~x</code> 大致等同于 <code>-(x+1)</code>，<code>console.log(~42); // 43</code></li>\n<li><code>~-1</code> -&gt; <code>0</code>，可以用于如：<code>indexOf()</code> 方法返回为 -1 情况</li>\n</ul>\n</li>\n<li>显示转化为布尔值<ul>\n<li>使用 <code>Boolean()</code> 方法</li>\n<li>使用 <code>!!</code> ，第一个 <code>!</code> 将值显式转化为布尔值，第二个 <code>!</code> 将结果反转回原值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.4 隐式强制类型转换</p>\n<ul>\n<li>字符串与数字之间隐式强制类型转换<ul>\n<li>使用 <code>+</code> 时，如果一个操作数是字符串（对象通过 ToPrimitive 转化为字符串），则进行字符串拼接，否则执行数字加法  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,23,4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><code>数字 + &quot;&quot;</code> 将数字转化为字符串，使用是 <code>valueOf()</code> 方法</li>\n<li>使用 <code>String(数字)</code> 的方式将数字转化为字符串使用的是 <code>toString()</code> 方法</li>\n<li>所以在定制 <code>valueOf()</code> 和 <code>toString()</code> 方法要注意，因为会影响强制类型转换的结果</li>\n<li><code>字符串 - 0</code> 可以将字符串转化为数字</li>\n</ul>\n</li>\n<li>注意：<code>[] + &#123;&#125;</code> 和 <code>&#123;&#125; + []</code>，它们返回不同的结果，分别是 <code>[object Object]</code> 和 0<ul>\n<li><code>&#123;&#125;</code> 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 <code>[]</code> 会被强制类型转换为 <code>&quot;&quot;</code>，而 {} 会被强制类型转换为 <code>[object Object]</code></li>\n<li><code>&#123;&#125;</code> 被当作一个独立的空代码块（不执行任何操作），代码块结尾不需要分号，最后+ [] 将 <code>[]</code> 显式强制类型转换为 0</li>\n</ul>\n</li>\n<li>布尔值 -&gt; 数字的隐式强制类型转换<ul>\n<li>undefined、null、false、””、0 / -0、NaN 在加法运算时会转换为 0，其他转化为 1</li>\n</ul>\n</li>\n<li>转换为布尔值的隐式强制类型转换<ul>\n<li>以下五种情况非布尔值会被强制转换为布尔值<ul>\n<li><code>if()</code> 判断表达式</li>\n<li><code>for ( .. ; .. ; .. )</code> 语句中的第二个条件判断表达式</li>\n<li><code>while()</code> 和 <code>do...while()</code> 判断表达式</li>\n<li><code>?:</code> 判断表达式</li>\n<li><code>||</code> 和 <code>&amp;&amp; </code> 判断表达式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&amp;&amp;</code> 和 <code>||</code> 运算符的返回值并不一定是布尔类型，而是两个操作数其中一个的值<ul>\n<li><code>let a = b || &quot;123&quot;;</code> 控制合并运算符，如果 b 还没有赋值，那么 a 默认为 123</li>\n<li><code>a &amp;&amp; foo()</code> 等价于 <code>if (a) &#123; foo() &#125;;</code></li>\n</ul>\n</li>\n<li>Symbol 类型允许显式强制类型转换，但是隐式强制类型转会产生错误  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Symbol(cool)\"</span>\n<span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not cool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns2 <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>4.5 宽松相等和严格相等</p>\n<ul>\n<li><strong><code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许</strong></li>\n<li>抽象相等（<code>==</code> 的行为）<ul>\n<li>如果两个值的类型相同，就仅比较它们是否相等<ul>\n<li>注意：<code>NaN</code> 不等于 <code>NaN</code>，<code>+0</code> 不等于 <code>-0</code></li>\n</ul>\n</li>\n<li>两个对象指向同一个值时即视为相等，不发生强制类型转换</li>\n<li><code>==</code> 在比较两个不同类型的值时会发生隐式强制类型转换，将其中之一或两者都转换为相同的类型后再进行比较</li>\n<li>在 <code>==</code> 中 null 和 undefined 相等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>4.6 抽象关系比较</p>\n<ul>\n<li>对于 <code>a &lt; b</code> 的比较规则<ul>\n<li>双方先调用 ToPrimitive 转化为字符串，<ul>\n<li>如果存在数字就转化为数字比较</li>\n<li>如果双方都是字符串就按字母顺序比较</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"第五章：语法\"><a href=\"#第五章：语法\" class=\"headerlink\" title=\"第五章：语法\"></a>第五章：语法</h2><ul>\n<li>5.1 语句和表达式<ul>\n<li>语句和表达式示例  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明语句</span>\n<span class=\"token keyword\">let</span> b<span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 赋值表达式</span>\nb<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表达式语句</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>语句都有一个结果值，结果值也包括 undefined<ul>\n<li>在浏览器 console 输入语句，默认会显示最后一条语句的结果值</li>\n</ul>\n</li>\n<li>表达式的副作用：造成其他的改变<ul>\n<li>函数调用产生的副作用  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果值：undefined，副作用：a 的值被改变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><code>delete</code> 操作对象的副作用是属性从对象中被删除</li>\n</ul>\n</li>\n<li>上下文规则<ul>\n<li>同样的语法在不同的情况会有不同的解释</li>\n<li>大括号 <code>&#123;&#125;</code> 规则<ul>\n<li>定义对象常量<ul>\n<li>a 是赋值的对象（左值），{…} 好似所赋予的值（右值）  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li>标签<ul>\n<li><code>&#123;&#125;</code> 在此是为一个普通的代码块</li>\n<li>标签语句：<code>foo</code> 是 <code>bar()</code> 的标签，即通过 <code>foo</code> 能够跳转到 <code>bar()</code> 函数<ul>\n<li>比如 <code>break</code> 语句可以从内层循环条装到外层循环或者结束循环，所以 <code>break</code> 也是一个标签  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 假设 bar 已经声明</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对象解构</li>\n<li><code>if...else</code> 的代码块</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.2 运算符优先级<ul>\n<li><code>,</code> 连接一系列语句时，它的优先级最低</li>\n<li><code>&amp;&amp;</code> 运算符的优先级 &gt; <code>=</code></li>\n<li><code>&amp;&amp;</code> 运算符优先级 &gt; <code>||</code></li>\n<li>短路特性：进行 <code>&amp;&amp;</code> 或 <code>||</code> 判断时，如果左边的值为 false 或 true，则不需要对右边的值判断</li>\n<li>三元运算符的执行方式<ul>\n<li><code>a ? b : c ? d : e;</code> 等价于 <code>a ? b : (c ? d : e)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>5.3 自动分号<ul>\n<li>分号自动插入（Automatic Semicolon Insertion，ASI）：JS 会自动为代码补上缺失的分号</li>\n</ul>\n</li>\n<li>5.4 错误<ul>\n<li>暂时性死区（Temporal Dead Zone，暂时性死区）：代码中的变量还没有初始化不能被引用的情况</li>\n</ul>\n</li>\n<li>5.5 函数参数<ul>\n<li>不要同时访问命名参数和其对应的arguments数组单元</li>\n</ul>\n</li>\n<li>5.6 try…finally<ul>\n<li>如果finally中抛出异常（无论是有意还是无意），函数就会在此处终止。如果此前try中已经有return设置了返回值，则该值会被丢弃</li>\n</ul>\n</li>\n<li>5.7 switch<ul>\n<li>switch 使用的是 <code>===</code> 严格比较 是否和 true 相等，所以如果结果返回不是 true 可能造成其他问题  <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">case</span> a <span class=\"token operator\">||</span> b <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 返回的是 \"hello world\"</span>\n    <span class=\"token comment\">// 永远执行不到这里</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oops\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录A：混合环境-JS\"><a href=\"#附录A：混合环境-JS\" class=\"headerlink\" title=\"附录A：混合环境 JS\"></a>附录A：混合环境 JS</h2><ul>\n<li>JavaScript 语言的官方名称是 ECMAScript，JavaScript 是该规范在浏览器上的实现</li>\n<li>由于浏览器兼容性问题存在可能导致与官方规范的差异<ul>\n<li>在非严格模式中允许八进制数值常量存在，如0123（即十进制的83）</li>\n<li><code>window.escape(..)</code> 和 <code>window.unescape(..)</code> 能够转义（escape）和回转（unescape）带有%分隔符的十六进制字符串。例如，<code>window.escape( &quot;? foo=97%&amp;bar=3%&quot; )</code> 结果为 <code>&quot;%3Ffoo%3D97%25%26bar%3D3%25&quot;</code></li>\n<li><code>String.prototype.substr</code> 第二个参数是结束位置索引（非自包含）， <code>String.prototype.substring</code>  第二个参数是长度（需要包含的字符数）</li>\n</ul>\n</li>\n<li>宿主对象<ul>\n<li>内建对象和函数，比如：DOM 元素，内部的 <code>[[class]]</code> 来自预定义属性</li>\n<li>和普通对象的行为差异<ul>\n<li>无法正常访问 object 的内建方法，如 <code>toString()</code></li>\n<li>无法写覆盖</li>\n<li>包含一些预定义的只读属性</li>\n<li>包含无法将 this 重载为其他对象的方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>声明一个全局变量的结果不仅仅是创建一个全局变量，而且还会在 global 对象（在浏览器中为window）中创建一个同名属性<ul>\n<li>由于浏览器历史问题，<strong>在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量</strong></li>\n</ul>\n</li>\n<li>不要扩展原生原型，可能产生冲突</li>\n<li>使用 <code>&lt;script&gt; .. &lt;/script&gt;</code> 引入的脚本，共享 global 对象（浏览器中的 window），但是全局变量作用域的提升机制在此时不适用<ul>\n<li>下面的代码都无法运行（foo() 还未被声明）  <pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n"},{"title":"我的2021年总结","date":"2021-12-22T07:44:53.000Z","_content":"\n## 关于工作\n\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n## 关于个人成长\n\n### 番茄钟学习记录\n\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png)\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n\n### 极简主义和焦虑\n\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”\n","source":"_posts/我的2021年总结.md","raw":"---\ntitle: 我的2021年总结\ndate: 2021-12-22 15:44:53\ncategories: 无限进步\ntags: 复盘与总结\n---\n\n## 关于工作\n\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n## 关于个人成长\n\n### 番茄钟学习记录\n\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png)\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n\n### 极简主义和焦虑\n\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”\n","slug":"我的2021年总结","published":1,"updated":"2022-07-30T10:24:57.225Z","_id":"cl0m014b5000za7sj8tdf517p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png\"\n                     \n                ><br>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/20211222081511.png\"\n                     \n                ><br>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n"},{"title":"《Vuejs 设计与实现》学习笔记：框架设计概览","date":"2022-03-23T04:42:32.000Z","_content":"\n### 第 1 章：权衡的艺术\n\n- 命令式和声明式\n  - 命令式：关注目的实现的**过程**，比如 JQuery、直接操作 Dom\n  - 声明式：关注目的实现的**结果**，不在乎如何实现\n    ```vue\n    <div @click=\"() => alert('hello')\">hello</div>\n    ```\n  - 声明式框架内部封装的是命令式代码\n  - **声明式的性能 <= 命令式**\n    - 命令式直接操作，性能 = B(直接修改)\n    - 声明式需要找出区别，再通过命令操作，性能 = A(找出差异) + B(直接修改)\n  - 声明式的可维护性 > 命令式\n  - 设计声明式框架，重点在于：**保持可维护性的同时，尽可能提升性能**\n- 虚拟 DOM 性能比较\n\n  - 三种常用创建页面方式：innerHTML、虚拟 DOM、原生操作\n\n    |          | innerHTML | 虚拟 DOM | 原生 |\n    | -------- | --------- | -------- | ---- |\n    | 性能     | 差        | 一般     | 最好 |\n    | 可维护性 | 一般      | 最好     | 差   |\n    | 心智负担 | 一般      | 最好     | 差   |\n\n  - 新建页面时，innerHTML 和虚拟 DOM 性能差距不大\n  - innerHTML 性能差的原因：在更新页面时，需要销毁所有旧 DOM，重新创建新 DOM，**页面越大，性能越差**\n  - 虚拟 DOM 只更新必要的 DOM，和页面大小无关\n\n- 运行时和编译时\n  - 运行时：代码直接运行，缺点是不能分析提供的代码内容，缺少性能\n  - 编译时：将代码进行分析转换为可执行的代码，缺点是灵活性较差\n  - Vue.js 是运行时 + 编译时架构，**保证灵活性的基础上，通过分析，尽可能提升性能**\n\n### 第 2 章：框架设计的核心要素\n\n- **提升用户的开发体验**：比如明显的告警错误提示\n  - 快速定位问题\n  - 节省时间\n- **控制代码体积**\n  - 框架层面支持：比如区分 dev 和 prod 环境，dev 环境执行的错误提示等代码在 prod 环境可以剔除，**不会增加生产代码体积**\n  - Tree-Shaking：排除永远不会执行的代码\n    - 必须是 ESModule 才支持 Tree-Shaking\n    - 通过静态扫描排除不必要的代码\n    - 如果代码产生副作用（对外部产生影响），则代码不会被剔除。一般只有顶级调用的函数才可能出现副作用\n    - 可以通过增加 `/*#__PURE__*/` 显示声明代码可以被 Tree-Shaking 剔除\n- **支持输出多种构建产物**\n  - 根据打包和运行环境不同，可是通过 IIFE 格式直接引用，可以输出支持 webpack / rollup 的 esm-bundler 文件，也可输出支持浏览器直接运行的 esm-browser 文件，还可以支持 node.js 运行的文件\n  - 以上输出可以使用不同参数配置\n- **特性开关**\n  - 框架的各种特性可以通过不同的开关来处理\n  - 特性开关的好处：\n    - 更好的使用 Tree-Shaking\n    - 灵活性：\n      1. 通过特性开关增加新特性而不用担心打包文件体积\n      2. 框架升级时可以通过特性开关保留需要的功能，利于平滑升级\n- **错误处理**\n  - 错误处理决定代码的健壮性\n  - 内部使用一个统一的方法 `callWithErrorHandling` 来捕获错误\n  - 通过 `registerErrorHandle` 函数可以注册错误处理程序，处理 `callWithErrorHandling` 捕获到的错误\n- **良好的 TS 类型支持**\n  - 使用 TS 编写代码不等于良好的 TS 类型支持，良好的类型支持需要能够更直观的展示类型\n  - Vue.js 源码的 `runtime-core/src.apiDefineComponent.ts` 主要为 TS 类型支持服务\n\n### 第 3 章：Vue.js 3 的设计思路\n\n- 声明式描述 UI\n  - 使用 HTML 描述页面涉及如下四个方面\n    - DOM 元素\n    - 属性：id、class ...\n    - 时间：click\n    - 元素的层级结构\n  - 针对以上四个方面，Vue 提供的解决方案\n    - 使用与 HTML 标签一致的方式描述 DOM 元素\n    - 使用与 HTML 标签一致的方式描述基础属性，使用 `:` 或 `v-bind` 描述动态属性\n    - 使用 `@` 或 `v-on` 描述事件\n    - 使用和 HTML 一样的方式描述层级结构\n  - 除了使用模板的方式描述页面，还可以使用 JS 对象的方式描述（即虚拟 DOM）UI，再通过渲染器渲染页面\n  - h 函数是一个辅助创建虚拟 DOM 的工具函数\n- 渲染器基础\n\n  - 渲染器作用：把虚拟 DOM 渲染为真实 DOM\n  - 渲染器的实现思路\n    - 接受两个参数：虚拟 DOM、挂载点（真实 DOM，用于放置被渲染的虚拟 DOM）\n    - 创建元素：通过 `vnode.tag` 创建 DOM 元素\n    - 处理属性和事件：如果属性以 on 开通，说明是事件，截取 on 之后的函数内容添加到 `addEventListener` 函数\n    - 处理 children：如果是一个数组，则递归调用 render 继续渲染，如果是一个 string，则通过 `createTextNode` 函数创建一个文本节点\n  - **渲染器的核心在于准确找到变更节点并变更内容**\n  - 创建渲染器参考函数\n\n    ```js\n    function renderer(vnode, container) {\n      // 使用 vnode.tag 作为标签名创建 DOM 元素\n      const el = document.createElement(vnode.tag);\n      // 遍历 vnode.props，将属性、事件添加到 DOM 元素\n      for (const key in vnode.props) {\n        if (/^in/.test(key)) {\n          el.addEventListener(key.substr(2).toLowerCase(), vnode.props[key]);\n        }\n      }\n\n      // 处理 children\n      if (typeof vnode.children === \"string\") {\n        el.appendChild(document.createTextNode(vnode.children));\n      } else if (Array.isArray(vnode.children)) {\n        vnode.children.forEach((child) => {\n          renderer(child, el);\n        });\n      }\n\n      // 将元素添加到挂载点下\n      container.appendChild(el);\n    }\n    ```\n\n- 组件的本质\n\n  - **组件就是一组 DOM 元素的封装**，可以由函数组成，也可以由对象组成\n  - 处理渲染组件的函数是 `mountComponent`\n\n    - 实现步骤\n\n      1. 获取要渲染的内容（虚拟 DOM）\n      2. 递归调用 render 渲染\n\n    - 函数式组件渲染\n      ```js\n      function mountComponent(vnode, container) {\n        const subtree = vnode.tag();\n        renderer(subtree, container);\n      }\n      ```\n    - 对象式组件渲染\n      ```js\n      function mountComponent(vnode, container) {\n        const subtree = vnode.tag.render(); // 调用对象的 render 函数获取虚拟 DOM\n        renderer(subtree, container);\n      }\n      ```\n\n- 编译器的作用：将模板编译为渲染函数\n- 编译器将模板编译为渲染函数，渲染函数将虚拟 DOM 转化为真实 DOM，两者相互依赖，可以借助对方提升整体性能（比如编译器告诉渲染器哪些元素是静态，更新的时候渲染函数就可以只针对动态内容更新，提升效率）\n","source":"_posts/《Vuejs-设计与实现》学习笔记：框架设计概览.md","raw":"---\ntitle: 《Vuejs 设计与实现》学习笔记：框架设计概览\ndate: 2022-03-23 12:42:32\ncategories: 前端\ntags: vue\n---\n\n### 第 1 章：权衡的艺术\n\n- 命令式和声明式\n  - 命令式：关注目的实现的**过程**，比如 JQuery、直接操作 Dom\n  - 声明式：关注目的实现的**结果**，不在乎如何实现\n    ```vue\n    <div @click=\"() => alert('hello')\">hello</div>\n    ```\n  - 声明式框架内部封装的是命令式代码\n  - **声明式的性能 <= 命令式**\n    - 命令式直接操作，性能 = B(直接修改)\n    - 声明式需要找出区别，再通过命令操作，性能 = A(找出差异) + B(直接修改)\n  - 声明式的可维护性 > 命令式\n  - 设计声明式框架，重点在于：**保持可维护性的同时，尽可能提升性能**\n- 虚拟 DOM 性能比较\n\n  - 三种常用创建页面方式：innerHTML、虚拟 DOM、原生操作\n\n    |          | innerHTML | 虚拟 DOM | 原生 |\n    | -------- | --------- | -------- | ---- |\n    | 性能     | 差        | 一般     | 最好 |\n    | 可维护性 | 一般      | 最好     | 差   |\n    | 心智负担 | 一般      | 最好     | 差   |\n\n  - 新建页面时，innerHTML 和虚拟 DOM 性能差距不大\n  - innerHTML 性能差的原因：在更新页面时，需要销毁所有旧 DOM，重新创建新 DOM，**页面越大，性能越差**\n  - 虚拟 DOM 只更新必要的 DOM，和页面大小无关\n\n- 运行时和编译时\n  - 运行时：代码直接运行，缺点是不能分析提供的代码内容，缺少性能\n  - 编译时：将代码进行分析转换为可执行的代码，缺点是灵活性较差\n  - Vue.js 是运行时 + 编译时架构，**保证灵活性的基础上，通过分析，尽可能提升性能**\n\n### 第 2 章：框架设计的核心要素\n\n- **提升用户的开发体验**：比如明显的告警错误提示\n  - 快速定位问题\n  - 节省时间\n- **控制代码体积**\n  - 框架层面支持：比如区分 dev 和 prod 环境，dev 环境执行的错误提示等代码在 prod 环境可以剔除，**不会增加生产代码体积**\n  - Tree-Shaking：排除永远不会执行的代码\n    - 必须是 ESModule 才支持 Tree-Shaking\n    - 通过静态扫描排除不必要的代码\n    - 如果代码产生副作用（对外部产生影响），则代码不会被剔除。一般只有顶级调用的函数才可能出现副作用\n    - 可以通过增加 `/*#__PURE__*/` 显示声明代码可以被 Tree-Shaking 剔除\n- **支持输出多种构建产物**\n  - 根据打包和运行环境不同，可是通过 IIFE 格式直接引用，可以输出支持 webpack / rollup 的 esm-bundler 文件，也可输出支持浏览器直接运行的 esm-browser 文件，还可以支持 node.js 运行的文件\n  - 以上输出可以使用不同参数配置\n- **特性开关**\n  - 框架的各种特性可以通过不同的开关来处理\n  - 特性开关的好处：\n    - 更好的使用 Tree-Shaking\n    - 灵活性：\n      1. 通过特性开关增加新特性而不用担心打包文件体积\n      2. 框架升级时可以通过特性开关保留需要的功能，利于平滑升级\n- **错误处理**\n  - 错误处理决定代码的健壮性\n  - 内部使用一个统一的方法 `callWithErrorHandling` 来捕获错误\n  - 通过 `registerErrorHandle` 函数可以注册错误处理程序，处理 `callWithErrorHandling` 捕获到的错误\n- **良好的 TS 类型支持**\n  - 使用 TS 编写代码不等于良好的 TS 类型支持，良好的类型支持需要能够更直观的展示类型\n  - Vue.js 源码的 `runtime-core/src.apiDefineComponent.ts` 主要为 TS 类型支持服务\n\n### 第 3 章：Vue.js 3 的设计思路\n\n- 声明式描述 UI\n  - 使用 HTML 描述页面涉及如下四个方面\n    - DOM 元素\n    - 属性：id、class ...\n    - 时间：click\n    - 元素的层级结构\n  - 针对以上四个方面，Vue 提供的解决方案\n    - 使用与 HTML 标签一致的方式描述 DOM 元素\n    - 使用与 HTML 标签一致的方式描述基础属性，使用 `:` 或 `v-bind` 描述动态属性\n    - 使用 `@` 或 `v-on` 描述事件\n    - 使用和 HTML 一样的方式描述层级结构\n  - 除了使用模板的方式描述页面，还可以使用 JS 对象的方式描述（即虚拟 DOM）UI，再通过渲染器渲染页面\n  - h 函数是一个辅助创建虚拟 DOM 的工具函数\n- 渲染器基础\n\n  - 渲染器作用：把虚拟 DOM 渲染为真实 DOM\n  - 渲染器的实现思路\n    - 接受两个参数：虚拟 DOM、挂载点（真实 DOM，用于放置被渲染的虚拟 DOM）\n    - 创建元素：通过 `vnode.tag` 创建 DOM 元素\n    - 处理属性和事件：如果属性以 on 开通，说明是事件，截取 on 之后的函数内容添加到 `addEventListener` 函数\n    - 处理 children：如果是一个数组，则递归调用 render 继续渲染，如果是一个 string，则通过 `createTextNode` 函数创建一个文本节点\n  - **渲染器的核心在于准确找到变更节点并变更内容**\n  - 创建渲染器参考函数\n\n    ```js\n    function renderer(vnode, container) {\n      // 使用 vnode.tag 作为标签名创建 DOM 元素\n      const el = document.createElement(vnode.tag);\n      // 遍历 vnode.props，将属性、事件添加到 DOM 元素\n      for (const key in vnode.props) {\n        if (/^in/.test(key)) {\n          el.addEventListener(key.substr(2).toLowerCase(), vnode.props[key]);\n        }\n      }\n\n      // 处理 children\n      if (typeof vnode.children === \"string\") {\n        el.appendChild(document.createTextNode(vnode.children));\n      } else if (Array.isArray(vnode.children)) {\n        vnode.children.forEach((child) => {\n          renderer(child, el);\n        });\n      }\n\n      // 将元素添加到挂载点下\n      container.appendChild(el);\n    }\n    ```\n\n- 组件的本质\n\n  - **组件就是一组 DOM 元素的封装**，可以由函数组成，也可以由对象组成\n  - 处理渲染组件的函数是 `mountComponent`\n\n    - 实现步骤\n\n      1. 获取要渲染的内容（虚拟 DOM）\n      2. 递归调用 render 渲染\n\n    - 函数式组件渲染\n      ```js\n      function mountComponent(vnode, container) {\n        const subtree = vnode.tag();\n        renderer(subtree, container);\n      }\n      ```\n    - 对象式组件渲染\n      ```js\n      function mountComponent(vnode, container) {\n        const subtree = vnode.tag.render(); // 调用对象的 render 函数获取虚拟 DOM\n        renderer(subtree, container);\n      }\n      ```\n\n- 编译器的作用：将模板编译为渲染函数\n- 编译器将模板编译为渲染函数，渲染函数将虚拟 DOM 转化为真实 DOM，两者相互依赖，可以借助对方提升整体性能（比如编译器告诉渲染器哪些元素是静态，更新的时候渲染函数就可以只针对动态内容更新，提升效率）\n","slug":"《Vuejs-设计与实现》学习笔记：框架设计概览","published":1,"updated":"2022-08-21T13:26:16.632Z","_id":"cl132y9fe0000380e8e85185t","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"第-1-章：权衡的艺术\"><a href=\"#第-1-章：权衡的艺术\" class=\"headerlink\" title=\"第 1 章：权衡的艺术\"></a>第 1 章：权衡的艺术</h3><ul>\n<li><p>命令式和声明式</p>\n<ul>\n<li>命令式：关注目的实现的<strong>过程</strong>，比如 JQuery、直接操作 Dom</li>\n<li>声明式：关注目的实现的<strong>结果</strong>，不在乎如何实现<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div @click&#x3D;&quot;() &#x3D;&gt; alert(&#39;hello&#39;)&quot;&gt;hello&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>声明式框架内部封装的是命令式代码</li>\n<li><strong>声明式的性能 &lt;= 命令式</strong><ul>\n<li>命令式直接操作，性能 = B(直接修改)</li>\n<li>声明式需要找出区别，再通过命令操作，性能 = A(找出差异) + B(直接修改)</li>\n</ul>\n</li>\n<li>声明式的可维护性 &gt; 命令式</li>\n<li>设计声明式框架，重点在于：<strong>保持可维护性的同时，尽可能提升性能</strong></li>\n</ul>\n</li>\n<li><p>虚拟 DOM 性能比较</p>\n<ul>\n<li><p>三种常用创建页面方式：innerHTML、虚拟 DOM、原生操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>innerHTML</th>\n<th>虚拟 DOM</th>\n<th>原生</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>性能</td>\n<td>差</td>\n<td>一般</td>\n<td>最好</td>\n</tr>\n<tr>\n<td>可维护性</td>\n<td>一般</td>\n<td>最好</td>\n<td>差</td>\n</tr>\n<tr>\n<td>心智负担</td>\n<td>一般</td>\n<td>最好</td>\n<td>差</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>新建页面时，innerHTML 和虚拟 DOM 性能差距不大</p>\n</li>\n<li><p>innerHTML 性能差的原因：在更新页面时，需要销毁所有旧 DOM，重新创建新 DOM，<strong>页面越大，性能越差</strong></p>\n</li>\n<li><p>虚拟 DOM 只更新必要的 DOM，和页面大小无关</p>\n</li>\n</ul>\n</li>\n<li><p>运行时和编译时</p>\n<ul>\n<li>运行时：代码直接运行，缺点是不能分析提供的代码内容，缺少性能</li>\n<li>编译时：将代码进行分析转换为可执行的代码，缺点是灵活性较差</li>\n<li>Vue.js 是运行时 + 编译时架构，<strong>保证灵活性的基础上，通过分析，尽可能提升性能</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-2-章：框架设计的核心要素\"><a href=\"#第-2-章：框架设计的核心要素\" class=\"headerlink\" title=\"第 2 章：框架设计的核心要素\"></a>第 2 章：框架设计的核心要素</h3><ul>\n<li><strong>提升用户的开发体验</strong>：比如明显的告警错误提示<ul>\n<li>快速定位问题</li>\n<li>节省时间</li>\n</ul>\n</li>\n<li><strong>控制代码体积</strong><ul>\n<li>框架层面支持：比如区分 dev 和 prod 环境，dev 环境执行的错误提示等代码在 prod 环境可以剔除，<strong>不会增加生产代码体积</strong></li>\n<li>Tree-Shaking：排除永远不会执行的代码<ul>\n<li>必须是 ESModule 才支持 Tree-Shaking</li>\n<li>通过静态扫描排除不必要的代码</li>\n<li>如果代码产生副作用（对外部产生影响），则代码不会被剔除。一般只有顶级调用的函数才可能出现副作用</li>\n<li>可以通过增加 <code>/*#__PURE__*/</code> 显示声明代码可以被 Tree-Shaking 剔除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>支持输出多种构建产物</strong><ul>\n<li>根据打包和运行环境不同，可是通过 IIFE 格式直接引用，可以输出支持 webpack / rollup 的 esm-bundler 文件，也可输出支持浏览器直接运行的 esm-browser 文件，还可以支持 node.js 运行的文件</li>\n<li>以上输出可以使用不同参数配置</li>\n</ul>\n</li>\n<li><strong>特性开关</strong><ul>\n<li>框架的各种特性可以通过不同的开关来处理</li>\n<li>特性开关的好处：<ul>\n<li>更好的使用 Tree-Shaking</li>\n<li>灵活性：<ol>\n<li>通过特性开关增加新特性而不用担心打包文件体积</li>\n<li>框架升级时可以通过特性开关保留需要的功能，利于平滑升级</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>错误处理</strong><ul>\n<li>错误处理决定代码的健壮性</li>\n<li>内部使用一个统一的方法 <code>callWithErrorHandling</code> 来捕获错误</li>\n<li>通过 <code>registerErrorHandle</code> 函数可以注册错误处理程序，处理 <code>callWithErrorHandling</code> 捕获到的错误</li>\n</ul>\n</li>\n<li><strong>良好的 TS 类型支持</strong><ul>\n<li>使用 TS 编写代码不等于良好的 TS 类型支持，良好的类型支持需要能够更直观的展示类型</li>\n<li>Vue.js 源码的 <code>runtime-core/src.apiDefineComponent.ts</code> 主要为 TS 类型支持服务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-3-章：Vue-js-3-的设计思路\"><a href=\"#第-3-章：Vue-js-3-的设计思路\" class=\"headerlink\" title=\"第 3 章：Vue.js 3 的设计思路\"></a>第 3 章：Vue.js 3 的设计思路</h3><ul>\n<li><p>声明式描述 UI</p>\n<ul>\n<li>使用 HTML 描述页面涉及如下四个方面<ul>\n<li>DOM 元素</li>\n<li>属性：id、class …</li>\n<li>时间：click</li>\n<li>元素的层级结构</li>\n</ul>\n</li>\n<li>针对以上四个方面，Vue 提供的解决方案<ul>\n<li>使用与 HTML 标签一致的方式描述 DOM 元素</li>\n<li>使用与 HTML 标签一致的方式描述基础属性，使用 <code>:</code> 或 <code>v-bind</code> 描述动态属性</li>\n<li>使用 <code>@</code> 或 <code>v-on</code> 描述事件</li>\n<li>使用和 HTML 一样的方式描述层级结构</li>\n</ul>\n</li>\n<li>除了使用模板的方式描述页面，还可以使用 JS 对象的方式描述（即虚拟 DOM）UI，再通过渲染器渲染页面</li>\n<li>h 函数是一个辅助创建虚拟 DOM 的工具函数</li>\n</ul>\n</li>\n<li><p>渲染器基础</p>\n<ul>\n<li><p>渲染器作用：把虚拟 DOM 渲染为真实 DOM</p>\n</li>\n<li><p>渲染器的实现思路</p>\n<ul>\n<li>接受两个参数：虚拟 DOM、挂载点（真实 DOM，用于放置被渲染的虚拟 DOM）</li>\n<li>创建元素：通过 <code>vnode.tag</code> 创建 DOM 元素</li>\n<li>处理属性和事件：如果属性以 on 开通，说明是事件，截取 on 之后的函数内容添加到 <code>addEventListener</code> 函数</li>\n<li>处理 children：如果是一个数组，则递归调用 render 继续渲染，如果是一个 string，则通过 <code>createTextNode</code> 函数创建一个文本节点</li>\n</ul>\n</li>\n<li><p><strong>渲染器的核心在于准确找到变更节点并变更内容</strong></p>\n</li>\n<li><p>创建渲染器参考函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用 vnode.tag 作为标签名创建 DOM 元素</span>\n  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 遍历 vnode.props，将属性、事件添加到 DOM 元素</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> vnode<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^in</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 处理 children</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> vnode<span class=\"token punctuation\">.</span>children <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 将元素添加到挂载点下</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>组件的本质</p>\n<ul>\n<li><p><strong>组件就是一组 DOM 元素的封装</strong>，可以由函数组成，也可以由对象组成</p>\n</li>\n<li><p>处理渲染组件的函数是 <code>mountComponent</code></p>\n<ul>\n<li><p>实现步骤</p>\n<ol>\n<li>获取要渲染的内容（虚拟 DOM）</li>\n<li>递归调用 render 渲染</li>\n</ol>\n</li>\n<li><p>函数式组件渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subtree <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>subtree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对象式组件渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subtree <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用对象的 render 函数获取虚拟 DOM</span>\n  <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>subtree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>编译器的作用：将模板编译为渲染函数</p>\n</li>\n<li><p>编译器将模板编译为渲染函数，渲染函数将虚拟 DOM 转化为真实 DOM，两者相互依赖，可以借助对方提升整体性能（比如编译器告诉渲染器哪些元素是静态，更新的时候渲染函数就可以只针对动态内容更新，提升效率）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"第-1-章：权衡的艺术\"><a href=\"#第-1-章：权衡的艺术\" class=\"headerlink\" title=\"第 1 章：权衡的艺术\"></a>第 1 章：权衡的艺术</h3><ul>\n<li><p>命令式和声明式</p>\n<ul>\n<li>命令式：关注目的实现的<strong>过程</strong>，比如 JQuery、直接操作 Dom</li>\n<li>声明式：关注目的实现的<strong>结果</strong>，不在乎如何实现<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div @click&#x3D;&quot;() &#x3D;&gt; alert(&#39;hello&#39;)&quot;&gt;hello&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>声明式框架内部封装的是命令式代码</li>\n<li><strong>声明式的性能 &lt;= 命令式</strong><ul>\n<li>命令式直接操作，性能 = B(直接修改)</li>\n<li>声明式需要找出区别，再通过命令操作，性能 = A(找出差异) + B(直接修改)</li>\n</ul>\n</li>\n<li>声明式的可维护性 &gt; 命令式</li>\n<li>设计声明式框架，重点在于：<strong>保持可维护性的同时，尽可能提升性能</strong></li>\n</ul>\n</li>\n<li><p>虚拟 DOM 性能比较</p>\n<ul>\n<li><p>三种常用创建页面方式：innerHTML、虚拟 DOM、原生操作</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>innerHTML</th>\n<th>虚拟 DOM</th>\n<th>原生</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>性能</td>\n<td>差</td>\n<td>一般</td>\n<td>最好</td>\n</tr>\n<tr>\n<td>可维护性</td>\n<td>一般</td>\n<td>最好</td>\n<td>差</td>\n</tr>\n<tr>\n<td>心智负担</td>\n<td>一般</td>\n<td>最好</td>\n<td>差</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>新建页面时，innerHTML 和虚拟 DOM 性能差距不大</p>\n</li>\n<li><p>innerHTML 性能差的原因：在更新页面时，需要销毁所有旧 DOM，重新创建新 DOM，<strong>页面越大，性能越差</strong></p>\n</li>\n<li><p>虚拟 DOM 只更新必要的 DOM，和页面大小无关</p>\n</li>\n</ul>\n</li>\n<li><p>运行时和编译时</p>\n<ul>\n<li>运行时：代码直接运行，缺点是不能分析提供的代码内容，缺少性能</li>\n<li>编译时：将代码进行分析转换为可执行的代码，缺点是灵活性较差</li>\n<li>Vue.js 是运行时 + 编译时架构，<strong>保证灵活性的基础上，通过分析，尽可能提升性能</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-2-章：框架设计的核心要素\"><a href=\"#第-2-章：框架设计的核心要素\" class=\"headerlink\" title=\"第 2 章：框架设计的核心要素\"></a>第 2 章：框架设计的核心要素</h3><ul>\n<li><strong>提升用户的开发体验</strong>：比如明显的告警错误提示<ul>\n<li>快速定位问题</li>\n<li>节省时间</li>\n</ul>\n</li>\n<li><strong>控制代码体积</strong><ul>\n<li>框架层面支持：比如区分 dev 和 prod 环境，dev 环境执行的错误提示等代码在 prod 环境可以剔除，<strong>不会增加生产代码体积</strong></li>\n<li>Tree-Shaking：排除永远不会执行的代码<ul>\n<li>必须是 ESModule 才支持 Tree-Shaking</li>\n<li>通过静态扫描排除不必要的代码</li>\n<li>如果代码产生副作用（对外部产生影响），则代码不会被剔除。一般只有顶级调用的函数才可能出现副作用</li>\n<li>可以通过增加 <code>/*#__PURE__*/</code> 显示声明代码可以被 Tree-Shaking 剔除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>支持输出多种构建产物</strong><ul>\n<li>根据打包和运行环境不同，可是通过 IIFE 格式直接引用，可以输出支持 webpack / rollup 的 esm-bundler 文件，也可输出支持浏览器直接运行的 esm-browser 文件，还可以支持 node.js 运行的文件</li>\n<li>以上输出可以使用不同参数配置</li>\n</ul>\n</li>\n<li><strong>特性开关</strong><ul>\n<li>框架的各种特性可以通过不同的开关来处理</li>\n<li>特性开关的好处：<ul>\n<li>更好的使用 Tree-Shaking</li>\n<li>灵活性：<ol>\n<li>通过特性开关增加新特性而不用担心打包文件体积</li>\n<li>框架升级时可以通过特性开关保留需要的功能，利于平滑升级</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>错误处理</strong><ul>\n<li>错误处理决定代码的健壮性</li>\n<li>内部使用一个统一的方法 <code>callWithErrorHandling</code> 来捕获错误</li>\n<li>通过 <code>registerErrorHandle</code> 函数可以注册错误处理程序，处理 <code>callWithErrorHandling</code> 捕获到的错误</li>\n</ul>\n</li>\n<li><strong>良好的 TS 类型支持</strong><ul>\n<li>使用 TS 编写代码不等于良好的 TS 类型支持，良好的类型支持需要能够更直观的展示类型</li>\n<li>Vue.js 源码的 <code>runtime-core/src.apiDefineComponent.ts</code> 主要为 TS 类型支持服务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第-3-章：Vue-js-3-的设计思路\"><a href=\"#第-3-章：Vue-js-3-的设计思路\" class=\"headerlink\" title=\"第 3 章：Vue.js 3 的设计思路\"></a>第 3 章：Vue.js 3 的设计思路</h3><ul>\n<li><p>声明式描述 UI</p>\n<ul>\n<li>使用 HTML 描述页面涉及如下四个方面<ul>\n<li>DOM 元素</li>\n<li>属性：id、class …</li>\n<li>时间：click</li>\n<li>元素的层级结构</li>\n</ul>\n</li>\n<li>针对以上四个方面，Vue 提供的解决方案<ul>\n<li>使用与 HTML 标签一致的方式描述 DOM 元素</li>\n<li>使用与 HTML 标签一致的方式描述基础属性，使用 <code>:</code> 或 <code>v-bind</code> 描述动态属性</li>\n<li>使用 <code>@</code> 或 <code>v-on</code> 描述事件</li>\n<li>使用和 HTML 一样的方式描述层级结构</li>\n</ul>\n</li>\n<li>除了使用模板的方式描述页面，还可以使用 JS 对象的方式描述（即虚拟 DOM）UI，再通过渲染器渲染页面</li>\n<li>h 函数是一个辅助创建虚拟 DOM 的工具函数</li>\n</ul>\n</li>\n<li><p>渲染器基础</p>\n<ul>\n<li><p>渲染器作用：把虚拟 DOM 渲染为真实 DOM</p>\n</li>\n<li><p>渲染器的实现思路</p>\n<ul>\n<li>接受两个参数：虚拟 DOM、挂载点（真实 DOM，用于放置被渲染的虚拟 DOM）</li>\n<li>创建元素：通过 <code>vnode.tag</code> 创建 DOM 元素</li>\n<li>处理属性和事件：如果属性以 on 开通，说明是事件，截取 on 之后的函数内容添加到 <code>addEventListener</code> 函数</li>\n<li>处理 children：如果是一个数组，则递归调用 render 继续渲染，如果是一个 string，则通过 <code>createTextNode</code> 函数创建一个文本节点</li>\n</ul>\n</li>\n<li><p><strong>渲染器的核心在于准确找到变更节点并变更内容</strong></p>\n</li>\n<li><p>创建渲染器参考函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 使用 vnode.tag 作为标签名创建 DOM 元素</span>\n  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 遍历 vnode.props，将属性、事件添加到 DOM 元素</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> vnode<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^in</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> vnode<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 处理 children</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> vnode<span class=\"token punctuation\">.</span>children <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vnode<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 将元素添加到挂载点下</span>\n  container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>组件的本质</p>\n<ul>\n<li><p><strong>组件就是一组 DOM 元素的封装</strong>，可以由函数组成，也可以由对象组成</p>\n</li>\n<li><p>处理渲染组件的函数是 <code>mountComponent</code></p>\n<ul>\n<li><p>实现步骤</p>\n<ol>\n<li>获取要渲染的内容（虚拟 DOM）</li>\n<li>递归调用 render 渲染</li>\n</ol>\n</li>\n<li><p>函数式组件渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subtree <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span><span class=\"token function\">tag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>subtree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>对象式组件渲染</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">mountComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vnode<span class=\"token punctuation\">,</span> container</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> subtree <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用对象的 render 函数获取虚拟 DOM</span>\n  <span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span>subtree<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>编译器的作用：将模板编译为渲染函数</p>\n</li>\n<li><p>编译器将模板编译为渲染函数，渲染函数将虚拟 DOM 转化为真实 DOM，两者相互依赖，可以借助对方提升整体性能（比如编译器告诉渲染器哪些元素是静态，更新的时候渲染函数就可以只针对动态内容更新，提升效率）</p>\n</li>\n</ul>\n"},{"title":"Vue 中直接上手的性能优化方案","date":"2022-07-30T07:57:12.000Z","_content":"\n最近使用 Vue 开发的过程中使用到一些对于性能有所提升的编码方式，所以特别梳理出来，可以作为后续 Vue 开发的编码规范使用\n\n性能优化方案主要分为三类，下面就详细讲讲这三类优化方案的应用\n\n- 减少响应式使用\n- 减少 DOM 渲染\n- 减少打包体积\n\n## 减少响应式使用\n\nVue 中使用最方便的就是响应式的变量，在读取（get）对象属性的时候收集副作用函数（effect）依赖，在写入（set）属性时取出副作用函数依赖执行，但是收集依赖、触发依赖执行毕竟都会影响到性能，所以在明确知道不需要使用响应式变量的场景下，就应该减少响应式变量的使用\n\n### 1. 使用 computed 缓存计算结果\n\ncomputed 和普通方法的区别在于：computed 会**缓存计算结果**，只有当计算的内容改变的时候才会重新计算，而普通方法每次都会重新计算。所以对于有计算逻辑的取值，建议尽量都通过 computed 来封装一层\n\n比如下面这个示例就是简单的将 props 通过 computed 封装一层后共 template 使用\n\n```ts\nconst getTooltipStyle = computed((): CSSProperties => {\n  return {\n    color: props.color,\n    fontSize: props.fontSize,\n  };\n});\n```\n\n### 2. 本地化响应式变量\n\n根据 Vue 响应式变量的原理，每次访问响应式数据时，都会收集依赖，所以在需要频繁使用响应式变量的时候，可以先将响应式变量用一个本地变量存储，转换为一个非响应式的变量\n\n在 Vue3 中可以使用 `unref` 这个 api 来获取到响应式变量参数本身（Vue2 中直接通过 `this` 赋值就好）\n\n```ts\nconst tableData = ref([]);\n\nconst unrefTableData = unref(tableData); // 本地化变量后再做大量操作\nunrefTableData.forEach((item) => {\n  // 具体操作\n});\n```\n\n### 3. 函数式组件（Vue2）\n\n函数式组件是指：只接受一些 prop 参数，无响应式数据，无实例的组件，主要应用在创建简单的展示组件，比如标题 header、纯展示的表单等等。因为没有响应式数据和实例，所以初始化速度比普通有状态的组件快很多，并且还支持返回多个节点\n\n在 Vue2 中声明函数式组件的方式如下\n\n```vue\n<!-- template 中的声明方式 -->\n<template functional></template>\n\n<!-- jsx 中的声明方式 -->\nVue.component(\"list\", { functional: true, })\n```\n\n但是在 Vue3 中，有状态的组件性能已经大大提升，和无状态组件（函数式组件）几乎没有差异，并且有状态组件也支持了返回多个节点，所以官方也移除了 `functional` 定义函数式组件的方式，**注意 Vue3 中是不兼容 Vue2 的函数式组件定义**，所以如果未来打算升级 Vue3 的小伙伴就不建议使用函数式组件了\n\n## 减少 DOM 渲染压力\n\n### 1. DOM 频繁切换展示的情况使用 v-show\n\n这是一个老身长谈的优化方案了，原理在于 `v-if` 和 `v-show` 实现方式的区别，对于 `v-if` 在不符合条件的情况下不会渲染 DOM 节点，对于 `v-show` 则是将各个条件情况都渲染出来，在通过 `display: block / none` 进行切换，所以在频繁切换 DOM 展示情况的场景下，使用 `v-show` 的性能会相对更好，比如一个可编辑单元格需要频繁切换编辑和保存后的状态的时候\n\n但 `v-show` 也不是没有缺点，因为会把各个分支情况都提前渲染出来，如果节点很多并且不需要频繁切换状态，用 `v-if` 会是更好的选择\n\n### 2. keep-alive 缓存组件状态\n\n在 Vue 中切换组件时，组件内部的状态也会丢失，比如我们在填写一个表单的时候，切换到另外一个组件填写其他信息，在切换回之前的表单组件后，原来填写的信息会被刷新掉，这种情况下就会使用到 keep-alive 组件缓存组件状态\n\n比较常用的做法是在 `<router-view>` 标签内嵌套一层 `<transition>` 标签增加组件切换时的过渡动画效果，再嵌套一层 `<keep-alive>` 标签缓存组件状态，最后使用 `<component>` 渲染动态组件或者元素\n\n```vue\n<router-view>\n  <template #default=\"{ Component, route }\">\n    <transition>\n      \t<keep-alive>\n        \t<component :is=\"Component\" :key=\"route.path\" />\n    \t</keep-alive>\n    </transition>\n  </template>\n</router-view>\n```\n\n### 3. 路由懒加载\n\n我们都知道 Vue 是单页面页面应用，如果在首屏加载的时候就把所有需要使用的路由都加载出来的话，那就太浪费性能了，所以使用懒加载的方式加载路由，减少首屏加载的压力，才是更合理的方案\n\n在 vue-router 中使用路由懒加载需要通过箭头函数返回一个 `import` 组件的路径，这样在运行到这个组件的时候，才会运行 `import` 编译加载组件\n\n```ts\nconst form: AppRouteRecordRaw = {\n  path: \"/basicForm\",\n  name: \"BasicForm\",\n  component: () => import(\"/@/views/form/index.vue\"),\n  meta: {\n    title: \"基础表单\",\n  },\n};\n\nexport default form;\n```\n\n### 4. 图片懒加载\n\n图片使用懒加载的原因和路由懒加载类似，都是为了减少不必要的渲染。比如我们有一张很长的页面有很多数据或者图片需要展示，而显示屏幕的可视高度却是固定的，所以在屏幕高度外的内容完全可以等到页面需要的时候再加载，从而减少了可是屏幕区域内的渲染压力\n\n图片懒加载的原理是：判断图片出现在当前窗口时，将 `data-src` 替换为 `src` 加载图片，比较常用三个可视区域判断方式是\n\n- `img.getBoundingClientRect().top` < `document.documentElement.clientHeight`（元素相对于窗口位置 < 窗体高度）\n- `IntersectionObserver` api，当其监听到目标元素的可见部分到达屏幕高度内，执行指定的回调函数\n- `loading=\"lazy\"` 属性（目前兼容性不是特别好，参考[Lazy loading - Web 性能](https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading)）\n\n在 Vue 中使用图片懒加载推荐使用 [vue-lazyload](https://github.com/hilongjw/vue-lazyload/tree/next) 这个插件，直接通过 `v-lazy` 这个指令就可以实现图片懒加载的效果\n\n```vue\n<ul>\n  <li v-for=\"img in list\">\n    <img v-lazy=\"img.src\" >\n  </li>\n</ul>\n```\n\n### 5. 组件销毁时要清除定时器、EventListener\n\n有时我们会在项目中开启 `setTimeout` 来定时触发一些事件，比如定时提醒表单保存之类的需求，如果在离开组件时没有及时清除掉定时器或者是 `EventListener` ，很多页面堆积起来很容易造成页面卡顿和内存泄漏\n\n常见的方案是在离开组件之前的 `onBeforeUnmount` 生命周期钩子中清除掉定时器和 `EventListener`\n\n```ts\nonBeforeUnmount(() => {\n  try {\n    instance?.destroy?.();\n  } catch (error) {\n    instanceRef.value = null;\n  }\n});\n```\n\n在清除 `EventListener` 要注意：**移除相同的函数**。以下第一种情况不能清理掉 click 事件，因为它们是不同的函数对象，需要使用第二种指向相同函数对象的方式清除\n\n```js\n// 这种情况不生效，因为指向的是不同函数对象\ninput.addEventListener(\"click\", () => console.log(\"Hello\"));\ninput.removeEventListener(\"click\", () => console.log(\"Hello\"));\n\n// 此时指向相同的函数对象才能清理掉 EventListener 事件\nfunction handler() {\n  console.log(\"Hello\");\n}\n\ninput.addEventListener(\"click\", () => handler);\ninput.removeEventListener(\"click\", () => handler);\n```\n\n### 6. 列表使用唯一 key\n\n这个主要是和 diff 算法的效率有关，所以我也把它作为减少 DOM 渲染压力的一个方案。在我们使用 `v-for` 循环渲染内容的时候，需要为每个组件分配一个 id，这样在组件内容有更新的时候，diff 算法通过 id 能够更高效的找到变化的节点，让 dom 渲染更迅速。同时需要注意分配的 id 最好不是数组的 index，因为一旦增加或减少数组元素，index 也会发生变化，这样就失去 id 的效果了\n\n```vue\n<template v-for=\"schema in getSchema\" :key=\"schema.field\">\n  <form-item\n    :schema=\"schema\"\n    :form-props=\"getProps\"\n    :all-default-values=\"defaultValueRef\"\n  />\n</template>\n```\n\n## 减少打包体积\n\n### 1. 开启 gzip 压缩\n\ngzip 一种文件压缩的格式，比较适合文本文件的压缩，通常会缩小两倍以上的体积，所以用在代码文件的压缩上非常合适\n\n我们现在使用的打包工具还是 webpack，在 webpack 中开启 gzip 打包的话可以使用 `compression-webpack-plugin` 这个插件，具体配置如下\n\n```js\nconst CompressionPlugin = require(\"compression-webpack-plugin\");\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      new CompressionPlugin({\n        test: /\\.(js|css|json|html)&/,\n        tereshold: 10 * 1024, // 超过 10 k 才压缩\n      }),\n    ],\n  },\n};\n```\n\n开启 gzip 除了要在代码中增加配置外，还需要服务端的支持，在前端中比较常用的是 Nginx，在 Nginx 中开启 gzip 压缩的主要配置参数如下\n\n```shell\n#开启和关闭gzip模式\ngzip on;\n\n#gizp压缩起点，文件大于10k才进行压缩\ngzip_min_length 10k;\n\n# gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，一般为 5，再大效果就不明显了\ngzip_comp_level 5;\n\n# 进行压缩的文件类型。\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;\n\n#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩\ngzip_static on\n\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\ngzip_vary on;\n\n# 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区\ngzip_buffers 2 4k;\n\n# 设置gzip压缩针对的HTTP协议版本\ngzip_http_version 1.1;\n```\n\n### 2. 按需引入第三方组件\n\n我们平时使用的 UI 组件一般都是大而全的，我们的项目中很少会全部使用到，所以按需引入第三方组件，能够有效减少应用包体积\n\n以我们现在使用的 Element Plus 组件为例，使用 `unplugin-vue-components` 和 `unplugin-auto-import` 这两个插件来实现（[参考官方教程](https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5)）\n\n首先引入两个插件\n\n```shell\npnpm i -D unplugin-vue-components unplugin-auto-import\n```\n\n然后再 Webpack 配置两个插件即可\n\n```ts\n// webpack.config.js\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n  ],\n};\n```\n","source":"_posts/Vue 中直接上手的性能优化方案.md","raw":"---\ntitle: Vue 中直接上手的性能优化方案\ndate: 2022-07-30 15:57:12\ncategories: 前端\ntags: [\"vue\", \"性能优化\"]\n---\n\n最近使用 Vue 开发的过程中使用到一些对于性能有所提升的编码方式，所以特别梳理出来，可以作为后续 Vue 开发的编码规范使用\n\n性能优化方案主要分为三类，下面就详细讲讲这三类优化方案的应用\n\n- 减少响应式使用\n- 减少 DOM 渲染\n- 减少打包体积\n\n## 减少响应式使用\n\nVue 中使用最方便的就是响应式的变量，在读取（get）对象属性的时候收集副作用函数（effect）依赖，在写入（set）属性时取出副作用函数依赖执行，但是收集依赖、触发依赖执行毕竟都会影响到性能，所以在明确知道不需要使用响应式变量的场景下，就应该减少响应式变量的使用\n\n### 1. 使用 computed 缓存计算结果\n\ncomputed 和普通方法的区别在于：computed 会**缓存计算结果**，只有当计算的内容改变的时候才会重新计算，而普通方法每次都会重新计算。所以对于有计算逻辑的取值，建议尽量都通过 computed 来封装一层\n\n比如下面这个示例就是简单的将 props 通过 computed 封装一层后共 template 使用\n\n```ts\nconst getTooltipStyle = computed((): CSSProperties => {\n  return {\n    color: props.color,\n    fontSize: props.fontSize,\n  };\n});\n```\n\n### 2. 本地化响应式变量\n\n根据 Vue 响应式变量的原理，每次访问响应式数据时，都会收集依赖，所以在需要频繁使用响应式变量的时候，可以先将响应式变量用一个本地变量存储，转换为一个非响应式的变量\n\n在 Vue3 中可以使用 `unref` 这个 api 来获取到响应式变量参数本身（Vue2 中直接通过 `this` 赋值就好）\n\n```ts\nconst tableData = ref([]);\n\nconst unrefTableData = unref(tableData); // 本地化变量后再做大量操作\nunrefTableData.forEach((item) => {\n  // 具体操作\n});\n```\n\n### 3. 函数式组件（Vue2）\n\n函数式组件是指：只接受一些 prop 参数，无响应式数据，无实例的组件，主要应用在创建简单的展示组件，比如标题 header、纯展示的表单等等。因为没有响应式数据和实例，所以初始化速度比普通有状态的组件快很多，并且还支持返回多个节点\n\n在 Vue2 中声明函数式组件的方式如下\n\n```vue\n<!-- template 中的声明方式 -->\n<template functional></template>\n\n<!-- jsx 中的声明方式 -->\nVue.component(\"list\", { functional: true, })\n```\n\n但是在 Vue3 中，有状态的组件性能已经大大提升，和无状态组件（函数式组件）几乎没有差异，并且有状态组件也支持了返回多个节点，所以官方也移除了 `functional` 定义函数式组件的方式，**注意 Vue3 中是不兼容 Vue2 的函数式组件定义**，所以如果未来打算升级 Vue3 的小伙伴就不建议使用函数式组件了\n\n## 减少 DOM 渲染压力\n\n### 1. DOM 频繁切换展示的情况使用 v-show\n\n这是一个老身长谈的优化方案了，原理在于 `v-if` 和 `v-show` 实现方式的区别，对于 `v-if` 在不符合条件的情况下不会渲染 DOM 节点，对于 `v-show` 则是将各个条件情况都渲染出来，在通过 `display: block / none` 进行切换，所以在频繁切换 DOM 展示情况的场景下，使用 `v-show` 的性能会相对更好，比如一个可编辑单元格需要频繁切换编辑和保存后的状态的时候\n\n但 `v-show` 也不是没有缺点，因为会把各个分支情况都提前渲染出来，如果节点很多并且不需要频繁切换状态，用 `v-if` 会是更好的选择\n\n### 2. keep-alive 缓存组件状态\n\n在 Vue 中切换组件时，组件内部的状态也会丢失，比如我们在填写一个表单的时候，切换到另外一个组件填写其他信息，在切换回之前的表单组件后，原来填写的信息会被刷新掉，这种情况下就会使用到 keep-alive 组件缓存组件状态\n\n比较常用的做法是在 `<router-view>` 标签内嵌套一层 `<transition>` 标签增加组件切换时的过渡动画效果，再嵌套一层 `<keep-alive>` 标签缓存组件状态，最后使用 `<component>` 渲染动态组件或者元素\n\n```vue\n<router-view>\n  <template #default=\"{ Component, route }\">\n    <transition>\n      \t<keep-alive>\n        \t<component :is=\"Component\" :key=\"route.path\" />\n    \t</keep-alive>\n    </transition>\n  </template>\n</router-view>\n```\n\n### 3. 路由懒加载\n\n我们都知道 Vue 是单页面页面应用，如果在首屏加载的时候就把所有需要使用的路由都加载出来的话，那就太浪费性能了，所以使用懒加载的方式加载路由，减少首屏加载的压力，才是更合理的方案\n\n在 vue-router 中使用路由懒加载需要通过箭头函数返回一个 `import` 组件的路径，这样在运行到这个组件的时候，才会运行 `import` 编译加载组件\n\n```ts\nconst form: AppRouteRecordRaw = {\n  path: \"/basicForm\",\n  name: \"BasicForm\",\n  component: () => import(\"/@/views/form/index.vue\"),\n  meta: {\n    title: \"基础表单\",\n  },\n};\n\nexport default form;\n```\n\n### 4. 图片懒加载\n\n图片使用懒加载的原因和路由懒加载类似，都是为了减少不必要的渲染。比如我们有一张很长的页面有很多数据或者图片需要展示，而显示屏幕的可视高度却是固定的，所以在屏幕高度外的内容完全可以等到页面需要的时候再加载，从而减少了可是屏幕区域内的渲染压力\n\n图片懒加载的原理是：判断图片出现在当前窗口时，将 `data-src` 替换为 `src` 加载图片，比较常用三个可视区域判断方式是\n\n- `img.getBoundingClientRect().top` < `document.documentElement.clientHeight`（元素相对于窗口位置 < 窗体高度）\n- `IntersectionObserver` api，当其监听到目标元素的可见部分到达屏幕高度内，执行指定的回调函数\n- `loading=\"lazy\"` 属性（目前兼容性不是特别好，参考[Lazy loading - Web 性能](https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading)）\n\n在 Vue 中使用图片懒加载推荐使用 [vue-lazyload](https://github.com/hilongjw/vue-lazyload/tree/next) 这个插件，直接通过 `v-lazy` 这个指令就可以实现图片懒加载的效果\n\n```vue\n<ul>\n  <li v-for=\"img in list\">\n    <img v-lazy=\"img.src\" >\n  </li>\n</ul>\n```\n\n### 5. 组件销毁时要清除定时器、EventListener\n\n有时我们会在项目中开启 `setTimeout` 来定时触发一些事件，比如定时提醒表单保存之类的需求，如果在离开组件时没有及时清除掉定时器或者是 `EventListener` ，很多页面堆积起来很容易造成页面卡顿和内存泄漏\n\n常见的方案是在离开组件之前的 `onBeforeUnmount` 生命周期钩子中清除掉定时器和 `EventListener`\n\n```ts\nonBeforeUnmount(() => {\n  try {\n    instance?.destroy?.();\n  } catch (error) {\n    instanceRef.value = null;\n  }\n});\n```\n\n在清除 `EventListener` 要注意：**移除相同的函数**。以下第一种情况不能清理掉 click 事件，因为它们是不同的函数对象，需要使用第二种指向相同函数对象的方式清除\n\n```js\n// 这种情况不生效，因为指向的是不同函数对象\ninput.addEventListener(\"click\", () => console.log(\"Hello\"));\ninput.removeEventListener(\"click\", () => console.log(\"Hello\"));\n\n// 此时指向相同的函数对象才能清理掉 EventListener 事件\nfunction handler() {\n  console.log(\"Hello\");\n}\n\ninput.addEventListener(\"click\", () => handler);\ninput.removeEventListener(\"click\", () => handler);\n```\n\n### 6. 列表使用唯一 key\n\n这个主要是和 diff 算法的效率有关，所以我也把它作为减少 DOM 渲染压力的一个方案。在我们使用 `v-for` 循环渲染内容的时候，需要为每个组件分配一个 id，这样在组件内容有更新的时候，diff 算法通过 id 能够更高效的找到变化的节点，让 dom 渲染更迅速。同时需要注意分配的 id 最好不是数组的 index，因为一旦增加或减少数组元素，index 也会发生变化，这样就失去 id 的效果了\n\n```vue\n<template v-for=\"schema in getSchema\" :key=\"schema.field\">\n  <form-item\n    :schema=\"schema\"\n    :form-props=\"getProps\"\n    :all-default-values=\"defaultValueRef\"\n  />\n</template>\n```\n\n## 减少打包体积\n\n### 1. 开启 gzip 压缩\n\ngzip 一种文件压缩的格式，比较适合文本文件的压缩，通常会缩小两倍以上的体积，所以用在代码文件的压缩上非常合适\n\n我们现在使用的打包工具还是 webpack，在 webpack 中开启 gzip 打包的话可以使用 `compression-webpack-plugin` 这个插件，具体配置如下\n\n```js\nconst CompressionPlugin = require(\"compression-webpack-plugin\");\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      new CompressionPlugin({\n        test: /\\.(js|css|json|html)&/,\n        tereshold: 10 * 1024, // 超过 10 k 才压缩\n      }),\n    ],\n  },\n};\n```\n\n开启 gzip 除了要在代码中增加配置外，还需要服务端的支持，在前端中比较常用的是 Nginx，在 Nginx 中开启 gzip 压缩的主要配置参数如下\n\n```shell\n#开启和关闭gzip模式\ngzip on;\n\n#gizp压缩起点，文件大于10k才进行压缩\ngzip_min_length 10k;\n\n# gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，一般为 5，再大效果就不明显了\ngzip_comp_level 5;\n\n# 进行压缩的文件类型。\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;\n\n#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩\ngzip_static on\n\n# 是否在http header中添加Vary: Accept-Encoding，建议开启\ngzip_vary on;\n\n# 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区\ngzip_buffers 2 4k;\n\n# 设置gzip压缩针对的HTTP协议版本\ngzip_http_version 1.1;\n```\n\n### 2. 按需引入第三方组件\n\n我们平时使用的 UI 组件一般都是大而全的，我们的项目中很少会全部使用到，所以按需引入第三方组件，能够有效减少应用包体积\n\n以我们现在使用的 Element Plus 组件为例，使用 `unplugin-vue-components` 和 `unplugin-auto-import` 这两个插件来实现（[参考官方教程](https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5)）\n\n首先引入两个插件\n\n```shell\npnpm i -D unplugin-vue-components unplugin-auto-import\n```\n\n然后再 Webpack 配置两个插件即可\n\n```ts\n// webpack.config.js\nconst AutoImport = require(\"unplugin-auto-import/webpack\");\nconst Components = require(\"unplugin-vue-components/webpack\");\nconst { ElementPlusResolver } = require(\"unplugin-vue-components/resolvers\");\n\nmodule.exports = {\n  // ...\n  plugins: [\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n  ],\n};\n```\n","slug":"Vue 中直接上手的性能优化方案","published":1,"updated":"2022-07-30T10:23:34.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl67regyb0000cito20j364j7","content":"<p>最近使用 Vue 开发的过程中使用到一些对于性能有所提升的编码方式，所以特别梳理出来，可以作为后续 Vue 开发的编码规范使用</p>\n<p>性能优化方案主要分为三类，下面就详细讲讲这三类优化方案的应用</p>\n<ul>\n<li>减少响应式使用</li>\n<li>减少 DOM 渲染</li>\n<li>减少打包体积</li>\n</ul>\n<h2 id=\"减少响应式使用\"><a href=\"#减少响应式使用\" class=\"headerlink\" title=\"减少响应式使用\"></a>减少响应式使用</h2><p>Vue 中使用最方便的就是响应式的变量，在读取（get）对象属性的时候收集副作用函数（effect）依赖，在写入（set）属性时取出副作用函数依赖执行，但是收集依赖、触发依赖执行毕竟都会影响到性能，所以在明确知道不需要使用响应式变量的场景下，就应该减少响应式变量的使用</p>\n<h3 id=\"1-使用-computed-缓存计算结果\"><a href=\"#1-使用-computed-缓存计算结果\" class=\"headerlink\" title=\"1. 使用 computed 缓存计算结果\"></a>1. 使用 computed 缓存计算结果</h3><p>computed 和普通方法的区别在于：computed 会<strong>缓存计算结果</strong>，只有当计算的内容改变的时候才会重新计算，而普通方法每次都会重新计算。所以对于有计算逻辑的取值，建议尽量都通过 computed 来封装一层</p>\n<p>比如下面这个示例就是简单的将 props 通过 computed 封装一层后共 template 使用</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getTooltipStyle <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CSSProperties <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    color<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-本地化响应式变量\"><a href=\"#2-本地化响应式变量\" class=\"headerlink\" title=\"2. 本地化响应式变量\"></a>2. 本地化响应式变量</h3><p>根据 Vue 响应式变量的原理，每次访问响应式数据时，都会收集依赖，所以在需要频繁使用响应式变量的时候，可以先将响应式变量用一个本地变量存储，转换为一个非响应式的变量</p>\n<p>在 Vue3 中可以使用 <code>unref</code> 这个 api 来获取到响应式变量参数本身（Vue2 中直接通过 <code>this</code> 赋值就好）</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> tableData <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unrefTableData <span class=\"token operator\">=</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>tableData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本地化变量后再做大量操作</span>\nunrefTableData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 具体操作</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-函数式组件（Vue2）\"><a href=\"#3-函数式组件（Vue2）\" class=\"headerlink\" title=\"3. 函数式组件（Vue2）\"></a>3. 函数式组件（Vue2）</h3><p>函数式组件是指：只接受一些 prop 参数，无响应式数据，无实例的组件，主要应用在创建简单的展示组件，比如标题 header、纯展示的表单等等。因为没有响应式数据和实例，所以初始化速度比普通有状态的组件快很多，并且还支持返回多个节点</p>\n<p>在 Vue2 中声明函数式组件的方式如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- template 中的声明方式 --&gt;\n&lt;template functional&gt;&lt;&#x2F;template&gt;\n\n&lt;!-- jsx 中的声明方式 --&gt;\nVue.component(&quot;list&quot;, &#123; functional: true, &#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在 Vue3 中，有状态的组件性能已经大大提升，和无状态组件（函数式组件）几乎没有差异，并且有状态组件也支持了返回多个节点，所以官方也移除了 <code>functional</code> 定义函数式组件的方式，<strong>注意 Vue3 中是不兼容 Vue2 的函数式组件定义</strong>，所以如果未来打算升级 Vue3 的小伙伴就不建议使用函数式组件了</p>\n<h2 id=\"减少-DOM-渲染压力\"><a href=\"#减少-DOM-渲染压力\" class=\"headerlink\" title=\"减少 DOM 渲染压力\"></a>减少 DOM 渲染压力</h2><h3 id=\"1-DOM-频繁切换展示的情况使用-v-show\"><a href=\"#1-DOM-频繁切换展示的情况使用-v-show\" class=\"headerlink\" title=\"1. DOM 频繁切换展示的情况使用 v-show\"></a>1. DOM 频繁切换展示的情况使用 v-show</h3><p>这是一个老身长谈的优化方案了，原理在于 <code>v-if</code> 和 <code>v-show</code> 实现方式的区别，对于 <code>v-if</code> 在不符合条件的情况下不会渲染 DOM 节点，对于 <code>v-show</code> 则是将各个条件情况都渲染出来，在通过 <code>display: block / none</code> 进行切换，所以在频繁切换 DOM 展示情况的场景下，使用 <code>v-show</code> 的性能会相对更好，比如一个可编辑单元格需要频繁切换编辑和保存后的状态的时候</p>\n<p>但 <code>v-show</code> 也不是没有缺点，因为会把各个分支情况都提前渲染出来，如果节点很多并且不需要频繁切换状态，用 <code>v-if</code> 会是更好的选择</p>\n<h3 id=\"2-keep-alive-缓存组件状态\"><a href=\"#2-keep-alive-缓存组件状态\" class=\"headerlink\" title=\"2. keep-alive 缓存组件状态\"></a>2. keep-alive 缓存组件状态</h3><p>在 Vue 中切换组件时，组件内部的状态也会丢失，比如我们在填写一个表单的时候，切换到另外一个组件填写其他信息，在切换回之前的表单组件后，原来填写的信息会被刷新掉，这种情况下就会使用到 keep-alive 组件缓存组件状态</p>\n<p>比较常用的做法是在 <code>&lt;router-view&gt;</code> 标签内嵌套一层 <code>&lt;transition&gt;</code> 标签增加组件切换时的过渡动画效果，再嵌套一层 <code>&lt;keep-alive&gt;</code> 标签缓存组件状态，最后使用 <code>&lt;component&gt;</code> 渲染动态组件或者元素</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-view&gt;\n  &lt;template #default&#x3D;&quot;&#123; Component, route &#125;&quot;&gt;\n    &lt;transition&gt;\n      \t&lt;keep-alive&gt;\n        \t&lt;component :is&#x3D;&quot;Component&quot; :key&#x3D;&quot;route.path&quot; &#x2F;&gt;\n    \t&lt;&#x2F;keep-alive&gt;\n    &lt;&#x2F;transition&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;router-view&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-路由懒加载\"><a href=\"#3-路由懒加载\" class=\"headerlink\" title=\"3. 路由懒加载\"></a>3. 路由懒加载</h3><p>我们都知道 Vue 是单页面页面应用，如果在首屏加载的时候就把所有需要使用的路由都加载出来的话，那就太浪费性能了，所以使用懒加载的方式加载路由，减少首屏加载的压力，才是更合理的方案</p>\n<p>在 vue-router 中使用路由懒加载需要通过箭头函数返回一个 <code>import</code> 组件的路径，这样在运行到这个组件的时候，才会运行 <code>import</code> 编译加载组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> form<span class=\"token operator\">:</span> AppRouteRecordRaw <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">\"/basicForm\"</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"BasicForm\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/@/views/form/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"基础表单\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> form<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-图片懒加载\"><a href=\"#4-图片懒加载\" class=\"headerlink\" title=\"4. 图片懒加载\"></a>4. 图片懒加载</h3><p>图片使用懒加载的原因和路由懒加载类似，都是为了减少不必要的渲染。比如我们有一张很长的页面有很多数据或者图片需要展示，而显示屏幕的可视高度却是固定的，所以在屏幕高度外的内容完全可以等到页面需要的时候再加载，从而减少了可是屏幕区域内的渲染压力</p>\n<p>图片懒加载的原理是：判断图片出现在当前窗口时，将 <code>data-src</code> 替换为 <code>src</code> 加载图片，比较常用三个可视区域判断方式是</p>\n<ul>\n<li><code>img.getBoundingClientRect().top</code> &lt; <code>document.documentElement.clientHeight</code>（元素相对于窗口位置 &lt; 窗体高度）</li>\n<li><code>IntersectionObserver</code> api，当其监听到目标元素的可见部分到达屏幕高度内，执行指定的回调函数</li>\n<li><code>loading=&quot;lazy&quot;</code> 属性（目前兼容性不是特别好，参考<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading\" >Lazy loading - Web 性能<i class=\"fas fa-external-link-alt\"></i></a>）</li>\n</ul>\n<p>在 Vue 中使用图片懒加载推荐使用 <a class=\"link\"   href=\"https://github.com/hilongjw/vue-lazyload/tree/next\" >vue-lazyload<i class=\"fas fa-external-link-alt\"></i></a> 这个插件，直接通过 <code>v-lazy</code> 这个指令就可以实现图片懒加载的效果</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;img in list&quot;&gt;\n    &lt;img v-lazy&#x3D;&quot;img.src&quot; &gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-组件销毁时要清除定时器、EventListener\"><a href=\"#5-组件销毁时要清除定时器、EventListener\" class=\"headerlink\" title=\"5. 组件销毁时要清除定时器、EventListener\"></a>5. 组件销毁时要清除定时器、EventListener</h3><p>有时我们会在项目中开启 <code>setTimeout</code> 来定时触发一些事件，比如定时提醒表单保存之类的需求，如果在离开组件时没有及时清除掉定时器或者是 <code>EventListener</code> ，很多页面堆积起来很容易造成页面卡顿和内存泄漏</p>\n<p>常见的方案是在离开组件之前的 <code>onBeforeUnmount</code> 生命周期钩子中清除掉定时器和 <code>EventListener</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">onBeforeUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    instance<span class=\"token operator\">?.</span>destroy<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    instanceRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在清除 <code>EventListener</code> 要注意：<strong>移除相同的函数</strong>。以下第一种情况不能清理掉 click 事件，因为它们是不同的函数对象，需要使用第二种指向相同函数对象的方式清除</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这种情况不生效，因为指向的是不同函数对象</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 此时指向相同的函数对象才能清理掉 EventListener 事件</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-列表使用唯一-key\"><a href=\"#6-列表使用唯一-key\" class=\"headerlink\" title=\"6. 列表使用唯一 key\"></a>6. 列表使用唯一 key</h3><p>这个主要是和 diff 算法的效率有关，所以我也把它作为减少 DOM 渲染压力的一个方案。在我们使用 <code>v-for</code> 循环渲染内容的时候，需要为每个组件分配一个 id，这样在组件内容有更新的时候，diff 算法通过 id 能够更高效的找到变化的节点，让 dom 渲染更迅速。同时需要注意分配的 id 最好不是数组的 index，因为一旦增加或减少数组元素，index 也会发生变化，这样就失去 id 的效果了</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template v-for&#x3D;&quot;schema in getSchema&quot; :key&#x3D;&quot;schema.field&quot;&gt;\n  &lt;form-item\n    :schema&#x3D;&quot;schema&quot;\n    :form-props&#x3D;&quot;getProps&quot;\n    :all-default-values&#x3D;&quot;defaultValueRef&quot;\n  &#x2F;&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"减少打包体积\"><a href=\"#减少打包体积\" class=\"headerlink\" title=\"减少打包体积\"></a>减少打包体积</h2><h3 id=\"1-开启-gzip-压缩\"><a href=\"#1-开启-gzip-压缩\" class=\"headerlink\" title=\"1. 开启 gzip 压缩\"></a>1. 开启 gzip 压缩</h3><p>gzip 一种文件压缩的格式，比较适合文本文件的压缩，通常会缩小两倍以上的体积，所以用在代码文件的压缩上非常合适</p>\n<p>我们现在使用的打包工具还是 webpack，在 webpack 中开启 gzip 打包的话可以使用 <code>compression-webpack-plugin</code> 这个插件，具体配置如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CompressionPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compression-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|css|json|html)&amp;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">tereshold</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 超过 10 k 才压缩</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>开启 gzip 除了要在代码中增加配置外，还需要服务端的支持，在前端中比较常用的是 Nginx，在 Nginx 中开启 gzip 压缩的主要配置参数如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#开启和关闭gzip模式</span>\n<span class=\"token function\">gzip</span> on<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#gizp压缩起点，文件大于10k才进行压缩</span>\ngzip_min_length 10k<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，一般为 5，再大效果就不明显了</span>\ngzip_comp_level <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 进行压缩的文件类型。</span>\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span>\ngzip_static on\n\n<span class=\"token comment\"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>\ngzip_vary on<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区</span>\ngzip_buffers <span class=\"token number\">2</span> 4k<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 设置gzip压缩针对的HTTP协议版本</span>\ngzip_http_version <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-按需引入第三方组件\"><a href=\"#2-按需引入第三方组件\" class=\"headerlink\" title=\"2. 按需引入第三方组件\"></a>2. 按需引入第三方组件</h3><p>我们平时使用的 UI 组件一般都是大而全的，我们的项目中很少会全部使用到，所以按需引入第三方组件，能够有效减少应用包体积</p>\n<p>以我们现在使用的 Element Plus 组件为例，使用 <code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code> 这两个插件来实现（<a class=\"link\"   href=\"https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5\" >参考官方教程<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p>首先引入两个插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D unplugin-vue-components unplugin-auto-import<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后再 Webpack 配置两个插件即可</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> AutoImport <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-auto-import/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Components <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/resolvers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>最近使用 Vue 开发的过程中使用到一些对于性能有所提升的编码方式，所以特别梳理出来，可以作为后续 Vue 开发的编码规范使用</p>\n<p>性能优化方案主要分为三类，下面就详细讲讲这三类优化方案的应用</p>\n<ul>\n<li>减少响应式使用</li>\n<li>减少 DOM 渲染</li>\n<li>减少打包体积</li>\n</ul>\n<h2 id=\"减少响应式使用\"><a href=\"#减少响应式使用\" class=\"headerlink\" title=\"减少响应式使用\"></a>减少响应式使用</h2><p>Vue 中使用最方便的就是响应式的变量，在读取（get）对象属性的时候收集副作用函数（effect）依赖，在写入（set）属性时取出副作用函数依赖执行，但是收集依赖、触发依赖执行毕竟都会影响到性能，所以在明确知道不需要使用响应式变量的场景下，就应该减少响应式变量的使用</p>\n<h3 id=\"1-使用-computed-缓存计算结果\"><a href=\"#1-使用-computed-缓存计算结果\" class=\"headerlink\" title=\"1. 使用 computed 缓存计算结果\"></a>1. 使用 computed 缓存计算结果</h3><p>computed 和普通方法的区别在于：computed 会<strong>缓存计算结果</strong>，只有当计算的内容改变的时候才会重新计算，而普通方法每次都会重新计算。所以对于有计算逻辑的取值，建议尽量都通过 computed 来封装一层</p>\n<p>比如下面这个示例就是简单的将 props 通过 computed 封装一层后共 template 使用</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getTooltipStyle <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CSSProperties <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    color<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token operator\">:</span> props<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-本地化响应式变量\"><a href=\"#2-本地化响应式变量\" class=\"headerlink\" title=\"2. 本地化响应式变量\"></a>2. 本地化响应式变量</h3><p>根据 Vue 响应式变量的原理，每次访问响应式数据时，都会收集依赖，所以在需要频繁使用响应式变量的时候，可以先将响应式变量用一个本地变量存储，转换为一个非响应式的变量</p>\n<p>在 Vue3 中可以使用 <code>unref</code> 这个 api 来获取到响应式变量参数本身（Vue2 中直接通过 <code>this</code> 赋值就好）</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> tableData <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unrefTableData <span class=\"token operator\">=</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>tableData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本地化变量后再做大量操作</span>\nunrefTableData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 具体操作</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-函数式组件（Vue2）\"><a href=\"#3-函数式组件（Vue2）\" class=\"headerlink\" title=\"3. 函数式组件（Vue2）\"></a>3. 函数式组件（Vue2）</h3><p>函数式组件是指：只接受一些 prop 参数，无响应式数据，无实例的组件，主要应用在创建简单的展示组件，比如标题 header、纯展示的表单等等。因为没有响应式数据和实例，所以初始化速度比普通有状态的组件快很多，并且还支持返回多个节点</p>\n<p>在 Vue2 中声明函数式组件的方式如下</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;!-- template 中的声明方式 --&gt;\n&lt;template functional&gt;&lt;&#x2F;template&gt;\n\n&lt;!-- jsx 中的声明方式 --&gt;\nVue.component(&quot;list&quot;, &#123; functional: true, &#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在 Vue3 中，有状态的组件性能已经大大提升，和无状态组件（函数式组件）几乎没有差异，并且有状态组件也支持了返回多个节点，所以官方也移除了 <code>functional</code> 定义函数式组件的方式，<strong>注意 Vue3 中是不兼容 Vue2 的函数式组件定义</strong>，所以如果未来打算升级 Vue3 的小伙伴就不建议使用函数式组件了</p>\n<h2 id=\"减少-DOM-渲染压力\"><a href=\"#减少-DOM-渲染压力\" class=\"headerlink\" title=\"减少 DOM 渲染压力\"></a>减少 DOM 渲染压力</h2><h3 id=\"1-DOM-频繁切换展示的情况使用-v-show\"><a href=\"#1-DOM-频繁切换展示的情况使用-v-show\" class=\"headerlink\" title=\"1. DOM 频繁切换展示的情况使用 v-show\"></a>1. DOM 频繁切换展示的情况使用 v-show</h3><p>这是一个老身长谈的优化方案了，原理在于 <code>v-if</code> 和 <code>v-show</code> 实现方式的区别，对于 <code>v-if</code> 在不符合条件的情况下不会渲染 DOM 节点，对于 <code>v-show</code> 则是将各个条件情况都渲染出来，在通过 <code>display: block / none</code> 进行切换，所以在频繁切换 DOM 展示情况的场景下，使用 <code>v-show</code> 的性能会相对更好，比如一个可编辑单元格需要频繁切换编辑和保存后的状态的时候</p>\n<p>但 <code>v-show</code> 也不是没有缺点，因为会把各个分支情况都提前渲染出来，如果节点很多并且不需要频繁切换状态，用 <code>v-if</code> 会是更好的选择</p>\n<h3 id=\"2-keep-alive-缓存组件状态\"><a href=\"#2-keep-alive-缓存组件状态\" class=\"headerlink\" title=\"2. keep-alive 缓存组件状态\"></a>2. keep-alive 缓存组件状态</h3><p>在 Vue 中切换组件时，组件内部的状态也会丢失，比如我们在填写一个表单的时候，切换到另外一个组件填写其他信息，在切换回之前的表单组件后，原来填写的信息会被刷新掉，这种情况下就会使用到 keep-alive 组件缓存组件状态</p>\n<p>比较常用的做法是在 <code>&lt;router-view&gt;</code> 标签内嵌套一层 <code>&lt;transition&gt;</code> 标签增加组件切换时的过渡动画效果，再嵌套一层 <code>&lt;keep-alive&gt;</code> 标签缓存组件状态，最后使用 <code>&lt;component&gt;</code> 渲染动态组件或者元素</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;router-view&gt;\n  &lt;template #default&#x3D;&quot;&#123; Component, route &#125;&quot;&gt;\n    &lt;transition&gt;\n      \t&lt;keep-alive&gt;\n        \t&lt;component :is&#x3D;&quot;Component&quot; :key&#x3D;&quot;route.path&quot; &#x2F;&gt;\n    \t&lt;&#x2F;keep-alive&gt;\n    &lt;&#x2F;transition&gt;\n  &lt;&#x2F;template&gt;\n&lt;&#x2F;router-view&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-路由懒加载\"><a href=\"#3-路由懒加载\" class=\"headerlink\" title=\"3. 路由懒加载\"></a>3. 路由懒加载</h3><p>我们都知道 Vue 是单页面页面应用，如果在首屏加载的时候就把所有需要使用的路由都加载出来的话，那就太浪费性能了，所以使用懒加载的方式加载路由，减少首屏加载的压力，才是更合理的方案</p>\n<p>在 vue-router 中使用路由懒加载需要通过箭头函数返回一个 <code>import</code> 组件的路径，这样在运行到这个组件的时候，才会运行 <code>import</code> 编译加载组件</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> form<span class=\"token operator\">:</span> AppRouteRecordRaw <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  path<span class=\"token operator\">:</span> <span class=\"token string\">\"/basicForm\"</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"BasicForm\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/@/views/form/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"基础表单\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> form<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-图片懒加载\"><a href=\"#4-图片懒加载\" class=\"headerlink\" title=\"4. 图片懒加载\"></a>4. 图片懒加载</h3><p>图片使用懒加载的原因和路由懒加载类似，都是为了减少不必要的渲染。比如我们有一张很长的页面有很多数据或者图片需要展示，而显示屏幕的可视高度却是固定的，所以在屏幕高度外的内容完全可以等到页面需要的时候再加载，从而减少了可是屏幕区域内的渲染压力</p>\n<p>图片懒加载的原理是：判断图片出现在当前窗口时，将 <code>data-src</code> 替换为 <code>src</code> 加载图片，比较常用三个可视区域判断方式是</p>\n<ul>\n<li><code>img.getBoundingClientRect().top</code> &lt; <code>document.documentElement.clientHeight</code>（元素相对于窗口位置 &lt; 窗体高度）</li>\n<li><code>IntersectionObserver</code> api，当其监听到目标元素的可见部分到达屏幕高度内，执行指定的回调函数</li>\n<li><code>loading=&quot;lazy&quot;</code> 属性（目前兼容性不是特别好，参考<a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Lazy_loading\" >Lazy loading - Web 性能<i class=\"fas fa-external-link-alt\"></i></a>）</li>\n</ul>\n<p>在 Vue 中使用图片懒加载推荐使用 <a class=\"link\"   href=\"https://github.com/hilongjw/vue-lazyload/tree/next\" >vue-lazyload<i class=\"fas fa-external-link-alt\"></i></a> 这个插件，直接通过 <code>v-lazy</code> 这个指令就可以实现图片懒加载的效果</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;ul&gt;\n  &lt;li v-for&#x3D;&quot;img in list&quot;&gt;\n    &lt;img v-lazy&#x3D;&quot;img.src&quot; &gt;\n  &lt;&#x2F;li&gt;\n&lt;&#x2F;ul&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-组件销毁时要清除定时器、EventListener\"><a href=\"#5-组件销毁时要清除定时器、EventListener\" class=\"headerlink\" title=\"5. 组件销毁时要清除定时器、EventListener\"></a>5. 组件销毁时要清除定时器、EventListener</h3><p>有时我们会在项目中开启 <code>setTimeout</code> 来定时触发一些事件，比如定时提醒表单保存之类的需求，如果在离开组件时没有及时清除掉定时器或者是 <code>EventListener</code> ，很多页面堆积起来很容易造成页面卡顿和内存泄漏</p>\n<p>常见的方案是在离开组件之前的 <code>onBeforeUnmount</code> 生命周期钩子中清除掉定时器和 <code>EventListener</code></p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">onBeforeUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    instance<span class=\"token operator\">?.</span>destroy<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    instanceRef<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在清除 <code>EventListener</code> 要注意：<strong>移除相同的函数</strong>。以下第一种情况不能清理掉 click 事件，因为它们是不同的函数对象，需要使用第二种指向相同函数对象的方式清除</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这种情况不生效，因为指向的是不同函数对象</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 此时指向相同的函数对象才能清理掉 EventListener 事件</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-列表使用唯一-key\"><a href=\"#6-列表使用唯一-key\" class=\"headerlink\" title=\"6. 列表使用唯一 key\"></a>6. 列表使用唯一 key</h3><p>这个主要是和 diff 算法的效率有关，所以我也把它作为减少 DOM 渲染压力的一个方案。在我们使用 <code>v-for</code> 循环渲染内容的时候，需要为每个组件分配一个 id，这样在组件内容有更新的时候，diff 算法通过 id 能够更高效的找到变化的节点，让 dom 渲染更迅速。同时需要注意分配的 id 最好不是数组的 index，因为一旦增加或减少数组元素，index 也会发生变化，这样就失去 id 的效果了</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template v-for&#x3D;&quot;schema in getSchema&quot; :key&#x3D;&quot;schema.field&quot;&gt;\n  &lt;form-item\n    :schema&#x3D;&quot;schema&quot;\n    :form-props&#x3D;&quot;getProps&quot;\n    :all-default-values&#x3D;&quot;defaultValueRef&quot;\n  &#x2F;&gt;\n&lt;&#x2F;template&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"减少打包体积\"><a href=\"#减少打包体积\" class=\"headerlink\" title=\"减少打包体积\"></a>减少打包体积</h2><h3 id=\"1-开启-gzip-压缩\"><a href=\"#1-开启-gzip-压缩\" class=\"headerlink\" title=\"1. 开启 gzip 压缩\"></a>1. 开启 gzip 压缩</h3><p>gzip 一种文件压缩的格式，比较适合文本文件的压缩，通常会缩小两倍以上的体积，所以用在代码文件的压缩上非常合适</p>\n<p>我们现在使用的打包工具还是 webpack，在 webpack 中开启 gzip 打包的话可以使用 <code>compression-webpack-plugin</code> 这个插件，具体配置如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> CompressionPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compression-webpack-plugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">configureWebpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressionPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(js|css|json|html)&amp;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">tereshold</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 超过 10 k 才压缩</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>开启 gzip 除了要在代码中增加配置外，还需要服务端的支持，在前端中比较常用的是 Nginx，在 Nginx 中开启 gzip 压缩的主要配置参数如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#开启和关闭gzip模式</span>\n<span class=\"token function\">gzip</span> on<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#gizp压缩起点，文件大于10k才进行压缩</span>\ngzip_min_length 10k<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间，一般为 5，再大效果就不明显了</span>\ngzip_comp_level <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 进行压缩的文件类型。</span>\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript <span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">#nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩</span>\ngzip_static on\n\n<span class=\"token comment\"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>\ngzip_vary on<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区</span>\ngzip_buffers <span class=\"token number\">2</span> 4k<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 设置gzip压缩针对的HTTP协议版本</span>\ngzip_http_version <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-按需引入第三方组件\"><a href=\"#2-按需引入第三方组件\" class=\"headerlink\" title=\"2. 按需引入第三方组件\"></a>2. 按需引入第三方组件</h3><p>我们平时使用的 UI 组件一般都是大而全的，我们的项目中很少会全部使用到，所以按需引入第三方组件，能够有效减少应用包体积</p>\n<p>以我们现在使用的 Element Plus 组件为例，使用 <code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code> 这两个插件来实现（<a class=\"link\"   href=\"https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5\" >参考官方教程<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p>首先引入两个插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D unplugin-vue-components unplugin-auto-import<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后再 Webpack 配置两个插件即可</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> AutoImport <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-auto-import/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Components <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/resolvers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      resolvers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"个人网站如何白嫖 HTTPS","date":"2022-07-05T13:43:32.000Z","_content":"\n## 什么是 HTTPS\n\n总所周知，HTTP 协议主要用于客户端和服务端的通信，但它本身也有一定缺点\n\n- 明文传输，内容可能被监听\n- 不能验证通信方的身份，可能遭遇伪装\n- 无法证明报文完整性，报文可能被篡改\n\n从架构的角度来说 “没有什么是加一层不能解决的” （狗头），所以 HTTPS 也就应运而生了\n\nHTTPS 是 HTTP 协议加 SSL（Secure Socket Layer，安全套接层）和 TLS（Transport Layer Security，安全层传输协议）协议的统称，从名称就可以看出，“两个 S” 相关的协议目的就是为了保证通信的安全性。通信方式也就变成了：HTTP → SSL / TLS → TCP / IP\n\n那么 HTTPS 是如果保证安全性的呢，这里简单介绍一下\n\n- 将对称加密的密钥用非对称加密的公钥进行加密，接收方在收到后，使用非对称加密的私钥进行解密得到对称加密的密钥，然后双方就可以通过对称加密的密钥进行沟通了\n- 但是这种加密传输的方式，一样也可能遭受中间人攻击，为了解决这个问题，需要一个权威、安全、可靠的第三方来证明通信方的身份，这里就要用到机构颁发的 **CA 证书**\n- 使用 CA 证书自带的 Hash 算法对证书内容 Hash 化得到一个摘要，再用 CA 证书的私钥加密，得到一个数字签名。当接收方收到证书后，使用相同的 Hash 算法生成消息摘要，再用公钥对数字签名解密，两者一对比，就知道有没有被别人篡改过了\n\n所以这里可以看到配置 HTTPS 的**关键在于 CA 证书**，而提供这种证明服务的机构必然是收费的（不然怎么保持中立呢），而且收费一般还不低，但是只要努力找一下，也是有白嫖 CA 证书的机会的。\n\n（顺便说一句，HTTPS 也不是绝对安全的，如果没有做到全站 HTTPS 的话，一样可能存在安全风险）\n\n## 如何白嫖 HTTPS 证书\n\n我使用的是 [Letsencrypt](https://letsencrypt.org/) ，一个免费好用的 HTTPS 证书服务商。毕竟阿里云一个证书续费 2000 多，一个个人网站续上几年都够换台 Macbook 了，对于个人网站来说真的没必要\n\n我使用的阿里云的服务器，操作系统是 Alibaba Cloud Linux，本质也是对 CentOS 的封装（CentOS 2021 年 12 月 31 号就停止维护了），所以下面我简单介绍一下如何在 Alibaba Cloud Linux（CentOS）配置 HTTPS 证书\n\n### 安装 Certbot 和 snap\n\nLetsencrypt 官方提供一个 [Certbot](https://certbot.eff.org/pages/about) 工具，用于快速生成证书。dnf 是 CentOS 内置的 Shell 软件包管理器，先使用 `dnf --version` 命令确定 dnf 工具可用, 再增加 epel 源，并更新 dnf 仓库\n\n```Bash\ndnf install <https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm>\ndnf upgrade\n```\n\n接下来使用 dnf 安装 snap（一个软件集合，类似 App Store）\n\n```Bash\ndnf install snapd -y # 安装snap\nsystemctl enable --now snapd.socket # 设置开机自启\nln -s /var/lib/snapd/snap /snap # 设置 snap 软链接\n```\n\n安装好 snap 后，更新 snap 快照、安装 Certbot 并设置软连接\n\n```shell\n# 更新快照\nsnap install core\nsnap refresh core\n\nsnap install --classic certbot # 安装 certbot\nln -s /snap/bin/certbot /usr/bin/certbot # 设置 certbot 软链接\n```\n\n![Image.png (1220×164)](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Image.png)\n\n### 配置 HTTPS 证书\n\n接下来使用 certbot 配置 https 证书，首先可以检查一下服务器有没有打开 HTTPS 需要的 443 端口的防火墙，如果没有打开的话需要提前设置一下（我一开始配置的时候就因为没开 443 的防火墙，导致证书一直下载不下来）\n\n```Bash\n# 检查 443 端口防火墙是否打开，返回的是 yes 的话说明是开启的\nfirewall-cmd --query-port=443/tcp\n\n# 开启 443 端口的防火墙\nfirewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```\n\n再输入 `nginx -V` 命令检查 nginx 是否有配置 SSL 参数，如果看到 `--with-http_ssl_module` 参数说明是配置好了，否则需要重新安装、编译添加 SSL 模块\n\n```Bash\n# 进入源码包\ncd /home/nginx-1.20.2/\n# 操作 ssl 编译（prefix 是 nginx 目录前缀）\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module`\n# 执行 make 命令（此时不要执行 make install，否则会覆盖）\nmake\n# 备份原有 nginx 配置\ncp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\n# 停止 nginx\nnginx -s stop\n# 将编译好的 nginx 覆盖掉原有的 nginx\ncd /home/nginx-1.20.2/\ncp ./objs/nginx /usr/local/nginx/sbin/\n\n# 启动 nginx\nnginx\n# 查看模块是否加载成功（大写的 V）\nnginx -V\n```\n\n配置好 SSL 模块的情况\n\n![截屏2022-07-03_20.11.52.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.11.52.png)\n\n设置好上面两个步骤之后，就可以执行 `certbot —nginx` 命令扫描 nginx 所有配置，会要求选择选择需要配置的域名，\n\n- 输入电子邮箱，用于紧急续签和安全通知\n- 是否同意服务条款，输入 y 同意\n- 是否接受新闻邮件，输入 n 不同意\n- 只要输入域名对应的序号即可，下图就是我的域名，如果有多个的话需要以逗号分隔即可\n\n![截屏2022-07-03_20.44.16.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.44.16.png)\n\n然后 certbot 会下载证书到 `/etc/letsencrypt/live/[具体域名]` 目录\n\n![截屏2022-07-03_20.47.06.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.47.06.png)\n\n证书下载好的同时，certbot 也会修改 nginx.conf 配置文件的内容，下面看一下 certbot 修改了哪些内容（带有 `# managed by Certbot` 的内容都是 certbot 增加的，无须手动再次修改）\n\n```Bash\n# 监听的端口由原来的 80 端口变为 443 端口\nlisten 443 ssl; # managed by Certbot\n\n# 导入 HTTPS 下载好的证书相关文件\nssl_certificate /etc/letsencrypt/live/www.wujieli.top/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/www.wujieli.top/privkey.pem; # managed by Certbot\ninclude /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\nssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n# 在非 https 访问的情况下，使用 301 重定向至 https 目录\nserver {\nif ($host = www.wujieli.top) {\n    return 301 https://$host$request_uri;\n} # managed by Certbot\n```\n\n最后可以使用 SSLChecker 网站检查一下 HTTPS 是否配置成功，如果全是绿色就代表大功告成了，这时候访问域名的时候就可以看到访问是安全的了\n\n![截屏2022-07-03_20.59.51.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.59.51.png)\n","source":"_posts/个人网站如何白嫖 HTTPS.md","raw":"---\ntitle: 个人网站如何白嫖 HTTPS\ndate: 2022-07-05 21:43:32\ncategories: 前端\ntags: 计算机网络\n---\n\n## 什么是 HTTPS\n\n总所周知，HTTP 协议主要用于客户端和服务端的通信，但它本身也有一定缺点\n\n- 明文传输，内容可能被监听\n- 不能验证通信方的身份，可能遭遇伪装\n- 无法证明报文完整性，报文可能被篡改\n\n从架构的角度来说 “没有什么是加一层不能解决的” （狗头），所以 HTTPS 也就应运而生了\n\nHTTPS 是 HTTP 协议加 SSL（Secure Socket Layer，安全套接层）和 TLS（Transport Layer Security，安全层传输协议）协议的统称，从名称就可以看出，“两个 S” 相关的协议目的就是为了保证通信的安全性。通信方式也就变成了：HTTP → SSL / TLS → TCP / IP\n\n那么 HTTPS 是如果保证安全性的呢，这里简单介绍一下\n\n- 将对称加密的密钥用非对称加密的公钥进行加密，接收方在收到后，使用非对称加密的私钥进行解密得到对称加密的密钥，然后双方就可以通过对称加密的密钥进行沟通了\n- 但是这种加密传输的方式，一样也可能遭受中间人攻击，为了解决这个问题，需要一个权威、安全、可靠的第三方来证明通信方的身份，这里就要用到机构颁发的 **CA 证书**\n- 使用 CA 证书自带的 Hash 算法对证书内容 Hash 化得到一个摘要，再用 CA 证书的私钥加密，得到一个数字签名。当接收方收到证书后，使用相同的 Hash 算法生成消息摘要，再用公钥对数字签名解密，两者一对比，就知道有没有被别人篡改过了\n\n所以这里可以看到配置 HTTPS 的**关键在于 CA 证书**，而提供这种证明服务的机构必然是收费的（不然怎么保持中立呢），而且收费一般还不低，但是只要努力找一下，也是有白嫖 CA 证书的机会的。\n\n（顺便说一句，HTTPS 也不是绝对安全的，如果没有做到全站 HTTPS 的话，一样可能存在安全风险）\n\n## 如何白嫖 HTTPS 证书\n\n我使用的是 [Letsencrypt](https://letsencrypt.org/) ，一个免费好用的 HTTPS 证书服务商。毕竟阿里云一个证书续费 2000 多，一个个人网站续上几年都够换台 Macbook 了，对于个人网站来说真的没必要\n\n我使用的阿里云的服务器，操作系统是 Alibaba Cloud Linux，本质也是对 CentOS 的封装（CentOS 2021 年 12 月 31 号就停止维护了），所以下面我简单介绍一下如何在 Alibaba Cloud Linux（CentOS）配置 HTTPS 证书\n\n### 安装 Certbot 和 snap\n\nLetsencrypt 官方提供一个 [Certbot](https://certbot.eff.org/pages/about) 工具，用于快速生成证书。dnf 是 CentOS 内置的 Shell 软件包管理器，先使用 `dnf --version` 命令确定 dnf 工具可用, 再增加 epel 源，并更新 dnf 仓库\n\n```Bash\ndnf install <https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm>\ndnf upgrade\n```\n\n接下来使用 dnf 安装 snap（一个软件集合，类似 App Store）\n\n```Bash\ndnf install snapd -y # 安装snap\nsystemctl enable --now snapd.socket # 设置开机自启\nln -s /var/lib/snapd/snap /snap # 设置 snap 软链接\n```\n\n安装好 snap 后，更新 snap 快照、安装 Certbot 并设置软连接\n\n```shell\n# 更新快照\nsnap install core\nsnap refresh core\n\nsnap install --classic certbot # 安装 certbot\nln -s /snap/bin/certbot /usr/bin/certbot # 设置 certbot 软链接\n```\n\n![Image.png (1220×164)](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Image.png)\n\n### 配置 HTTPS 证书\n\n接下来使用 certbot 配置 https 证书，首先可以检查一下服务器有没有打开 HTTPS 需要的 443 端口的防火墙，如果没有打开的话需要提前设置一下（我一开始配置的时候就因为没开 443 的防火墙，导致证书一直下载不下来）\n\n```Bash\n# 检查 443 端口防火墙是否打开，返回的是 yes 的话说明是开启的\nfirewall-cmd --query-port=443/tcp\n\n# 开启 443 端口的防火墙\nfirewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n```\n\n再输入 `nginx -V` 命令检查 nginx 是否有配置 SSL 参数，如果看到 `--with-http_ssl_module` 参数说明是配置好了，否则需要重新安装、编译添加 SSL 模块\n\n```Bash\n# 进入源码包\ncd /home/nginx-1.20.2/\n# 操作 ssl 编译（prefix 是 nginx 目录前缀）\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module`\n# 执行 make 命令（此时不要执行 make install，否则会覆盖）\nmake\n# 备份原有 nginx 配置\ncp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak\n# 停止 nginx\nnginx -s stop\n# 将编译好的 nginx 覆盖掉原有的 nginx\ncd /home/nginx-1.20.2/\ncp ./objs/nginx /usr/local/nginx/sbin/\n\n# 启动 nginx\nnginx\n# 查看模块是否加载成功（大写的 V）\nnginx -V\n```\n\n配置好 SSL 模块的情况\n\n![截屏2022-07-03_20.11.52.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.11.52.png)\n\n设置好上面两个步骤之后，就可以执行 `certbot —nginx` 命令扫描 nginx 所有配置，会要求选择选择需要配置的域名，\n\n- 输入电子邮箱，用于紧急续签和安全通知\n- 是否同意服务条款，输入 y 同意\n- 是否接受新闻邮件，输入 n 不同意\n- 只要输入域名对应的序号即可，下图就是我的域名，如果有多个的话需要以逗号分隔即可\n\n![截屏2022-07-03_20.44.16.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.44.16.png)\n\n然后 certbot 会下载证书到 `/etc/letsencrypt/live/[具体域名]` 目录\n\n![截屏2022-07-03_20.47.06.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.47.06.png)\n\n证书下载好的同时，certbot 也会修改 nginx.conf 配置文件的内容，下面看一下 certbot 修改了哪些内容（带有 `# managed by Certbot` 的内容都是 certbot 增加的，无须手动再次修改）\n\n```Bash\n# 监听的端口由原来的 80 端口变为 443 端口\nlisten 443 ssl; # managed by Certbot\n\n# 导入 HTTPS 下载好的证书相关文件\nssl_certificate /etc/letsencrypt/live/www.wujieli.top/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/www.wujieli.top/privkey.pem; # managed by Certbot\ninclude /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\nssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n# 在非 https 访问的情况下，使用 301 重定向至 https 目录\nserver {\nif ($host = www.wujieli.top) {\n    return 301 https://$host$request_uri;\n} # managed by Certbot\n```\n\n最后可以使用 SSLChecker 网站检查一下 HTTPS 是否配置成功，如果全是绿色就代表大功告成了，这时候访问域名的时候就可以看到访问是安全的了\n\n![截屏2022-07-03_20.59.51.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.59.51.png)\n","slug":"个人网站如何白嫖 HTTPS","published":1,"updated":"2022-07-30T09:00:12.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl67regym0005cito6gfahopc","content":"<h2 id=\"什么是-HTTPS\"><a href=\"#什么是-HTTPS\" class=\"headerlink\" title=\"什么是 HTTPS\"></a>什么是 HTTPS</h2><p>总所周知，HTTP 协议主要用于客户端和服务端的通信，但它本身也有一定缺点</p>\n<ul>\n<li>明文传输，内容可能被监听</li>\n<li>不能验证通信方的身份，可能遭遇伪装</li>\n<li>无法证明报文完整性，报文可能被篡改</li>\n</ul>\n<p>从架构的角度来说 “没有什么是加一层不能解决的” （狗头），所以 HTTPS 也就应运而生了</p>\n<p>HTTPS 是 HTTP 协议加 SSL（Secure Socket Layer，安全套接层）和 TLS（Transport Layer Security，安全层传输协议）协议的统称，从名称就可以看出，“两个 S” 相关的协议目的就是为了保证通信的安全性。通信方式也就变成了：HTTP → SSL / TLS → TCP / IP</p>\n<p>那么 HTTPS 是如果保证安全性的呢，这里简单介绍一下</p>\n<ul>\n<li>将对称加密的密钥用非对称加密的公钥进行加密，接收方在收到后，使用非对称加密的私钥进行解密得到对称加密的密钥，然后双方就可以通过对称加密的密钥进行沟通了</li>\n<li>但是这种加密传输的方式，一样也可能遭受中间人攻击，为了解决这个问题，需要一个权威、安全、可靠的第三方来证明通信方的身份，这里就要用到机构颁发的 <strong>CA 证书</strong></li>\n<li>使用 CA 证书自带的 Hash 算法对证书内容 Hash 化得到一个摘要，再用 CA 证书的私钥加密，得到一个数字签名。当接收方收到证书后，使用相同的 Hash 算法生成消息摘要，再用公钥对数字签名解密，两者一对比，就知道有没有被别人篡改过了</li>\n</ul>\n<p>所以这里可以看到配置 HTTPS 的<strong>关键在于 CA 证书</strong>，而提供这种证明服务的机构必然是收费的（不然怎么保持中立呢），而且收费一般还不低，但是只要努力找一下，也是有白嫖 CA 证书的机会的。</p>\n<p>（顺便说一句，HTTPS 也不是绝对安全的，如果没有做到全站 HTTPS 的话，一样可能存在安全风险）</p>\n<h2 id=\"如何白嫖-HTTPS-证书\"><a href=\"#如何白嫖-HTTPS-证书\" class=\"headerlink\" title=\"如何白嫖 HTTPS 证书\"></a>如何白嫖 HTTPS 证书</h2><p>我使用的是 <a class=\"link\"   href=\"https://letsencrypt.org/\" >Letsencrypt<i class=\"fas fa-external-link-alt\"></i></a> ，一个免费好用的 HTTPS 证书服务商。毕竟阿里云一个证书续费 2000 多，一个个人网站续上几年都够换台 Macbook 了，对于个人网站来说真的没必要</p>\n<p>我使用的阿里云的服务器，操作系统是 Alibaba Cloud Linux，本质也是对 CentOS 的封装（CentOS 2021 年 12 月 31 号就停止维护了），所以下面我简单介绍一下如何在 Alibaba Cloud Linux（CentOS）配置 HTTPS 证书</p>\n<h3 id=\"安装-Certbot-和-snap\"><a href=\"#安装-Certbot-和-snap\" class=\"headerlink\" title=\"安装 Certbot 和 snap\"></a>安装 Certbot 和 snap</h3><p>Letsencrypt 官方提供一个 <a class=\"link\"   href=\"https://certbot.eff.org/pages/about\" >Certbot<i class=\"fas fa-external-link-alt\"></i></a> 工具，用于快速生成证书。dnf 是 CentOS 内置的 Shell 软件包管理器，先使用 <code>dnf --version</code> 命令确定 dnf 工具可用, 再增加 epel 源，并更新 dnf 仓库</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">dnf install &lt;https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-8.noarch.rpm&gt;\ndnf upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接下来使用 dnf 安装 snap（一个软件集合，类似 App Store）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">dnf install snapd -y # 安装snap\nsystemctl enable --now snapd.socket # 设置开机自启\nln -s &#x2F;var&#x2F;lib&#x2F;snapd&#x2F;snap &#x2F;snap # 设置 snap 软链接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装好 snap 后，更新 snap 快照、安装 Certbot 并设置软连接</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 更新快照</span>\nsnap <span class=\"token function\">install</span> core\nsnap refresh core\n\nsnap <span class=\"token function\">install</span> --classic certbot <span class=\"token comment\"># 安装 certbot</span>\n<span class=\"token function\">ln</span> -s /snap/bin/certbot /usr/bin/certbot <span class=\"token comment\"># 设置 certbot 软链接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Image.png\"\n                      alt=\"Image.png (1220×164)\"\n                ></p>\n<h3 id=\"配置-HTTPS-证书\"><a href=\"#配置-HTTPS-证书\" class=\"headerlink\" title=\"配置 HTTPS 证书\"></a>配置 HTTPS 证书</h3><p>接下来使用 certbot 配置 https 证书，首先可以检查一下服务器有没有打开 HTTPS 需要的 443 端口的防火墙，如果没有打开的话需要提前设置一下（我一开始配置的时候就因为没开 443 的防火墙，导致证书一直下载不下来）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 检查 443 端口防火墙是否打开，返回的是 yes 的话说明是开启的\nfirewall-cmd --query-port&#x3D;443&#x2F;tcp\n\n# 开启 443 端口的防火墙\nfirewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent\nfirewall-cmd --reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再输入 <code>nginx -V</code> 命令检查 nginx 是否有配置 SSL 参数，如果看到 <code>--with-http_ssl_module</code> 参数说明是配置好了，否则需要重新安装、编译添加 SSL 模块</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 进入源码包\ncd &#x2F;home&#x2F;nginx-1.20.2&#x2F;\n# 操作 ssl 编译（prefix 是 nginx 目录前缀）\n.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module&#96;\n# 执行 make 命令（此时不要执行 make install，否则会覆盖）\nmake\n# 备份原有 nginx 配置\ncp &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx.bak\n# 停止 nginx\nnginx -s stop\n# 将编译好的 nginx 覆盖掉原有的 nginx\ncd &#x2F;home&#x2F;nginx-1.20.2&#x2F;\ncp .&#x2F;objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;\n\n# 启动 nginx\nnginx\n# 查看模块是否加载成功（大写的 V）\nnginx -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置好 SSL 模块的情况</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.11.52.png\"\n                      alt=\"截屏2022-07-03_20.11.52.png\"\n                ></p>\n<p>设置好上面两个步骤之后，就可以执行 <code>certbot —nginx</code> 命令扫描 nginx 所有配置，会要求选择选择需要配置的域名，</p>\n<ul>\n<li>输入电子邮箱，用于紧急续签和安全通知</li>\n<li>是否同意服务条款，输入 y 同意</li>\n<li>是否接受新闻邮件，输入 n 不同意</li>\n<li>只要输入域名对应的序号即可，下图就是我的域名，如果有多个的话需要以逗号分隔即可</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.44.16.png\"\n                      alt=\"截屏2022-07-03_20.44.16.png\"\n                ></p>\n<p>然后 certbot 会下载证书到 <code>/etc/letsencrypt/live/[具体域名]</code> 目录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.47.06.png\"\n                      alt=\"截屏2022-07-03_20.47.06.png\"\n                ></p>\n<p>证书下载好的同时，certbot 也会修改 nginx.conf 配置文件的内容，下面看一下 certbot 修改了哪些内容（带有 <code># managed by Certbot</code> 的内容都是 certbot 增加的，无须手动再次修改）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 监听的端口由原来的 80 端口变为 443 端口\nlisten 443 ssl; # managed by Certbot\n\n# 导入 HTTPS 下载好的证书相关文件\nssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.wujieli.top&#x2F;fullchain.pem; # managed by Certbot\nssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.wujieli.top&#x2F;privkey.pem; # managed by Certbot\ninclude &#x2F;etc&#x2F;letsencrypt&#x2F;options-ssl-nginx.conf; # managed by Certbot\nssl_dhparam &#x2F;etc&#x2F;letsencrypt&#x2F;ssl-dhparams.pem; # managed by Certbot\n\n# 在非 https 访问的情况下，使用 301 重定向至 https 目录\nserver &#123;\nif ($host &#x3D; www.wujieli.top) &#123;\n    return 301 https:&#x2F;&#x2F;$host$request_uri;\n&#125; # managed by Certbot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后可以使用 SSLChecker 网站检查一下 HTTPS 是否配置成功，如果全是绿色就代表大功告成了，这时候访问域名的时候就可以看到访问是安全的了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.59.51.png\"\n                      alt=\"截屏2022-07-03_20.59.51.png\"\n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-HTTPS\"><a href=\"#什么是-HTTPS\" class=\"headerlink\" title=\"什么是 HTTPS\"></a>什么是 HTTPS</h2><p>总所周知，HTTP 协议主要用于客户端和服务端的通信，但它本身也有一定缺点</p>\n<ul>\n<li>明文传输，内容可能被监听</li>\n<li>不能验证通信方的身份，可能遭遇伪装</li>\n<li>无法证明报文完整性，报文可能被篡改</li>\n</ul>\n<p>从架构的角度来说 “没有什么是加一层不能解决的” （狗头），所以 HTTPS 也就应运而生了</p>\n<p>HTTPS 是 HTTP 协议加 SSL（Secure Socket Layer，安全套接层）和 TLS（Transport Layer Security，安全层传输协议）协议的统称，从名称就可以看出，“两个 S” 相关的协议目的就是为了保证通信的安全性。通信方式也就变成了：HTTP → SSL / TLS → TCP / IP</p>\n<p>那么 HTTPS 是如果保证安全性的呢，这里简单介绍一下</p>\n<ul>\n<li>将对称加密的密钥用非对称加密的公钥进行加密，接收方在收到后，使用非对称加密的私钥进行解密得到对称加密的密钥，然后双方就可以通过对称加密的密钥进行沟通了</li>\n<li>但是这种加密传输的方式，一样也可能遭受中间人攻击，为了解决这个问题，需要一个权威、安全、可靠的第三方来证明通信方的身份，这里就要用到机构颁发的 <strong>CA 证书</strong></li>\n<li>使用 CA 证书自带的 Hash 算法对证书内容 Hash 化得到一个摘要，再用 CA 证书的私钥加密，得到一个数字签名。当接收方收到证书后，使用相同的 Hash 算法生成消息摘要，再用公钥对数字签名解密，两者一对比，就知道有没有被别人篡改过了</li>\n</ul>\n<p>所以这里可以看到配置 HTTPS 的<strong>关键在于 CA 证书</strong>，而提供这种证明服务的机构必然是收费的（不然怎么保持中立呢），而且收费一般还不低，但是只要努力找一下，也是有白嫖 CA 证书的机会的。</p>\n<p>（顺便说一句，HTTPS 也不是绝对安全的，如果没有做到全站 HTTPS 的话，一样可能存在安全风险）</p>\n<h2 id=\"如何白嫖-HTTPS-证书\"><a href=\"#如何白嫖-HTTPS-证书\" class=\"headerlink\" title=\"如何白嫖 HTTPS 证书\"></a>如何白嫖 HTTPS 证书</h2><p>我使用的是 <a class=\"link\"   href=\"https://letsencrypt.org/\" >Letsencrypt<i class=\"fas fa-external-link-alt\"></i></a> ，一个免费好用的 HTTPS 证书服务商。毕竟阿里云一个证书续费 2000 多，一个个人网站续上几年都够换台 Macbook 了，对于个人网站来说真的没必要</p>\n<p>我使用的阿里云的服务器，操作系统是 Alibaba Cloud Linux，本质也是对 CentOS 的封装（CentOS 2021 年 12 月 31 号就停止维护了），所以下面我简单介绍一下如何在 Alibaba Cloud Linux（CentOS）配置 HTTPS 证书</p>\n<h3 id=\"安装-Certbot-和-snap\"><a href=\"#安装-Certbot-和-snap\" class=\"headerlink\" title=\"安装 Certbot 和 snap\"></a>安装 Certbot 和 snap</h3><p>Letsencrypt 官方提供一个 <a class=\"link\"   href=\"https://certbot.eff.org/pages/about\" >Certbot<i class=\"fas fa-external-link-alt\"></i></a> 工具，用于快速生成证书。dnf 是 CentOS 内置的 Shell 软件包管理器，先使用 <code>dnf --version</code> 命令确定 dnf 工具可用, 再增加 epel 源，并更新 dnf 仓库</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">dnf install &lt;https:&#x2F;&#x2F;dl.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;epel-release-latest-8.noarch.rpm&gt;\ndnf upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接下来使用 dnf 安装 snap（一个软件集合，类似 App Store）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">dnf install snapd -y # 安装snap\nsystemctl enable --now snapd.socket # 设置开机自启\nln -s &#x2F;var&#x2F;lib&#x2F;snapd&#x2F;snap &#x2F;snap # 设置 snap 软链接<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装好 snap 后，更新 snap 快照、安装 Certbot 并设置软连接</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 更新快照</span>\nsnap <span class=\"token function\">install</span> core\nsnap refresh core\n\nsnap <span class=\"token function\">install</span> --classic certbot <span class=\"token comment\"># 安装 certbot</span>\n<span class=\"token function\">ln</span> -s /snap/bin/certbot /usr/bin/certbot <span class=\"token comment\"># 设置 certbot 软链接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Image.png\"\n                      alt=\"Image.png (1220×164)\"\n                ></p>\n<h3 id=\"配置-HTTPS-证书\"><a href=\"#配置-HTTPS-证书\" class=\"headerlink\" title=\"配置 HTTPS 证书\"></a>配置 HTTPS 证书</h3><p>接下来使用 certbot 配置 https 证书，首先可以检查一下服务器有没有打开 HTTPS 需要的 443 端口的防火墙，如果没有打开的话需要提前设置一下（我一开始配置的时候就因为没开 443 的防火墙，导致证书一直下载不下来）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 检查 443 端口防火墙是否打开，返回的是 yes 的话说明是开启的\nfirewall-cmd --query-port&#x3D;443&#x2F;tcp\n\n# 开启 443 端口的防火墙\nfirewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent\nfirewall-cmd --reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再输入 <code>nginx -V</code> 命令检查 nginx 是否有配置 SSL 参数，如果看到 <code>--with-http_ssl_module</code> 参数说明是配置好了，否则需要重新安装、编译添加 SSL 模块</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 进入源码包\ncd &#x2F;home&#x2F;nginx-1.20.2&#x2F;\n# 操作 ssl 编译（prefix 是 nginx 目录前缀）\n.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx --with-http_stub_status_module --with-http_ssl_module&#96;\n# 执行 make 命令（此时不要执行 make install，否则会覆盖）\nmake\n# 备份原有 nginx 配置\ncp &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx.bak\n# 停止 nginx\nnginx -s stop\n# 将编译好的 nginx 覆盖掉原有的 nginx\ncd &#x2F;home&#x2F;nginx-1.20.2&#x2F;\ncp .&#x2F;objs&#x2F;nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;\n\n# 启动 nginx\nnginx\n# 查看模块是否加载成功（大写的 V）\nnginx -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置好 SSL 模块的情况</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.11.52.png\"\n                      alt=\"截屏2022-07-03_20.11.52.png\"\n                ></p>\n<p>设置好上面两个步骤之后，就可以执行 <code>certbot —nginx</code> 命令扫描 nginx 所有配置，会要求选择选择需要配置的域名，</p>\n<ul>\n<li>输入电子邮箱，用于紧急续签和安全通知</li>\n<li>是否同意服务条款，输入 y 同意</li>\n<li>是否接受新闻邮件，输入 n 不同意</li>\n<li>只要输入域名对应的序号即可，下图就是我的域名，如果有多个的话需要以逗号分隔即可</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.44.16.png\"\n                      alt=\"截屏2022-07-03_20.44.16.png\"\n                ></p>\n<p>然后 certbot 会下载证书到 <code>/etc/letsencrypt/live/[具体域名]</code> 目录</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.47.06.png\"\n                      alt=\"截屏2022-07-03_20.47.06.png\"\n                ></p>\n<p>证书下载好的同时，certbot 也会修改 nginx.conf 配置文件的内容，下面看一下 certbot 修改了哪些内容（带有 <code># managed by Certbot</code> 的内容都是 certbot 增加的，无须手动再次修改）</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 监听的端口由原来的 80 端口变为 443 端口\nlisten 443 ssl; # managed by Certbot\n\n# 导入 HTTPS 下载好的证书相关文件\nssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.wujieli.top&#x2F;fullchain.pem; # managed by Certbot\nssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;www.wujieli.top&#x2F;privkey.pem; # managed by Certbot\ninclude &#x2F;etc&#x2F;letsencrypt&#x2F;options-ssl-nginx.conf; # managed by Certbot\nssl_dhparam &#x2F;etc&#x2F;letsencrypt&#x2F;ssl-dhparams.pem; # managed by Certbot\n\n# 在非 https 访问的情况下，使用 301 重定向至 https 目录\nserver &#123;\nif ($host &#x3D; www.wujieli.top) &#123;\n    return 301 https:&#x2F;&#x2F;$host$request_uri;\n&#125; # managed by Certbot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后可以使用 SSLChecker 网站检查一下 HTTPS 是否配置成功，如果全是绿色就代表大功告成了，这时候访问域名的时候就可以看到访问是安全的了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/2022-07-03_20.59.51.png\"\n                      alt=\"截屏2022-07-03_20.59.51.png\"\n                ></p>\n"},{"title":"前端代码整洁之道：lint 标准化","date":"2022-07-18T23:02:32.000Z","_content":"\n在新公司的参与的第一个项目就是重构一个内部的管理平台，在第一次看源码的时候就发现各类编码风格都有，已经有着往“屎山”发展的趋势了，所以想着对项目进行编码规范和编码风格做一个统一。统一规范的格式不仅看着舒服了一些，还可以提前检查出一些潜在的问题、增强项目的维护性，何乐而不为呢？这周正好完成了风格规范的统一，下面也借机梳理一下使用到的代码检查工具（简称为 lint 工具）的配置流程，如果想要了解具体的配置项介绍可以参考各个工具的官网\n\n重构的项目主要是 Vue3 相关的技术栈，主要使用到 lint 工具包括：\n\n- [Editor Config](https://editorconfig.org/) ：解决不同 IDE 编辑器编码风格不统一问题\n- [Prettier](https://www.prettier.cn/docs/index.html)：代码格式化工具\n- [ESLint](https://cn.eslint.org/)：JS / TS 代码检查和修复工具\n- [StyleLint](https://github.com/stylelint/stylelint)：CSS 代码检查和格式化工具\n\n## Editor Config 和 Prettier 配置\n\n首先是配置 Editor Config ，在项目根目录下新建一个 `.editorconfig` 文件，配置文件中定义好编码规范可以了使用了，我在项目中使用到的 Editor Config 配置如下，主要定义了字符集、缩进、换行的风格\n\n```shell\n# 表示是最顶层的 EditorConfig 配置文件\nroot = true\n\n# 表示所有文件适用\n[*]\ncharset = utf-8 # 设置文件字符集为 utf-8\nindent_style = space # 缩进风格（tab | space）\nindent_size = 2 # 缩进大小\nend_of_line = lf # 控制换行类型(lf | cr | crlf)\ntrim_trailing_whitespace = true # 去除行首的任意空白字符\ninsert_final_newline = true # 始终在文件末尾插入一个新行\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\nmax_line_length = off\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n```\n\n接下来是 Prettier 配置，首先引入依赖，在项目根目录创建 prettier 配置文件和需要忽略检查的文件\n\n```shell\npnpm i prettier -D # 引入 Prettier 依赖\n\necho {}> .prettierrc.js # 目录新建 .prettierrc.js 配置文件\necho > .prettierignore # 新建 .prettierignore 不需要被格式化的文件放在这里\n```\n\n`.prettierrc.js` 主要是定义与代码风格相关的内容，我习惯于定义好一套比较齐全的配置，便于后期维护，具体配置和介绍如下\n\n```js\n// .prettierrc.js\nmodule.exports = {\n  // 单行代码超出 100 个字符自动换行\n  printWidth: 100,\n  // 一个 tab 键缩进相当于 2 个空格\n  tabWidth: 2,\n  // 行缩进使用 tab 键代替空格\n  useTabs: false,\n  // 每一条语句后面添加分号\n  semi: true,\n  // 使用单引号\n  singleQuote: false,\n  // 仅仅当必须的时候才会加上双引号\n  quoteProps: \"as-needed\",\n  // JSX 中使用单引号\n  jsxSingleQuote: false,\n  // 多行用逗号分隔的句法，未尾添加逗号（符合es5规范）\n  trailingComma: \"es5\",\n  // 在括号和对象的文字之间加上一个空格\n  bracketSpacing: true,\n  // 多行的 JSX 对象结尾的 > 放在结尾同一行\n  bracketSameLine: false,\n  // 箭头函数，只有一个参数的时候，也需要括号\n  arrowParens: \"always\",\n  // 格式化文档的某一部分，默认为全部\n  rangeStart: 0,\n  rangeEnd: Infinity,\n  // 对于 .vue 文件，缩进 <script> 和 <style> 里的内容\n  vueIndentScriptAndStyle: true,\n  // 不需要写文件开头的 @prettier\n  insertPragma: false,\n  // 不需要在文件开头插入 @prettier\n  requirePragma: false,\n  // 使用默认折行标准\n  proseWrap: \"preserve\",\n  // 根据显示样式决定 html 要不要折行\n  htmlWhitespaceSensitivity: \"css\",\n  // 换行符使用 lf\n  endOfLine: \"lf\",\n};\n```\n\n`.prettierignore` 主要是定义 prettier 不需要格式化的文件，下面是我用到的配置\n\n```js\n/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n```\n\n第三步是安装 Prettier 插件，在 VSCode 中 Prettier 插件在项目根目录中有 `.editorconfig` 文件和`.prettierrc.js` 文件中的一个时，就会优先读取项目中的配置，如果两个文件都没有的话才会读取 VSCode 的配置\n\n安装好插件后，建议在 VSCode 的配置中开启自动保存、自动格式化相关功能，这样就可以实现实时自动化的效果了，用起来简直不要太爽\n\n```json\n// 自动保存\n\"files.autoSave\": \"onFocusChange\",\n// 保存自动格式化\n\"editor.formatOnSave\": true,\n// 保存自动去除多余空格\n\"files.trimTrailingWhitespace\": true,\n// 保存自动修复代码错误\n\"editor.codeActionsOnSave\": {\n  \"source.fixAll\": true\n},\n```\n\n## ESLint 配置\n\n安装 ESLint 最简单的方式其实是执行 `eslint --init` 命令（需要全局安装 ESLint），然后选择需要的规则、是否使用 TS、使用的框架就好，然后就会自动引入相应的依赖并生成好配置文件了，基本可以说是 “零配置”\n\n![截屏2022-07-18 21.06.44](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2021.06.44.png)\n\n但实际应用过程中还是考虑到原项目的情况，我还是手动引入的相关的依赖，主要使用到的依赖包括\n\n- [eslint](https://github.com/eslint/eslint)：核心依赖\n- [vue-eslint-parser](https://github.com/vuejs/vue-eslint-parser)：配置解析 `.vue` 文件的解析器\n- [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue)：Vue 官方出品的 ESLint 插件\n- [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint)：支持 ts 的 ESLint 插件，主要使用到 plugin 和 parser\n\n第一步先安装依赖\n\n```shell\npnpm i -D eslint vue-eslint-parser eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser\n```\n\n第二步在根目录新建 `.eslintrc.js`，` .eslintignore` 两个文件，`.eslintignore` 除外 node_modules，`.eslintrc.js` 配置内容如下\n\n```js\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  parser: \"vue-eslint-parser\",\n  parserOptions: {\n    parser: \"@typescript-eslint/parser\",\n    ecmaVersion: 2020,\n    sourceType: \"module\",\n    jsxPragma: \"React\",\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n  extends: [\n    \"plugin:vue/vue3-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n  ],\n  rules: {\n    // 关闭不允许使用 any\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    // 关闭组件必须由多个单词命名\n    \"vue/multi-word-component-names\": \"off\",\n    // 关闭禁止使用 ts 备注\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    // 关闭禁止使用非空断言\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    // 可以使用 _ 开头定义不使用的变量\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      {\n        argsIgnorePattern: \"^_\",\n        varsIgnorePattern: \"^_\",\n      },\n    ],\n    \"no-unused-vars\": [\n      \"error\",\n      {\n        argsIgnorePattern: \"^_\",\n        varsIgnorePattern: \"^_\",\n      },\n    ],\n  },\n};\n```\n\n其中 ESLint 和 Prettier 还会存在冲突，这时候会用到这两个插件，目的就是让 Prettier 的优先级大于 ESLint\n\n- `eslint-plugin-prettier` 将 Prettier 的规则设置到 ESLint 的规则中\n- `eslint-config-prettier` 关闭 ESLint 中与 Prettier 中会发生冲突的规则\n\n安装命令： `pnpm i eslint-plugin-prettier eslint-config-prettier -D`，`.eslintrc.js` extends 添加：`\"plugin:prettier/recommended\"`，注意要添加到最后一个，ESLint 的解析顺序是按照**从下往上**的顺序来加载扩展的\n\n```diff\n extends: [\n    \"plugin:vue/vue3-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n+   \"plugin:prettier/recommended\",\n  ],\n```\n\n第三步再安装微软官方的 ESLint 插件，关于 ESLint 的配置就算完成了\n\n![截屏2022-07-19 06.53.49](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-19%2006.53.49.png)\n\n## StyleLint 配置\n\n我在项目中配置的 StyleLint 依赖包括\n\n- [stylelint](https://github.com/stylelint/stylelint)：核心依赖\n\n- [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard)：官方推荐的代码风格\n- [stylelint-config-recommended](https://github.com/stylelint/stylelint-config-recommended) 和 [stylelint-config-recommended-vue](https://github.com/ota-meshi/stylelint-config-recommended-vue)：常用的 StyleLint 配置依赖\n- [stylelint-config-prettier](https://github.com/prettier/stylelint-config-prettier): 解决 StyleLint 和 Prettier 的冲突问题\n- [stylelint-order](https://github.com/hudochenkov/stylelint-order)：强制你按照某个顺序编写 css\n\n由于是 Vue 项目，并且使用到了 less，所以还会使用到两个 PostCSS 依赖\n\n- postcss-html：解析文件中 `<style>` 标签（vue 文件中使用）\n- postcss-less：支持解析 less 文件\n\n首先安装相关依赖\n\n```shell\npnpm i -D stylelint stylelint-config-standard stylelint-config-recommended stylelint-config-recommended-vue stylelint-config-prettier stylelint-order postcss-html postcss-less\n```\n\n第二步在项目根目录新建 `.stylelintrc.js` 和 `.stylelintignore` 两个文件， `.stylelintrc.js` 文件中的主要配置如下，我在 rules 配置项中为了兼容老项目的风格，还自定义了一些配置项\n\n```js\nmodule.exports = {\n  root: true,\n  plugins: [\"stylelint-order\"],\n  customSyntax: \"postcss-html\",\n  rules: {\n    // 百分比声明为数字 rgb(0 0 0 / 0.1)\n    \"alpha-value-notation\": \"number\",\n    // 空规则保持空行间隔\n    \"at-rule-empty-line-before\": \"never\",\n    // 忽略一些关键字规则，主要为了兼容 less 和 tailwind\n    \"at-rule-no-unknown\": [\n      true,\n      {\n        ignoreAtRules: [\n          \"tailwind\",\n          \"content\",\n          \"each\",\n          \"error\",\n          \"extend\",\n          \"for\",\n          \"function\",\n          \"if\",\n          \"include\",\n          \"mixin\",\n          \"return\",\n          \"while\",\n        ],\n      },\n    ],\n    // 颜色表示方式以逗号分隔：rgb(0, 0, 0)\n    \"color-function-notation\": \"legacy\",\n    // 不允许非法的 hex 颜色表示方式：#fff\n    \"color-no-invalid-hex\": true,\n    \"comment-empty-line-before\": \"never\",\n    // 不允许多行声明\n    \"declaration-colon-newline-after\": null,\n    // 每个属性之间没有空行\n    \"declaration-empty-line-before\": \"never\",\n    // 不允许 linear-gradient() 存在不符合标准的方向\n    \"function-linear-gradient-no-nonstandard-direction\": true,\n    // https://stylelint.io/user-guide/rules/list/no-descending-specificity\n    \"no-descending-specificity\": null,\n    // 允许空文件\n    \"no-empty-source\": null,\n    // 结尾允许存在空行\n    \"no-missing-end-of-source-newline\": null,\n    // 小数必须以 0 开头\n    \"number-leading-zero\": \"always\",\n    // 定义排序规则\n    \"order/order\": [\n      [\n        \"dollar-variables\",\n        \"custom-properties\",\n        \"at-rules\",\n        \"declarations\",\n        {\n          type: \"at-rule\",\n          name: \"supports\",\n        },\n        {\n          type: \"at-rule\",\n          name: \"media\",\n        },\n        \"rules\",\n      ],\n      { severity: \"warning\" },\n    ],\n    // 允许存在空行\n    \"rule-empty-line-before\": [\n      \"always\",\n      {\n        ignore: [\"after-comment\", \"first-nested\"],\n      },\n    ],\n  },\n  extends: [\"stylelint-config-standard\", \"stylelint-config-prettier\"],\n  ignoreFiles: [\"**/*.js\", \"**/*.jsx\", \"**/*.tsx\", \"**/*.ts\"],\n  overrides: [\n    {\n      files: [\"*.vue\", \"**/*.vue\", \"*.html\", \"**/*.html\"],\n      extends: [\"stylelint-config-recommended\"],\n    },\n    {\n      files: [\"*.less\", \"**/*.less\"],\n      customSyntax: \"postcss-less\",\n      extends: [\n        \"stylelint-config-standard\",\n        \"stylelint-config-recommended-vue\",\n      ],\n    },\n  ],\n};\n```\n\n第三步配置 `.stylelintignore` 需要忽略的文件\n\n```\n/dist/*\n/public/*\npublic/*\n```\n\n第四步安装 StyleLint 插件并且在 VSCode 这开启使用 StyleLint 格式化代码\n\n![截屏2022-07-18 20.44.47](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2020.44.47.png)\n\n```json\n// stylelint\n\"css.validate\": false,\n\"less.validate\": false,\n\"scss.validate\": false,\n\"stylelint.enable\": true,\n\"stylelint.validate\": [\"html\", \"css\", \"scss\", \"less\", \"vue\"],\n```\n\n这个插件现在已经是 v1.2.2 的版本了，已经不支持 StyleLint 13 版本，如果你用的是 StyleLint 13 版本的话，**需要将这个插件降级使用**。点击插件旁边的小齿轮，再点 `Install Another Version`，选择其他版本进行安装选 0.87.6 版本安装就可以了，这时 css 自动格式化功能恢复正常。但是 StyleLint 14 的版本的格式化排序功能还是不能在自动保存时实现，我的解决方案是**手动在 StyleLint 配置文件增加详细的 CSS 属性排序**，这样就可以舒服的使用 StyleLint 的格式化功能了，具体的排序[可以参考](https://github.com/wujieli0207/personal-manage/blob/master/.stylelintrc.js)\n\n## 再加上统一的执行命令\n\n上面这一套配置下来就可以顺利的实现保存自动格式化，并且所有人的代码风格都是一致的效果了，最后又朝着“像写诗一样写代码”的目标更近了一步，最后在 `package.json` 文件中加上统一的全局格式化命令，就可以愉快的使用了\n\n```json\n\"scripts\": {\n  \"lint:eslint\": \"eslint --cache --max-warnings 0  \\\"{src,mock, build}/**/*.{vue,ts,tsx}\\\" --fix\",\n  \"lint:prettier\": \"prettier --write  \\\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\\"\",\n  \"lint:stylelint\": \"stylelint --cache --fix \\\"**/*.{vue,less,postcss,css,scss}\\\" --cache --cache-location node_modules/.cache/stylelint/\",\n}\n\n```\n","source":"_posts/前端代码整洁之道：lint 标准化.md","raw":"---\ntitle: 前端代码整洁之道：lint 标准化\ndate: 2022-07-19 07:02:32\ncategories: 前端\ntags: 代码整洁之道\n---\n\n在新公司的参与的第一个项目就是重构一个内部的管理平台，在第一次看源码的时候就发现各类编码风格都有，已经有着往“屎山”发展的趋势了，所以想着对项目进行编码规范和编码风格做一个统一。统一规范的格式不仅看着舒服了一些，还可以提前检查出一些潜在的问题、增强项目的维护性，何乐而不为呢？这周正好完成了风格规范的统一，下面也借机梳理一下使用到的代码检查工具（简称为 lint 工具）的配置流程，如果想要了解具体的配置项介绍可以参考各个工具的官网\n\n重构的项目主要是 Vue3 相关的技术栈，主要使用到 lint 工具包括：\n\n- [Editor Config](https://editorconfig.org/) ：解决不同 IDE 编辑器编码风格不统一问题\n- [Prettier](https://www.prettier.cn/docs/index.html)：代码格式化工具\n- [ESLint](https://cn.eslint.org/)：JS / TS 代码检查和修复工具\n- [StyleLint](https://github.com/stylelint/stylelint)：CSS 代码检查和格式化工具\n\n## Editor Config 和 Prettier 配置\n\n首先是配置 Editor Config ，在项目根目录下新建一个 `.editorconfig` 文件，配置文件中定义好编码规范可以了使用了，我在项目中使用到的 Editor Config 配置如下，主要定义了字符集、缩进、换行的风格\n\n```shell\n# 表示是最顶层的 EditorConfig 配置文件\nroot = true\n\n# 表示所有文件适用\n[*]\ncharset = utf-8 # 设置文件字符集为 utf-8\nindent_style = space # 缩进风格（tab | space）\nindent_size = 2 # 缩进大小\nend_of_line = lf # 控制换行类型(lf | cr | crlf)\ntrim_trailing_whitespace = true # 去除行首的任意空白字符\ninsert_final_newline = true # 始终在文件末尾插入一个新行\n\n[*.{yml,yaml,json}]\nindent_style = space\nindent_size = 2\n\n[*.md]\nmax_line_length = off\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n```\n\n接下来是 Prettier 配置，首先引入依赖，在项目根目录创建 prettier 配置文件和需要忽略检查的文件\n\n```shell\npnpm i prettier -D # 引入 Prettier 依赖\n\necho {}> .prettierrc.js # 目录新建 .prettierrc.js 配置文件\necho > .prettierignore # 新建 .prettierignore 不需要被格式化的文件放在这里\n```\n\n`.prettierrc.js` 主要是定义与代码风格相关的内容，我习惯于定义好一套比较齐全的配置，便于后期维护，具体配置和介绍如下\n\n```js\n// .prettierrc.js\nmodule.exports = {\n  // 单行代码超出 100 个字符自动换行\n  printWidth: 100,\n  // 一个 tab 键缩进相当于 2 个空格\n  tabWidth: 2,\n  // 行缩进使用 tab 键代替空格\n  useTabs: false,\n  // 每一条语句后面添加分号\n  semi: true,\n  // 使用单引号\n  singleQuote: false,\n  // 仅仅当必须的时候才会加上双引号\n  quoteProps: \"as-needed\",\n  // JSX 中使用单引号\n  jsxSingleQuote: false,\n  // 多行用逗号分隔的句法，未尾添加逗号（符合es5规范）\n  trailingComma: \"es5\",\n  // 在括号和对象的文字之间加上一个空格\n  bracketSpacing: true,\n  // 多行的 JSX 对象结尾的 > 放在结尾同一行\n  bracketSameLine: false,\n  // 箭头函数，只有一个参数的时候，也需要括号\n  arrowParens: \"always\",\n  // 格式化文档的某一部分，默认为全部\n  rangeStart: 0,\n  rangeEnd: Infinity,\n  // 对于 .vue 文件，缩进 <script> 和 <style> 里的内容\n  vueIndentScriptAndStyle: true,\n  // 不需要写文件开头的 @prettier\n  insertPragma: false,\n  // 不需要在文件开头插入 @prettier\n  requirePragma: false,\n  // 使用默认折行标准\n  proseWrap: \"preserve\",\n  // 根据显示样式决定 html 要不要折行\n  htmlWhitespaceSensitivity: \"css\",\n  // 换行符使用 lf\n  endOfLine: \"lf\",\n};\n```\n\n`.prettierignore` 主要是定义 prettier 不需要格式化的文件，下面是我用到的配置\n\n```js\n/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n```\n\n第三步是安装 Prettier 插件，在 VSCode 中 Prettier 插件在项目根目录中有 `.editorconfig` 文件和`.prettierrc.js` 文件中的一个时，就会优先读取项目中的配置，如果两个文件都没有的话才会读取 VSCode 的配置\n\n安装好插件后，建议在 VSCode 的配置中开启自动保存、自动格式化相关功能，这样就可以实现实时自动化的效果了，用起来简直不要太爽\n\n```json\n// 自动保存\n\"files.autoSave\": \"onFocusChange\",\n// 保存自动格式化\n\"editor.formatOnSave\": true,\n// 保存自动去除多余空格\n\"files.trimTrailingWhitespace\": true,\n// 保存自动修复代码错误\n\"editor.codeActionsOnSave\": {\n  \"source.fixAll\": true\n},\n```\n\n## ESLint 配置\n\n安装 ESLint 最简单的方式其实是执行 `eslint --init` 命令（需要全局安装 ESLint），然后选择需要的规则、是否使用 TS、使用的框架就好，然后就会自动引入相应的依赖并生成好配置文件了，基本可以说是 “零配置”\n\n![截屏2022-07-18 21.06.44](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2021.06.44.png)\n\n但实际应用过程中还是考虑到原项目的情况，我还是手动引入的相关的依赖，主要使用到的依赖包括\n\n- [eslint](https://github.com/eslint/eslint)：核心依赖\n- [vue-eslint-parser](https://github.com/vuejs/vue-eslint-parser)：配置解析 `.vue` 文件的解析器\n- [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue)：Vue 官方出品的 ESLint 插件\n- [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint)：支持 ts 的 ESLint 插件，主要使用到 plugin 和 parser\n\n第一步先安装依赖\n\n```shell\npnpm i -D eslint vue-eslint-parser eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser\n```\n\n第二步在根目录新建 `.eslintrc.js`，` .eslintignore` 两个文件，`.eslintignore` 除外 node_modules，`.eslintrc.js` 配置内容如下\n\n```js\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    node: true,\n    es6: true,\n  },\n  parser: \"vue-eslint-parser\",\n  parserOptions: {\n    parser: \"@typescript-eslint/parser\",\n    ecmaVersion: 2020,\n    sourceType: \"module\",\n    jsxPragma: \"React\",\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n  extends: [\n    \"plugin:vue/vue3-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n  ],\n  rules: {\n    // 关闭不允许使用 any\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    // 关闭组件必须由多个单词命名\n    \"vue/multi-word-component-names\": \"off\",\n    // 关闭禁止使用 ts 备注\n    \"@typescript-eslint/ban-ts-comment\": \"off\",\n    // 关闭禁止使用非空断言\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    // 可以使用 _ 开头定义不使用的变量\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      {\n        argsIgnorePattern: \"^_\",\n        varsIgnorePattern: \"^_\",\n      },\n    ],\n    \"no-unused-vars\": [\n      \"error\",\n      {\n        argsIgnorePattern: \"^_\",\n        varsIgnorePattern: \"^_\",\n      },\n    ],\n  },\n};\n```\n\n其中 ESLint 和 Prettier 还会存在冲突，这时候会用到这两个插件，目的就是让 Prettier 的优先级大于 ESLint\n\n- `eslint-plugin-prettier` 将 Prettier 的规则设置到 ESLint 的规则中\n- `eslint-config-prettier` 关闭 ESLint 中与 Prettier 中会发生冲突的规则\n\n安装命令： `pnpm i eslint-plugin-prettier eslint-config-prettier -D`，`.eslintrc.js` extends 添加：`\"plugin:prettier/recommended\"`，注意要添加到最后一个，ESLint 的解析顺序是按照**从下往上**的顺序来加载扩展的\n\n```diff\n extends: [\n    \"plugin:vue/vue3-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n+   \"plugin:prettier/recommended\",\n  ],\n```\n\n第三步再安装微软官方的 ESLint 插件，关于 ESLint 的配置就算完成了\n\n![截屏2022-07-19 06.53.49](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-19%2006.53.49.png)\n\n## StyleLint 配置\n\n我在项目中配置的 StyleLint 依赖包括\n\n- [stylelint](https://github.com/stylelint/stylelint)：核心依赖\n\n- [stylelint-config-standard](https://github.com/stylelint/stylelint-config-standard)：官方推荐的代码风格\n- [stylelint-config-recommended](https://github.com/stylelint/stylelint-config-recommended) 和 [stylelint-config-recommended-vue](https://github.com/ota-meshi/stylelint-config-recommended-vue)：常用的 StyleLint 配置依赖\n- [stylelint-config-prettier](https://github.com/prettier/stylelint-config-prettier): 解决 StyleLint 和 Prettier 的冲突问题\n- [stylelint-order](https://github.com/hudochenkov/stylelint-order)：强制你按照某个顺序编写 css\n\n由于是 Vue 项目，并且使用到了 less，所以还会使用到两个 PostCSS 依赖\n\n- postcss-html：解析文件中 `<style>` 标签（vue 文件中使用）\n- postcss-less：支持解析 less 文件\n\n首先安装相关依赖\n\n```shell\npnpm i -D stylelint stylelint-config-standard stylelint-config-recommended stylelint-config-recommended-vue stylelint-config-prettier stylelint-order postcss-html postcss-less\n```\n\n第二步在项目根目录新建 `.stylelintrc.js` 和 `.stylelintignore` 两个文件， `.stylelintrc.js` 文件中的主要配置如下，我在 rules 配置项中为了兼容老项目的风格，还自定义了一些配置项\n\n```js\nmodule.exports = {\n  root: true,\n  plugins: [\"stylelint-order\"],\n  customSyntax: \"postcss-html\",\n  rules: {\n    // 百分比声明为数字 rgb(0 0 0 / 0.1)\n    \"alpha-value-notation\": \"number\",\n    // 空规则保持空行间隔\n    \"at-rule-empty-line-before\": \"never\",\n    // 忽略一些关键字规则，主要为了兼容 less 和 tailwind\n    \"at-rule-no-unknown\": [\n      true,\n      {\n        ignoreAtRules: [\n          \"tailwind\",\n          \"content\",\n          \"each\",\n          \"error\",\n          \"extend\",\n          \"for\",\n          \"function\",\n          \"if\",\n          \"include\",\n          \"mixin\",\n          \"return\",\n          \"while\",\n        ],\n      },\n    ],\n    // 颜色表示方式以逗号分隔：rgb(0, 0, 0)\n    \"color-function-notation\": \"legacy\",\n    // 不允许非法的 hex 颜色表示方式：#fff\n    \"color-no-invalid-hex\": true,\n    \"comment-empty-line-before\": \"never\",\n    // 不允许多行声明\n    \"declaration-colon-newline-after\": null,\n    // 每个属性之间没有空行\n    \"declaration-empty-line-before\": \"never\",\n    // 不允许 linear-gradient() 存在不符合标准的方向\n    \"function-linear-gradient-no-nonstandard-direction\": true,\n    // https://stylelint.io/user-guide/rules/list/no-descending-specificity\n    \"no-descending-specificity\": null,\n    // 允许空文件\n    \"no-empty-source\": null,\n    // 结尾允许存在空行\n    \"no-missing-end-of-source-newline\": null,\n    // 小数必须以 0 开头\n    \"number-leading-zero\": \"always\",\n    // 定义排序规则\n    \"order/order\": [\n      [\n        \"dollar-variables\",\n        \"custom-properties\",\n        \"at-rules\",\n        \"declarations\",\n        {\n          type: \"at-rule\",\n          name: \"supports\",\n        },\n        {\n          type: \"at-rule\",\n          name: \"media\",\n        },\n        \"rules\",\n      ],\n      { severity: \"warning\" },\n    ],\n    // 允许存在空行\n    \"rule-empty-line-before\": [\n      \"always\",\n      {\n        ignore: [\"after-comment\", \"first-nested\"],\n      },\n    ],\n  },\n  extends: [\"stylelint-config-standard\", \"stylelint-config-prettier\"],\n  ignoreFiles: [\"**/*.js\", \"**/*.jsx\", \"**/*.tsx\", \"**/*.ts\"],\n  overrides: [\n    {\n      files: [\"*.vue\", \"**/*.vue\", \"*.html\", \"**/*.html\"],\n      extends: [\"stylelint-config-recommended\"],\n    },\n    {\n      files: [\"*.less\", \"**/*.less\"],\n      customSyntax: \"postcss-less\",\n      extends: [\n        \"stylelint-config-standard\",\n        \"stylelint-config-recommended-vue\",\n      ],\n    },\n  ],\n};\n```\n\n第三步配置 `.stylelintignore` 需要忽略的文件\n\n```\n/dist/*\n/public/*\npublic/*\n```\n\n第四步安装 StyleLint 插件并且在 VSCode 这开启使用 StyleLint 格式化代码\n\n![截屏2022-07-18 20.44.47](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2020.44.47.png)\n\n```json\n// stylelint\n\"css.validate\": false,\n\"less.validate\": false,\n\"scss.validate\": false,\n\"stylelint.enable\": true,\n\"stylelint.validate\": [\"html\", \"css\", \"scss\", \"less\", \"vue\"],\n```\n\n这个插件现在已经是 v1.2.2 的版本了，已经不支持 StyleLint 13 版本，如果你用的是 StyleLint 13 版本的话，**需要将这个插件降级使用**。点击插件旁边的小齿轮，再点 `Install Another Version`，选择其他版本进行安装选 0.87.6 版本安装就可以了，这时 css 自动格式化功能恢复正常。但是 StyleLint 14 的版本的格式化排序功能还是不能在自动保存时实现，我的解决方案是**手动在 StyleLint 配置文件增加详细的 CSS 属性排序**，这样就可以舒服的使用 StyleLint 的格式化功能了，具体的排序[可以参考](https://github.com/wujieli0207/personal-manage/blob/master/.stylelintrc.js)\n\n## 再加上统一的执行命令\n\n上面这一套配置下来就可以顺利的实现保存自动格式化，并且所有人的代码风格都是一致的效果了，最后又朝着“像写诗一样写代码”的目标更近了一步，最后在 `package.json` 文件中加上统一的全局格式化命令，就可以愉快的使用了\n\n```json\n\"scripts\": {\n  \"lint:eslint\": \"eslint --cache --max-warnings 0  \\\"{src,mock, build}/**/*.{vue,ts,tsx}\\\" --fix\",\n  \"lint:prettier\": \"prettier --write  \\\"src/**/*.{js,json,tsx,css,less,scss,vue,html,md}\\\"\",\n  \"lint:stylelint\": \"stylelint --cache --fix \\\"**/*.{vue,less,postcss,css,scss}\\\" --cache --cache-location node_modules/.cache/stylelint/\",\n}\n\n```\n","slug":"前端代码整洁之道：lint 标准化","published":1,"updated":"2022-07-30T10:20:29.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl67regyq0009cito1fjxf3mo","content":"<p>在新公司的参与的第一个项目就是重构一个内部的管理平台，在第一次看源码的时候就发现各类编码风格都有，已经有着往“屎山”发展的趋势了，所以想着对项目进行编码规范和编码风格做一个统一。统一规范的格式不仅看着舒服了一些，还可以提前检查出一些潜在的问题、增强项目的维护性，何乐而不为呢？这周正好完成了风格规范的统一，下面也借机梳理一下使用到的代码检查工具（简称为 lint 工具）的配置流程，如果想要了解具体的配置项介绍可以参考各个工具的官网</p>\n<p>重构的项目主要是 Vue3 相关的技术栈，主要使用到 lint 工具包括：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://editorconfig.org/\" >Editor Config<i class=\"fas fa-external-link-alt\"></i></a> ：解决不同 IDE 编辑器编码风格不统一问题</li>\n<li><a class=\"link\"   href=\"https://www.prettier.cn/docs/index.html\" >Prettier<i class=\"fas fa-external-link-alt\"></i></a>：代码格式化工具</li>\n<li><a class=\"link\"   href=\"https://cn.eslint.org/\" >ESLint<i class=\"fas fa-external-link-alt\"></i></a>：JS / TS 代码检查和修复工具</li>\n<li><a class=\"link\"   href=\"https://github.com/stylelint/stylelint\" >StyleLint<i class=\"fas fa-external-link-alt\"></i></a>：CSS 代码检查和格式化工具</li>\n</ul>\n<h2 id=\"Editor-Config-和-Prettier-配置\"><a href=\"#Editor-Config-和-Prettier-配置\" class=\"headerlink\" title=\"Editor Config 和 Prettier 配置\"></a>Editor Config 和 Prettier 配置</h2><p>首先是配置 Editor Config ，在项目根目录下新建一个 <code>.editorconfig</code> 文件，配置文件中定义好编码规范可以了使用了，我在项目中使用到的 Editor Config 配置如下，主要定义了字符集、缩进、换行的风格</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 表示是最顶层的 EditorConfig 配置文件</span>\nroot <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\"># 表示所有文件适用</span>\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>\ncharset <span class=\"token operator\">=</span> utf-8 <span class=\"token comment\"># 设置文件字符集为 utf-8</span>\nindent_style <span class=\"token operator\">=</span> space <span class=\"token comment\"># 缩进风格（tab | space）</span>\nindent_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 缩进大小</span>\nend_of_line <span class=\"token operator\">=</span> lf <span class=\"token comment\"># 控制换行类型(lf | cr | crlf)</span>\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 去除行首的任意空白字符</span>\ninsert_final_newline <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 始终在文件末尾插入一个新行</span>\n\n<span class=\"token punctuation\">[</span>*.<span class=\"token punctuation\">&#123;</span>yml,yaml,json<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\nindent_style <span class=\"token operator\">=</span> space\nindent_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token punctuation\">[</span>*.md<span class=\"token punctuation\">]</span>\nmax_line_length <span class=\"token operator\">=</span> off\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token punctuation\">[</span>Makefile<span class=\"token punctuation\">]</span>\nindent_style <span class=\"token operator\">=</span> tab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来是 Prettier 配置，首先引入依赖，在项目根目录创建 prettier 配置文件和需要忽略检查的文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i prettier -D <span class=\"token comment\"># 引入 Prettier 依赖</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> .prettierrc.js <span class=\"token comment\"># 目录新建 .prettierrc.js 配置文件</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">></span> .prettierignore <span class=\"token comment\"># 新建 .prettierignore 不需要被格式化的文件放在这里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>.prettierrc.js</code> 主要是定义与代码风格相关的内容，我习惯于定义好一套比较齐全的配置，便于后期维护，具体配置和介绍如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .prettierrc.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 单行代码超出 100 个字符自动换行</span>\n  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 一个 tab 键缩进相当于 2 个空格</span>\n  <span class=\"token literal-property property\">tabWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 行缩进使用 tab 键代替空格</span>\n  <span class=\"token literal-property property\">useTabs</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 每一条语句后面添加分号</span>\n  <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 使用单引号</span>\n  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 仅仅当必须的时候才会加上双引号</span>\n  <span class=\"token literal-property property\">quoteProps</span><span class=\"token operator\">:</span> <span class=\"token string\">\"as-needed\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// JSX 中使用单引号</span>\n  <span class=\"token literal-property property\">jsxSingleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 多行用逗号分隔的句法，未尾添加逗号（符合es5规范）</span>\n  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 在括号和对象的文字之间加上一个空格</span>\n  <span class=\"token literal-property property\">bracketSpacing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 多行的 JSX 对象结尾的 > 放在结尾同一行</span>\n  <span class=\"token literal-property property\">bracketSameLine</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 箭头函数，只有一个参数的时候，也需要括号</span>\n  <span class=\"token literal-property property\">arrowParens</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 格式化文档的某一部分，默认为全部</span>\n  <span class=\"token literal-property property\">rangeStart</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rangeEnd</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 对于 .vue 文件，缩进 &lt;script> 和 &lt;style> 里的内容</span>\n  <span class=\"token literal-property property\">vueIndentScriptAndStyle</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 不需要写文件开头的 @prettier</span>\n  <span class=\"token literal-property property\">insertPragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 不需要在文件开头插入 @prettier</span>\n  <span class=\"token literal-property property\">requirePragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 使用默认折行标准</span>\n  <span class=\"token literal-property property\">proseWrap</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 根据显示样式决定 html 要不要折行</span>\n  <span class=\"token literal-property property\">htmlWhitespaceSensitivity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 换行符使用 lf</span>\n  <span class=\"token literal-property property\">endOfLine</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lf\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>.prettierignore</code> 主要是定义 prettier 不需要格式化的文件，下面是我用到的配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>dist<span class=\"token comment\">/*\n.local\n.output.js\n/node_modules/**\n\n**/</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>svg\n<span class=\"token operator\">**</span><span class=\"token comment\">/*.sh\n\n/public/*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步是安装 Prettier 插件，在 VSCode 中 Prettier 插件在项目根目录中有 <code>.editorconfig</code> 文件和<code>.prettierrc.js</code> 文件中的一个时，就会优先读取项目中的配置，如果两个文件都没有的话才会读取 VSCode 的配置</p>\n<p>安装好插件后，建议在 VSCode 的配置中开启自动保存、自动格式化相关功能，这样就可以实现实时自动化的效果了，用起来简直不要太爽</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 自动保存</span>\n<span class=\"token property\">\"files.autoSave\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onFocusChange\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动格式化</span>\n<span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动去除多余空格</span>\n<span class=\"token property\">\"files.trimTrailingWhitespace\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动修复代码错误</span>\n<span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"source.fixAll\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ESLint-配置\"><a href=\"#ESLint-配置\" class=\"headerlink\" title=\"ESLint 配置\"></a>ESLint 配置</h2><p>安装 ESLint 最简单的方式其实是执行 <code>eslint --init</code> 命令（需要全局安装 ESLint），然后选择需要的规则、是否使用 TS、使用的框架就好，然后就会自动引入相应的依赖并生成好配置文件了，基本可以说是 “零配置”</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2021.06.44.png\"\n                      alt=\"截屏2022-07-18 21.06.44\"\n                ></p>\n<p>但实际应用过程中还是考虑到原项目的情况，我还是手动引入的相关的依赖，主要使用到的依赖包括</p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/eslint/eslint\" >eslint<i class=\"fas fa-external-link-alt\"></i></a>：核心依赖</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/vue-eslint-parser\" >vue-eslint-parser<i class=\"fas fa-external-link-alt\"></i></a>：配置解析 <code>.vue</code> 文件的解析器</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/eslint-plugin-vue\" >eslint-plugin-vue<i class=\"fas fa-external-link-alt\"></i></a>：Vue 官方出品的 ESLint 插件</li>\n<li><a class=\"link\"   href=\"https://github.com/typescript-eslint/typescript-eslint\" >typescript-eslint<i class=\"fas fa-external-link-alt\"></i></a>：支持 ts 的 ESLint 插件，主要使用到 plugin 和 parser</li>\n</ul>\n<p>第一步先安装依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D eslint vue-eslint-parser eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二步在根目录新建 <code>.eslintrc.js</code>，<code> .eslintignore</code> 两个文件，<code>.eslintignore</code> 除外 node_modules，<code>.eslintrc.js</code> 配置内容如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es6</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-eslint-parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">jsxPragma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"React\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ecmaFeatures</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">jsx</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"plugin:vue/vue3-recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 关闭不允许使用 any</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭组件必须由多个单词命名</span>\n    <span class=\"token string-property property\">\"vue/multi-word-component-names\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭禁止使用 ts 备注</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/ban-ts-comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭禁止使用非空断言</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-non-null-assertion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 可以使用 _ 开头定义不使用的变量</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">argsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">varsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">argsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">varsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 ESLint 和 Prettier 还会存在冲突，这时候会用到这两个插件，目的就是让 Prettier 的优先级大于 ESLint</p>\n<ul>\n<li><code>eslint-plugin-prettier</code> 将 Prettier 的规则设置到 ESLint 的规则中</li>\n<li><code>eslint-config-prettier</code> 关闭 ESLint 中与 Prettier 中会发生冲突的规则</li>\n</ul>\n<p>安装命令： <code>pnpm i eslint-plugin-prettier eslint-config-prettier -D</code>，<code>.eslintrc.js</code> extends 添加：<code>&quot;plugin:prettier/recommended&quot;</code>，注意要添加到最后一个，ESLint 的解析顺序是按照<strong>从下往上</strong>的顺序来加载扩展的</p>\n<pre class=\"line-numbers language-diff\" data-language=\"diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">extends: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"plugin:vue/vue3-recommended\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"plugin:@typescript-eslint/recommended\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"plugin:prettier/recommended\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ],</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步再安装微软官方的 ESLint 插件，关于 ESLint 的配置就算完成了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-19%2006.53.49.png\"\n                      alt=\"截屏2022-07-19 06.53.49\"\n                ></p>\n<h2 id=\"StyleLint-配置\"><a href=\"#StyleLint-配置\" class=\"headerlink\" title=\"StyleLint 配置\"></a>StyleLint 配置</h2><p>我在项目中配置的 StyleLint 依赖包括</p>\n<ul>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint\" >stylelint<i class=\"fas fa-external-link-alt\"></i></a>：核心依赖</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint-config-standard\" >stylelint-config-standard<i class=\"fas fa-external-link-alt\"></i></a>：官方推荐的代码风格</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint-config-recommended\" >stylelint-config-recommended<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"https://github.com/ota-meshi/stylelint-config-recommended-vue\" >stylelint-config-recommended-vue<i class=\"fas fa-external-link-alt\"></i></a>：常用的 StyleLint 配置依赖</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/prettier/stylelint-config-prettier\" >stylelint-config-prettier<i class=\"fas fa-external-link-alt\"></i></a>: 解决 StyleLint 和 Prettier 的冲突问题</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/hudochenkov/stylelint-order\" >stylelint-order<i class=\"fas fa-external-link-alt\"></i></a>：强制你按照某个顺序编写 css</p>\n</li>\n</ul>\n<p>由于是 Vue 项目，并且使用到了 less，所以还会使用到两个 PostCSS 依赖</p>\n<ul>\n<li>postcss-html：解析文件中 <code>&lt;style&gt;</code> 标签（vue 文件中使用）</li>\n<li>postcss-less：支持解析 less 文件</li>\n</ul>\n<p>首先安装相关依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D stylelint stylelint-config-standard stylelint-config-recommended stylelint-config-recommended-vue stylelint-config-prettier stylelint-order postcss-html postcss-less<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二步在项目根目录新建 <code>.stylelintrc.js</code> 和 <code>.stylelintignore</code> 两个文件， <code>.stylelintrc.js</code> 文件中的主要配置如下，我在 rules 配置项中为了兼容老项目的风格，还自定义了一些配置项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-order\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">customSyntax</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 百分比声明为数字 rgb(0 0 0 / 0.1)</span>\n    <span class=\"token string-property property\">\"alpha-value-notation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 空规则保持空行间隔</span>\n    <span class=\"token string-property property\">\"at-rule-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略一些关键字规则，主要为了兼容 less 和 tailwind</span>\n    <span class=\"token string-property property\">\"at-rule-no-unknown\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">ignoreAtRules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"tailwind\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"each\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"extend\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"for\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"if\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"mixin\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"while\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 颜色表示方式以逗号分隔：rgb(0, 0, 0)</span>\n    <span class=\"token string-property property\">\"color-function-notation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"legacy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许非法的 hex 颜色表示方式：#fff</span>\n    <span class=\"token string-property property\">\"color-no-invalid-hex\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"comment-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许多行声明</span>\n    <span class=\"token string-property property\">\"declaration-colon-newline-after\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 每个属性之间没有空行</span>\n    <span class=\"token string-property property\">\"declaration-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许 linear-gradient() 存在不符合标准的方向</span>\n    <span class=\"token string-property property\">\"function-linear-gradient-no-nonstandard-direction\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// https://stylelint.io/user-guide/rules/list/no-descending-specificity</span>\n    <span class=\"token string-property property\">\"no-descending-specificity\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 允许空文件</span>\n    <span class=\"token string-property property\">\"no-empty-source\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 结尾允许存在空行</span>\n    <span class=\"token string-property property\">\"no-missing-end-of-source-newline\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 小数必须以 0 开头</span>\n    <span class=\"token string-property property\">\"number-leading-zero\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 定义排序规则</span>\n    <span class=\"token string-property property\">\"order/order\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"dollar-variables\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"custom-properties\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"at-rules\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"declarations\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"at-rule\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"supports\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"at-rule\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"media\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"rules\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">severity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warning\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 允许存在空行</span>\n    <span class=\"token string-property property\">\"rule-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">ignore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"after-comment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"first-nested\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-config-standard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stylelint-config-prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignoreFiles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">overrides</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*.vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.html\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-config-recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*.less\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.less\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">customSyntax</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-less\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"stylelint-config-standard\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"stylelint-config-recommended-vue\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步配置 <code>.stylelintignore</code> 需要忽略的文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;dist&#x2F;*\n&#x2F;public&#x2F;*\npublic&#x2F;*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>第四步安装 StyleLint 插件并且在 VSCode 这开启使用 StyleLint 格式化代码</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2020.44.47.png\"\n                      alt=\"截屏2022-07-18 20.44.47\"\n                ></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// stylelint</span>\n<span class=\"token property\">\"css.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"less.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scss.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"stylelint.enable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"stylelint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"scss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"less\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个插件现在已经是 v1.2.2 的版本了，已经不支持 StyleLint 13 版本，如果你用的是 StyleLint 13 版本的话，<strong>需要将这个插件降级使用</strong>。点击插件旁边的小齿轮，再点 <code>Install Another Version</code>，选择其他版本进行安装选 0.87.6 版本安装就可以了，这时 css 自动格式化功能恢复正常。但是 StyleLint 14 的版本的格式化排序功能还是不能在自动保存时实现，我的解决方案是<strong>手动在 StyleLint 配置文件增加详细的 CSS 属性排序</strong>，这样就可以舒服的使用 StyleLint 的格式化功能了，具体的排序<a class=\"link\"   href=\"https://github.com/wujieli0207/personal-manage/blob/master/.stylelintrc.js\" >可以参考<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"再加上统一的执行命令\"><a href=\"#再加上统一的执行命令\" class=\"headerlink\" title=\"再加上统一的执行命令\"></a>再加上统一的执行命令</h2><p>上面这一套配置下来就可以顺利的实现保存自动格式化，并且所有人的代码风格都是一致的效果了，最后又朝着“像写诗一样写代码”的目标更近了一步，最后在 <code>package.json</code> 文件中加上统一的全局格式化命令，就可以愉快的使用了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"lint:eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --max-warnings 0  \\\"&#123;src,mock, build&#125;/**/*.&#123;vue,ts,tsx&#125;\\\" --fix\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint:prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write  \\\"src/**/*.&#123;js,json,tsx,css,less,scss,vue,html,md&#125;\\\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint:stylelint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint --cache --fix \\\"**/*.&#123;vue,less,postcss,css,scss&#125;\\\" --cache --cache-location node_modules/.cache/stylelint/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在新公司的参与的第一个项目就是重构一个内部的管理平台，在第一次看源码的时候就发现各类编码风格都有，已经有着往“屎山”发展的趋势了，所以想着对项目进行编码规范和编码风格做一个统一。统一规范的格式不仅看着舒服了一些，还可以提前检查出一些潜在的问题、增强项目的维护性，何乐而不为呢？这周正好完成了风格规范的统一，下面也借机梳理一下使用到的代码检查工具（简称为 lint 工具）的配置流程，如果想要了解具体的配置项介绍可以参考各个工具的官网</p>\n<p>重构的项目主要是 Vue3 相关的技术栈，主要使用到 lint 工具包括：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://editorconfig.org/\" >Editor Config<i class=\"fas fa-external-link-alt\"></i></a> ：解决不同 IDE 编辑器编码风格不统一问题</li>\n<li><a class=\"link\"   href=\"https://www.prettier.cn/docs/index.html\" >Prettier<i class=\"fas fa-external-link-alt\"></i></a>：代码格式化工具</li>\n<li><a class=\"link\"   href=\"https://cn.eslint.org/\" >ESLint<i class=\"fas fa-external-link-alt\"></i></a>：JS / TS 代码检查和修复工具</li>\n<li><a class=\"link\"   href=\"https://github.com/stylelint/stylelint\" >StyleLint<i class=\"fas fa-external-link-alt\"></i></a>：CSS 代码检查和格式化工具</li>\n</ul>\n<h2 id=\"Editor-Config-和-Prettier-配置\"><a href=\"#Editor-Config-和-Prettier-配置\" class=\"headerlink\" title=\"Editor Config 和 Prettier 配置\"></a>Editor Config 和 Prettier 配置</h2><p>首先是配置 Editor Config ，在项目根目录下新建一个 <code>.editorconfig</code> 文件，配置文件中定义好编码规范可以了使用了，我在项目中使用到的 Editor Config 配置如下，主要定义了字符集、缩进、换行的风格</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 表示是最顶层的 EditorConfig 配置文件</span>\nroot <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token comment\"># 表示所有文件适用</span>\n<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>\ncharset <span class=\"token operator\">=</span> utf-8 <span class=\"token comment\"># 设置文件字符集为 utf-8</span>\nindent_style <span class=\"token operator\">=</span> space <span class=\"token comment\"># 缩进风格（tab | space）</span>\nindent_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 缩进大小</span>\nend_of_line <span class=\"token operator\">=</span> lf <span class=\"token comment\"># 控制换行类型(lf | cr | crlf)</span>\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 去除行首的任意空白字符</span>\ninsert_final_newline <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\"># 始终在文件末尾插入一个新行</span>\n\n<span class=\"token punctuation\">[</span>*.<span class=\"token punctuation\">&#123;</span>yml,yaml,json<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\nindent_style <span class=\"token operator\">=</span> space\nindent_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token punctuation\">[</span>*.md<span class=\"token punctuation\">]</span>\nmax_line_length <span class=\"token operator\">=</span> off\ntrim_trailing_whitespace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n<span class=\"token punctuation\">[</span>Makefile<span class=\"token punctuation\">]</span>\nindent_style <span class=\"token operator\">=</span> tab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来是 Prettier 配置，首先引入依赖，在项目根目录创建 prettier 配置文件和需要忽略检查的文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i prettier -D <span class=\"token comment\"># 引入 Prettier 依赖</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span> .prettierrc.js <span class=\"token comment\"># 目录新建 .prettierrc.js 配置文件</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">></span> .prettierignore <span class=\"token comment\"># 新建 .prettierignore 不需要被格式化的文件放在这里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>.prettierrc.js</code> 主要是定义与代码风格相关的内容，我习惯于定义好一套比较齐全的配置，便于后期维护，具体配置和介绍如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .prettierrc.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 单行代码超出 100 个字符自动换行</span>\n  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 一个 tab 键缩进相当于 2 个空格</span>\n  <span class=\"token literal-property property\">tabWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 行缩进使用 tab 键代替空格</span>\n  <span class=\"token literal-property property\">useTabs</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 每一条语句后面添加分号</span>\n  <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 使用单引号</span>\n  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 仅仅当必须的时候才会加上双引号</span>\n  <span class=\"token literal-property property\">quoteProps</span><span class=\"token operator\">:</span> <span class=\"token string\">\"as-needed\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// JSX 中使用单引号</span>\n  <span class=\"token literal-property property\">jsxSingleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 多行用逗号分隔的句法，未尾添加逗号（符合es5规范）</span>\n  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 在括号和对象的文字之间加上一个空格</span>\n  <span class=\"token literal-property property\">bracketSpacing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 多行的 JSX 对象结尾的 > 放在结尾同一行</span>\n  <span class=\"token literal-property property\">bracketSameLine</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 箭头函数，只有一个参数的时候，也需要括号</span>\n  <span class=\"token literal-property property\">arrowParens</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 格式化文档的某一部分，默认为全部</span>\n  <span class=\"token literal-property property\">rangeStart</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rangeEnd</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 对于 .vue 文件，缩进 &lt;script> 和 &lt;style> 里的内容</span>\n  <span class=\"token literal-property property\">vueIndentScriptAndStyle</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 不需要写文件开头的 @prettier</span>\n  <span class=\"token literal-property property\">insertPragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 不需要在文件开头插入 @prettier</span>\n  <span class=\"token literal-property property\">requirePragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 使用默认折行标准</span>\n  <span class=\"token literal-property property\">proseWrap</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 根据显示样式决定 html 要不要折行</span>\n  <span class=\"token literal-property property\">htmlWhitespaceSensitivity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 换行符使用 lf</span>\n  <span class=\"token literal-property property\">endOfLine</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lf\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>.prettierignore</code> 主要是定义 prettier 不需要格式化的文件，下面是我用到的配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">/</span>dist<span class=\"token comment\">/*\n.local\n.output.js\n/node_modules/**\n\n**/</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span>svg\n<span class=\"token operator\">**</span><span class=\"token comment\">/*.sh\n\n/public/*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步是安装 Prettier 插件，在 VSCode 中 Prettier 插件在项目根目录中有 <code>.editorconfig</code> 文件和<code>.prettierrc.js</code> 文件中的一个时，就会优先读取项目中的配置，如果两个文件都没有的话才会读取 VSCode 的配置</p>\n<p>安装好插件后，建议在 VSCode 的配置中开启自动保存、自动格式化相关功能，这样就可以实现实时自动化的效果了，用起来简直不要太爽</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 自动保存</span>\n<span class=\"token property\">\"files.autoSave\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"onFocusChange\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动格式化</span>\n<span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动去除多余空格</span>\n<span class=\"token property\">\"files.trimTrailingWhitespace\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 保存自动修复代码错误</span>\n<span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"source.fixAll\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ESLint-配置\"><a href=\"#ESLint-配置\" class=\"headerlink\" title=\"ESLint 配置\"></a>ESLint 配置</h2><p>安装 ESLint 最简单的方式其实是执行 <code>eslint --init</code> 命令（需要全局安装 ESLint），然后选择需要的规则、是否使用 TS、使用的框架就好，然后就会自动引入相应的依赖并生成好配置文件了，基本可以说是 “零配置”</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2021.06.44.png\"\n                      alt=\"截屏2022-07-18 21.06.44\"\n                ></p>\n<p>但实际应用过程中还是考虑到原项目的情况，我还是手动引入的相关的依赖，主要使用到的依赖包括</p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/eslint/eslint\" >eslint<i class=\"fas fa-external-link-alt\"></i></a>：核心依赖</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/vue-eslint-parser\" >vue-eslint-parser<i class=\"fas fa-external-link-alt\"></i></a>：配置解析 <code>.vue</code> 文件的解析器</li>\n<li><a class=\"link\"   href=\"https://github.com/vuejs/eslint-plugin-vue\" >eslint-plugin-vue<i class=\"fas fa-external-link-alt\"></i></a>：Vue 官方出品的 ESLint 插件</li>\n<li><a class=\"link\"   href=\"https://github.com/typescript-eslint/typescript-eslint\" >typescript-eslint<i class=\"fas fa-external-link-alt\"></i></a>：支持 ts 的 ESLint 插件，主要使用到 plugin 和 parser</li>\n</ul>\n<p>第一步先安装依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D eslint vue-eslint-parser eslint-plugin-vue @typescript-eslint/eslint-plugin @typescript-eslint/parser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二步在根目录新建 <code>.eslintrc.js</code>，<code> .eslintignore</code> 两个文件，<code>.eslintignore</code> 除外 node_modules，<code>.eslintrc.js</code> 配置内容如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">browser</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">es6</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-eslint-parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">jsxPragma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"React\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ecmaFeatures</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">jsx</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"plugin:vue/vue3-recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 关闭不允许使用 any</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭组件必须由多个单词命名</span>\n    <span class=\"token string-property property\">\"vue/multi-word-component-names\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭禁止使用 ts 备注</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/ban-ts-comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 关闭禁止使用非空断言</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-non-null-assertion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 可以使用 _ 开头定义不使用的变量</span>\n    <span class=\"token string-property property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">argsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">varsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">argsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">varsIgnorePattern</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 ESLint 和 Prettier 还会存在冲突，这时候会用到这两个插件，目的就是让 Prettier 的优先级大于 ESLint</p>\n<ul>\n<li><code>eslint-plugin-prettier</code> 将 Prettier 的规则设置到 ESLint 的规则中</li>\n<li><code>eslint-config-prettier</code> 关闭 ESLint 中与 Prettier 中会发生冲突的规则</li>\n</ul>\n<p>安装命令： <code>pnpm i eslint-plugin-prettier eslint-config-prettier -D</code>，<code>.eslintrc.js</code> extends 添加：<code>&quot;plugin:prettier/recommended&quot;</code>，注意要添加到最后一个，ESLint 的解析顺序是按照<strong>从下往上</strong>的顺序来加载扩展的</p>\n<pre class=\"line-numbers language-diff\" data-language=\"diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">extends: [\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"plugin:vue/vue3-recommended\",\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   \"plugin:@typescript-eslint/recommended\",\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   \"plugin:prettier/recommended\",\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> ],</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步再安装微软官方的 ESLint 插件，关于 ESLint 的配置就算完成了</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-19%2006.53.49.png\"\n                      alt=\"截屏2022-07-19 06.53.49\"\n                ></p>\n<h2 id=\"StyleLint-配置\"><a href=\"#StyleLint-配置\" class=\"headerlink\" title=\"StyleLint 配置\"></a>StyleLint 配置</h2><p>我在项目中配置的 StyleLint 依赖包括</p>\n<ul>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint\" >stylelint<i class=\"fas fa-external-link-alt\"></i></a>：核心依赖</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint-config-standard\" >stylelint-config-standard<i class=\"fas fa-external-link-alt\"></i></a>：官方推荐的代码风格</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/stylelint/stylelint-config-recommended\" >stylelint-config-recommended<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"https://github.com/ota-meshi/stylelint-config-recommended-vue\" >stylelint-config-recommended-vue<i class=\"fas fa-external-link-alt\"></i></a>：常用的 StyleLint 配置依赖</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/prettier/stylelint-config-prettier\" >stylelint-config-prettier<i class=\"fas fa-external-link-alt\"></i></a>: 解决 StyleLint 和 Prettier 的冲突问题</p>\n</li>\n<li><p><a class=\"link\"   href=\"https://github.com/hudochenkov/stylelint-order\" >stylelint-order<i class=\"fas fa-external-link-alt\"></i></a>：强制你按照某个顺序编写 css</p>\n</li>\n</ul>\n<p>由于是 Vue 项目，并且使用到了 less，所以还会使用到两个 PostCSS 依赖</p>\n<ul>\n<li>postcss-html：解析文件中 <code>&lt;style&gt;</code> 标签（vue 文件中使用）</li>\n<li>postcss-less：支持解析 less 文件</li>\n</ul>\n<p>首先安装相关依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i -D stylelint stylelint-config-standard stylelint-config-recommended stylelint-config-recommended-vue stylelint-config-prettier stylelint-order postcss-html postcss-less<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二步在项目根目录新建 <code>.stylelintrc.js</code> 和 <code>.stylelintignore</code> 两个文件， <code>.stylelintrc.js</code> 文件中的主要配置如下，我在 rules 配置项中为了兼容老项目的风格，还自定义了一些配置项</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-order\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">customSyntax</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 百分比声明为数字 rgb(0 0 0 / 0.1)</span>\n    <span class=\"token string-property property\">\"alpha-value-notation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 空规则保持空行间隔</span>\n    <span class=\"token string-property property\">\"at-rule-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略一些关键字规则，主要为了兼容 less 和 tailwind</span>\n    <span class=\"token string-property property\">\"at-rule-no-unknown\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">ignoreAtRules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"tailwind\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"content\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"each\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"extend\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"for\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"if\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"mixin\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"return\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"while\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 颜色表示方式以逗号分隔：rgb(0, 0, 0)</span>\n    <span class=\"token string-property property\">\"color-function-notation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"legacy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许非法的 hex 颜色表示方式：#fff</span>\n    <span class=\"token string-property property\">\"color-no-invalid-hex\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">\"comment-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许多行声明</span>\n    <span class=\"token string-property property\">\"declaration-colon-newline-after\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 每个属性之间没有空行</span>\n    <span class=\"token string-property property\">\"declaration-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 不允许 linear-gradient() 存在不符合标准的方向</span>\n    <span class=\"token string-property property\">\"function-linear-gradient-no-nonstandard-direction\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// https://stylelint.io/user-guide/rules/list/no-descending-specificity</span>\n    <span class=\"token string-property property\">\"no-descending-specificity\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 允许空文件</span>\n    <span class=\"token string-property property\">\"no-empty-source\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 结尾允许存在空行</span>\n    <span class=\"token string-property property\">\"no-missing-end-of-source-newline\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 小数必须以 0 开头</span>\n    <span class=\"token string-property property\">\"number-leading-zero\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 定义排序规则</span>\n    <span class=\"token string-property property\">\"order/order\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"dollar-variables\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"custom-properties\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"at-rules\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"declarations\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"at-rule\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"supports\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"at-rule\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"media\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"rules\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">severity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"warning\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 允许存在空行</span>\n    <span class=\"token string-property property\">\"rule-empty-line-before\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">ignore</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"after-comment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"first-nested\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-config-standard\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"stylelint-config-prettier\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">ignoreFiles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"**/*.js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.jsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">overrides</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*.vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.html\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"stylelint-config-recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*.less\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.less\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">customSyntax</span><span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-less\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"stylelint-config-standard\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"stylelint-config-recommended-vue\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步配置 <code>.stylelintignore</code> 需要忽略的文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;dist&#x2F;*\n&#x2F;public&#x2F;*\npublic&#x2F;*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>第四步安装 StyleLint 插件并且在 VSCode 这开启使用 StyleLint 格式化代码</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-07-18%2020.44.47.png\"\n                      alt=\"截屏2022-07-18 20.44.47\"\n                ></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// stylelint</span>\n<span class=\"token property\">\"css.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"less.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"scss.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"stylelint.enable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"stylelint.validate\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"scss\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"less\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个插件现在已经是 v1.2.2 的版本了，已经不支持 StyleLint 13 版本，如果你用的是 StyleLint 13 版本的话，<strong>需要将这个插件降级使用</strong>。点击插件旁边的小齿轮，再点 <code>Install Another Version</code>，选择其他版本进行安装选 0.87.6 版本安装就可以了，这时 css 自动格式化功能恢复正常。但是 StyleLint 14 的版本的格式化排序功能还是不能在自动保存时实现，我的解决方案是<strong>手动在 StyleLint 配置文件增加详细的 CSS 属性排序</strong>，这样就可以舒服的使用 StyleLint 的格式化功能了，具体的排序<a class=\"link\"   href=\"https://github.com/wujieli0207/personal-manage/blob/master/.stylelintrc.js\" >可以参考<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"再加上统一的执行命令\"><a href=\"#再加上统一的执行命令\" class=\"headerlink\" title=\"再加上统一的执行命令\"></a>再加上统一的执行命令</h2><p>上面这一套配置下来就可以顺利的实现保存自动格式化，并且所有人的代码风格都是一致的效果了，最后又朝着“像写诗一样写代码”的目标更近了一步，最后在 <code>package.json</code> 文件中加上统一的全局格式化命令，就可以愉快的使用了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"lint:eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --max-warnings 0  \\\"&#123;src,mock, build&#125;/**/*.&#123;vue,ts,tsx&#125;\\\" --fix\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint:prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write  \\\"src/**/*.&#123;js,json,tsx,css,less,scss,vue,html,md&#125;\\\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint:stylelint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"stylelint --cache --fix \\\"**/*.&#123;vue,less,postcss,css,scss&#125;\\\" --cache --cache-location node_modules/.cache/stylelint/\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"我的2022年中复盘：正式成为前端仔","date":"2022-07-10T02:19:32.000Z","_content":"\n## 关于工作\n\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n## 关于个人成长\n\n### 番茄钟学习记录\n\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png)\n\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n\n### 极简主义和焦虑\n\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”\n","source":"_posts/我的2022年中复盘：正式成为前端仔.md","raw":"---\ntitle: 我的2022年中复盘：正式成为前端仔\ndate: 2022-07-10 10:19:32\ncategories: 无限进步\n---\n\n## 关于工作\n\n我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。\n\n在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。\n\n但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。\n\n最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人\n\n## 关于个人成长\n\n### 番茄钟学习记录\n\n我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。\n\n![fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png)\n\n每周的番茄钟学习记录\n\n从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习\n\n### 从折腾工具到关注产出\n\n今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。\n\n在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是**通过生产力工具产出了什么东西**。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了\n\n## 关于生活\n\n### 极简主义和焦虑\n\n今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：\n\n1. **如无必要，勿增实体**\n2. **如有必要，尽量选择自己承受范围内做好的**\n\n第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了\n\n有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面\n\n## 未来规划\n\n新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”\n","slug":"我的2022年中复盘：正式成为前端仔","published":1,"updated":"2022-07-30T10:24:51.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl67regys000acito31rn0dwn","content":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png\"\n                      alt=\"fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png\"\n                ></p>\n<p>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h2><p>我是在保险公司工作的程序员，之前做过的项目相对比较简单，或者是采购的产品再定制化开发，而今年算是独立负责了一个部门重点项目，熬了几个月也算是项目正常上线了，尤其是最后一个月，经常加班到凌晨一两点。</p>\n<p>在甲方做程序员不像乙方，具体开发写代码主要都是由供应商做的，而主要做的是项目管理和协调一类的工作，缺点是技术方面的进步比较慢，优点是看到的层次更高，不是专注于某个功能的开发，而是会更加偏向业务方面。</p>\n<p>但其实说是偏向管理，但很多时候自己也要上手写代码，去改 Bug。而且我觉得其实只是改 Bug 也就还可以接受，但还有另一方面是沟通协调，尤其是跨系统间的沟通协调以及和业务部门的沟通，这种没有正确答案的问题处理起来才最为痛苦。在这次项目中我对接了保险的四个主要渠道部门还有两个产品开发部门，沟通协调确实很考验人，当然学到的东西也非常多。</p>\n<p>最后其实还是非常感谢自己的领导和开发同事对这个项目的支持，单凭我一个人肯定是没法完成这个项目的，也希望自己以后能成长为能够有能力独立完成这类项目的人</p>\n<h2 id=\"关于个人成长\"><a href=\"#关于个人成长\" class=\"headerlink\" title=\"关于个人成长\"></a>关于个人成长</h2><h3 id=\"番茄钟学习记录\"><a href=\"#番茄钟学习记录\" class=\"headerlink\" title=\"番茄钟学习记录\"></a>番茄钟学习记录</h3><p>我习惯番茄钟记录自己的学习时间，粗略看了一下统计，今年累计学习了 1211 个番茄钟，每个番茄钟 25 分钟，差不多是 21 天的学习时间。看到这个结果确认很感慨，一年有 365 天，真正用于自己学习的时间却不到一个月。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png\"\n                      alt=\"fb39035d8e6f4381ae69b66a661b6006~tplv-k3u1fbpfcp-zoom-1.png\"\n                ></p>\n<p>每周的番茄钟学习记录</p>\n<p>从图表来看我也是从 10 月份才开始真正沉下心来进入学习的状态的，之前一直不知道自己的方向是什么，IT 技术很广泛，什么都想了解一些，但又什么都不够精通。也是从 10 月份开始才逐渐发觉自己的兴趣在前端开发，找到了兴趣点也必然会投入时间学习</p>\n<h3 id=\"从折腾工具到关注产出\"><a href=\"#从折腾工具到关注产出\" class=\"headerlink\" title=\"从折腾工具到关注产出\"></a>从折腾工具到关注产出</h3><p>今年我尝试过许多生产力工具软件，单就笔记应用来说，我就尝试过 Typora、印象笔记、语雀、Notion、Wolai、Flomo、Obsidian 还有后来推出的众多双链笔记，有一些浅尝辄止，有一些也确实深度使用过。Notion 和 Flomo 都是我之前使用过的笔记，Notion 功能强大并且有很高的自由度，Flomo 的轻便简洁，我都在这两个应用留下了许多笔记。最后放弃的原因是因为两个应用都需要联网使用，并且数据保存在云端也让我非常不放心。现在逐渐把笔记迁移到了 Obsidian，通过阿里云的 OSS 作为图床，Typera 作功能补充。Obsidian 的更新频率很快，今年也推出了 IOS 端的应用，markdown 所见即所得的功能也在开发当中。</p>\n<p>在折腾工具的过程中我逐渐发现一个问题，到底是工具重要，还是如何使用工具重要，现在想想，其实最重要的，是<strong>通过生产力工具产出了什么东西</strong>。用过很多笔记应用，却没有形成自己的知识库体系，也没有内容输出，用过很多 GTD 或者待办事项应用，但该拖延的还是拖延，该关注任务的没有及时关注。所以当把关注点放在了最终产出物和积累上时，工具也没有那么重要了，只要顺手就行了。有了足够多的产出和积累，也就更清楚的了解自己需要的工具是什么了</p>\n<h2 id=\"关于生活\"><a href=\"#关于生活\" class=\"headerlink\" title=\"关于生活\"></a>关于生活</h2><h3 id=\"极简主义和焦虑\"><a href=\"#极简主义和焦虑\" class=\"headerlink\" title=\"极简主义和焦虑\"></a>极简主义和焦虑</h3><p>今年阅读了山下英子的《断舍离》，也逐渐了解了极简主义的生活方式，我也开始清理和自己多余的物品并逐渐添置新的物品，我也逐渐形成了自己的购物观念：</p>\n<ol>\n<li><strong>如无必要，勿增实体</strong></li>\n<li><strong>如有必要，尽量选择自己承受范围内做好的</strong></li>\n</ol>\n<p>第一条是为了避免自己购入不必要的东西，并且要及时清理掉不用的东西。而第二条我觉得才是重点，如果确实是必要的，选择承受范围内最好的可以避免不必要的折腾，就像去年购入的 AirPods Pro 耳机，确实很贵，但购买了这幅耳机之后，我再没有折腾过耳机了</p>\n<p>有时候在想自己为什么会产生焦虑，也许就是因为自己的欲望太多，难以填满，而极简主义的思维和生活方式，恰恰就是在对抗这种焦虑，降低自己的欲望，把重心放到重要的事情上面</p>\n<h2 id=\"未来规划\"><a href=\"#未来规划\" class=\"headerlink\" title=\"未来规划\"></a>未来规划</h2><p>新的一年，希望自己不再追求知识的广度，而是深入自己领域，追求知识的深度。另一方面希望完善自己的工作方法论和工作流程，积累自己的“知识资本”</p>\n"},{"title":"浅谈前端性能优化：节流和防抖","date":"2022-07-14T13:39:32.000Z","_content":"\n## 什么是节流和防抖\n\n防抖，顾名思义，就是防止异常情况下的抖动，假设你在给女朋友挑礼物的时候，生怕女朋友不满意，不断的在搜索框里改变着想要购买的礼物，这时候不但你很焦虑，搜索框也很焦虑，因为假设每改变一次内容都要像服务端请求一次的话，那压力得多大啊，所以搜索框得等你冷静下来的时候在向服务端请求。那怎么判断你冷静下来了呢？比较合适的方法是**通过时间判断**，比如你输入了一个商品的关键字，一段时间没有改变内容，搜索框就知道你冷静了，它就可以向服务端去请求需要搜索的内容了\n\n所以**防抖的含义，就是在触发高频操作的 n 秒内只执行一次，如果在 n 秒内又被触发，那么就重新计算时间**，等到 n 秒确定完成之后再触发\n\n说到节流，想象一下这样一个场景：M2 芯片的 Macbook Air 今晚 8 点开启预售，你从 7 点 55 分开始就准备好选商品 -> 加购物车 -> 下单付款一系列操作，你要不断的疯狂点击按钮才能进行到下一步操作，如果每点一次按钮都要向服务端请求一次，想象一下这会给服务端带来多大的压力。所以这个时候节流就派上用场了\n\n所以所谓**节流，就是节约流量，对于高频率的事件来说，在 n 秒内只会执行一次**。也就是通过每隔一段时间执行一次的方式，以此来达到节约流量的效果，从而稀释了高频率操作对于服务端带来的压力\n\n所以防抖和节流的区别也就很明显了\n\n- 防抖是**阻止**你的疯狂操作，在你冷静下来后的最后一次才执行\n- 节流是**稀释**你的疯狂操作，不论你有多疯狂，我就是冷静的按照计划执行\n\n## 如何实现节流和防抖\n\n下面看一下最基础的防抖、节流函数实现逻辑\n\n防抖函数实现逻辑主要是基于 `setTimeout` 来控制，如果在规定的 `delay` 时间内的话就清理掉 `timer`，否则就执行传入的函数\n\n```js\nfunction debounce(fn, delay = 500) {\n  let timer;\n\n  return function () {\n    // 用户输入时清理掉第一个 setTimeout\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      // 改变 this 指向为调用 debounce 所指的对象\n      fn.apply(this, arguments);\n    }, delay);\n  };\n}\n```\n\n节流函数虽然也使用了 `setTimeout` 函数，但主要的实现逻辑还是基于“锁”的方式实现的，在执行完函数的一段时间内，`flag` 会被锁住，直到时间结束后 `flag` 锁被打开才能进入下一次循环\n\n```js\nfunction throttle(fn, delay = 500) {\n  // 加锁，true 表示可以进入下一次循环，false 表示不可以\n  let flag = true;\n  return function () {\n    if (!flag) return;\n    flag = false;\n    setTimeout(() => {\n      fn.apply(this, arguments);\n      // 在 setTimeout 执行完毕后，把标记设置为 true，表示可以执行下一次循环\n      flag = true;\n    }, delay);\n  };\n}\n```\n\n## 还有没有更好的方式\n\n节流函数虽然可以实现稀释的效果，但总是等待一段时间在执行不仅用户体验差了一些，而且万一在间隔等待的时间有其他业务逻辑要实现，那不是就更麻烦了，所有就有了**利用防抖函数来优化节流函数**的方法，具体来说就是\n\n- 在规定的时间内，还是按照节流函数的逻辑按照间隔执行\n- 在规定的时间后，按照防抖函数的逻辑立即执行\n\n具体实现方式如下\n\n```js\nfunction throttle(fn, delay = 500) {\n  let flag = true;\n  let last = 0;\n\n  return function () {\n    let now = Number(new Date());\n\n    if (!flag) return;\n    flag = false;\n\n    // 优化逻辑：规定时间内等待执行，规定时间后立刻执行\n    if (now - last < delay) {\n      setTimeout(() => {\n        fn.apply(this, arguments);\n      }, delay);\n    } else {\n      fn.apply(this, arguments);\n    }\n\n    flag = true;\n    last = now;\n  };\n}\n```\n\n但是在实际开发过程中，直接使用比较成熟的轮子是比较好的方式，所以要做项目中使用防抖函数和节流函数的话，我会推荐使用 lodash。[lodash](https://www.lodashjs.com/) 一致性、模块化、高性能的 JavaScript 实用工具库，主要是封装了各种工具函数，让开发变的更简单高效，并且封装的工具函数相比自己手写的函数考虑了更多的边界问题，让我们的代码更加健壮\n\n如果要在项目使用的话，直接引入 es 版本的依赖就好（如果是使用 ts 的项目，最好再引入 type 依赖）\n\n```bash\npnpm i lodash-es\npnpm i -D @types/lodash-es\n```\n\n然后在项目中直接引入防抖函数(debounce)和节流函数()就可以直接使用了\n\n```ts\nimport { debounce, throttle } from \"lodash-es\";\n\ndebounce(() => {\n  console.log(\"debounce!\");\n}, 1000);\n\nthrottle(() => {\n  console.log(\"throttle!\");\n}, 1000);\n```\n\n既然用到了 lodash 的函数，那就顺便分析看看源码做了哪些方面的提升和优化，首先看看防抖函数（[源码地址](https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/debounce.js)）\n\n封装的防抖函数主要增加了 `cancel()` 方法来停止函数的调用，或者是通过 `flush()` 方法立即执行调用，还可以通过配置参数 `option` 来控制执行的时机，并且还加入了各种边界判断（比如判断传入的 `func` 参数是否是函数，处理 `requestAnimationFrame` 的情况等等），下面展示的一些核心的函数逻辑\n\n```js\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // 对于输入参数的判断和处理\n  if (typeof func !== \"function\") {\n    throw new TypeError(\"Expected a function\");\n  }\n  wait = +wait || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = \"maxWait\" in options;\n    maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : maxWait;\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n  }\n\n  // 改变 this 指向，执行 debounce 包裹的函数\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  // 开启 setTimeout\n  function startTimer(pendingFunc, wait) {\n    return setTimeout(pendingFunc, wait);\n  }\n\n  // 指定延迟前调用函数\n  function leadingEdge(time) {\n    lastInvokeTime = time;\n    timerId = startTimer(timerExpired, wait);\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  // 判断函数立即执行函数调用，如果等待时间 > 最大时间的情况下就立即执行\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  // 判断是否超过最大等待时间，超过就立即执行\n  function timerExpired() {\n    const time = Date.now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  // 指定延迟后调用函数\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        timerId = startTimer(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n    return result;\n  }\n  return debounced;\n}\n\nexport default debounce;\n```\n\n节流函数的实现就更简单了，主要就是基于对防抖函数 `debounce` 的封装，定义了一个最大延迟实践 `maxWait`（大佬们写的代码果然就是简洁），所以可以看到节流本质也是防抖函数的一个分支\n\n```js\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== \"function\") {\n    throw new TypeError(\"Expected a function\");\n  }\n  if (isObject(options)) {\n    leading = \"leading\" in options ? !!options.leading : leading;\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n```\n","source":"_posts/浅谈前端性能优化：节流和防抖.md","raw":"---\ntitle: 浅谈前端性能优化：节流和防抖\ndate: 2022-07-14 21:39:32\ncategories: 前端\ntags: 性能优化\n---\n\n## 什么是节流和防抖\n\n防抖，顾名思义，就是防止异常情况下的抖动，假设你在给女朋友挑礼物的时候，生怕女朋友不满意，不断的在搜索框里改变着想要购买的礼物，这时候不但你很焦虑，搜索框也很焦虑，因为假设每改变一次内容都要像服务端请求一次的话，那压力得多大啊，所以搜索框得等你冷静下来的时候在向服务端请求。那怎么判断你冷静下来了呢？比较合适的方法是**通过时间判断**，比如你输入了一个商品的关键字，一段时间没有改变内容，搜索框就知道你冷静了，它就可以向服务端去请求需要搜索的内容了\n\n所以**防抖的含义，就是在触发高频操作的 n 秒内只执行一次，如果在 n 秒内又被触发，那么就重新计算时间**，等到 n 秒确定完成之后再触发\n\n说到节流，想象一下这样一个场景：M2 芯片的 Macbook Air 今晚 8 点开启预售，你从 7 点 55 分开始就准备好选商品 -> 加购物车 -> 下单付款一系列操作，你要不断的疯狂点击按钮才能进行到下一步操作，如果每点一次按钮都要向服务端请求一次，想象一下这会给服务端带来多大的压力。所以这个时候节流就派上用场了\n\n所以所谓**节流，就是节约流量，对于高频率的事件来说，在 n 秒内只会执行一次**。也就是通过每隔一段时间执行一次的方式，以此来达到节约流量的效果，从而稀释了高频率操作对于服务端带来的压力\n\n所以防抖和节流的区别也就很明显了\n\n- 防抖是**阻止**你的疯狂操作，在你冷静下来后的最后一次才执行\n- 节流是**稀释**你的疯狂操作，不论你有多疯狂，我就是冷静的按照计划执行\n\n## 如何实现节流和防抖\n\n下面看一下最基础的防抖、节流函数实现逻辑\n\n防抖函数实现逻辑主要是基于 `setTimeout` 来控制，如果在规定的 `delay` 时间内的话就清理掉 `timer`，否则就执行传入的函数\n\n```js\nfunction debounce(fn, delay = 500) {\n  let timer;\n\n  return function () {\n    // 用户输入时清理掉第一个 setTimeout\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      // 改变 this 指向为调用 debounce 所指的对象\n      fn.apply(this, arguments);\n    }, delay);\n  };\n}\n```\n\n节流函数虽然也使用了 `setTimeout` 函数，但主要的实现逻辑还是基于“锁”的方式实现的，在执行完函数的一段时间内，`flag` 会被锁住，直到时间结束后 `flag` 锁被打开才能进入下一次循环\n\n```js\nfunction throttle(fn, delay = 500) {\n  // 加锁，true 表示可以进入下一次循环，false 表示不可以\n  let flag = true;\n  return function () {\n    if (!flag) return;\n    flag = false;\n    setTimeout(() => {\n      fn.apply(this, arguments);\n      // 在 setTimeout 执行完毕后，把标记设置为 true，表示可以执行下一次循环\n      flag = true;\n    }, delay);\n  };\n}\n```\n\n## 还有没有更好的方式\n\n节流函数虽然可以实现稀释的效果，但总是等待一段时间在执行不仅用户体验差了一些，而且万一在间隔等待的时间有其他业务逻辑要实现，那不是就更麻烦了，所有就有了**利用防抖函数来优化节流函数**的方法，具体来说就是\n\n- 在规定的时间内，还是按照节流函数的逻辑按照间隔执行\n- 在规定的时间后，按照防抖函数的逻辑立即执行\n\n具体实现方式如下\n\n```js\nfunction throttle(fn, delay = 500) {\n  let flag = true;\n  let last = 0;\n\n  return function () {\n    let now = Number(new Date());\n\n    if (!flag) return;\n    flag = false;\n\n    // 优化逻辑：规定时间内等待执行，规定时间后立刻执行\n    if (now - last < delay) {\n      setTimeout(() => {\n        fn.apply(this, arguments);\n      }, delay);\n    } else {\n      fn.apply(this, arguments);\n    }\n\n    flag = true;\n    last = now;\n  };\n}\n```\n\n但是在实际开发过程中，直接使用比较成熟的轮子是比较好的方式，所以要做项目中使用防抖函数和节流函数的话，我会推荐使用 lodash。[lodash](https://www.lodashjs.com/) 一致性、模块化、高性能的 JavaScript 实用工具库，主要是封装了各种工具函数，让开发变的更简单高效，并且封装的工具函数相比自己手写的函数考虑了更多的边界问题，让我们的代码更加健壮\n\n如果要在项目使用的话，直接引入 es 版本的依赖就好（如果是使用 ts 的项目，最好再引入 type 依赖）\n\n```bash\npnpm i lodash-es\npnpm i -D @types/lodash-es\n```\n\n然后在项目中直接引入防抖函数(debounce)和节流函数()就可以直接使用了\n\n```ts\nimport { debounce, throttle } from \"lodash-es\";\n\ndebounce(() => {\n  console.log(\"debounce!\");\n}, 1000);\n\nthrottle(() => {\n  console.log(\"throttle!\");\n}, 1000);\n```\n\n既然用到了 lodash 的函数，那就顺便分析看看源码做了哪些方面的提升和优化，首先看看防抖函数（[源码地址](https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/debounce.js)）\n\n封装的防抖函数主要增加了 `cancel()` 方法来停止函数的调用，或者是通过 `flush()` 方法立即执行调用，还可以通过配置参数 `option` 来控制执行的时机，并且还加入了各种边界判断（比如判断传入的 `func` 参数是否是函数，处理 `requestAnimationFrame` 的情况等等），下面展示的一些核心的函数逻辑\n\n```js\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // 对于输入参数的判断和处理\n  if (typeof func !== \"function\") {\n    throw new TypeError(\"Expected a function\");\n  }\n  wait = +wait || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = \"maxWait\" in options;\n    maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : maxWait;\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n  }\n\n  // 改变 this 指向，执行 debounce 包裹的函数\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  // 开启 setTimeout\n  function startTimer(pendingFunc, wait) {\n    return setTimeout(pendingFunc, wait);\n  }\n\n  // 指定延迟前调用函数\n  function leadingEdge(time) {\n    lastInvokeTime = time;\n    timerId = startTimer(timerExpired, wait);\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  // 判断函数立即执行函数调用，如果等待时间 > 最大时间的情况下就立即执行\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  // 判断是否超过最大等待时间，超过就立即执行\n  function timerExpired() {\n    const time = Date.now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  // 指定延迟后调用函数\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        timerId = startTimer(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n    return result;\n  }\n  return debounced;\n}\n\nexport default debounce;\n```\n\n节流函数的实现就更简单了，主要就是基于对防抖函数 `debounce` 的封装，定义了一个最大延迟实践 `maxWait`（大佬们写的代码果然就是简洁），所以可以看到节流本质也是防抖函数的一个分支\n\n```js\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== \"function\") {\n    throw new TypeError(\"Expected a function\");\n  }\n  if (isObject(options)) {\n    leading = \"leading\" in options ? !!options.leading : leading;\n    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n```\n","slug":"浅谈前端性能优化：节流和防抖","published":1,"updated":"2022-07-30T09:04:27.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl67regyt000ccitohx27hiuk","content":"<h2 id=\"什么是节流和防抖\"><a href=\"#什么是节流和防抖\" class=\"headerlink\" title=\"什么是节流和防抖\"></a>什么是节流和防抖</h2><p>防抖，顾名思义，就是防止异常情况下的抖动，假设你在给女朋友挑礼物的时候，生怕女朋友不满意，不断的在搜索框里改变着想要购买的礼物，这时候不但你很焦虑，搜索框也很焦虑，因为假设每改变一次内容都要像服务端请求一次的话，那压力得多大啊，所以搜索框得等你冷静下来的时候在向服务端请求。那怎么判断你冷静下来了呢？比较合适的方法是<strong>通过时间判断</strong>，比如你输入了一个商品的关键字，一段时间没有改变内容，搜索框就知道你冷静了，它就可以向服务端去请求需要搜索的内容了</p>\n<p>所以<strong>防抖的含义，就是在触发高频操作的 n 秒内只执行一次，如果在 n 秒内又被触发，那么就重新计算时间</strong>，等到 n 秒确定完成之后再触发</p>\n<p>说到节流，想象一下这样一个场景：M2 芯片的 Macbook Air 今晚 8 点开启预售，你从 7 点 55 分开始就准备好选商品 -&gt; 加购物车 -&gt; 下单付款一系列操作，你要不断的疯狂点击按钮才能进行到下一步操作，如果每点一次按钮都要向服务端请求一次，想象一下这会给服务端带来多大的压力。所以这个时候节流就派上用场了</p>\n<p>所以所谓<strong>节流，就是节约流量，对于高频率的事件来说，在 n 秒内只会执行一次</strong>。也就是通过每隔一段时间执行一次的方式，以此来达到节约流量的效果，从而稀释了高频率操作对于服务端带来的压力</p>\n<p>所以防抖和节流的区别也就很明显了</p>\n<ul>\n<li>防抖是<strong>阻止</strong>你的疯狂操作，在你冷静下来后的最后一次才执行</li>\n<li>节流是<strong>稀释</strong>你的疯狂操作，不论你有多疯狂，我就是冷静的按照计划执行</li>\n</ul>\n<h2 id=\"如何实现节流和防抖\"><a href=\"#如何实现节流和防抖\" class=\"headerlink\" title=\"如何实现节流和防抖\"></a>如何实现节流和防抖</h2><p>下面看一下最基础的防抖、节流函数实现逻辑</p>\n<p>防抖函数实现逻辑主要是基于 <code>setTimeout</code> 来控制，如果在规定的 <code>delay</code> 时间内的话就清理掉 <code>timer</code>，否则就执行传入的函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 用户输入时清理掉第一个 setTimeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 改变 this 指向为调用 debounce 所指的对象</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>节流函数虽然也使用了 <code>setTimeout</code> 函数，但主要的实现逻辑还是基于“锁”的方式实现的，在执行完函数的一段时间内，<code>flag</code> 会被锁住，直到时间结束后 <code>flag</code> 锁被打开才能进入下一次循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 加锁，true 表示可以进入下一次循环，false 表示不可以</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 在 setTimeout 执行完毕后，把标记设置为 true，表示可以执行下一次循环</span>\n      flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"还有没有更好的方式\"><a href=\"#还有没有更好的方式\" class=\"headerlink\" title=\"还有没有更好的方式\"></a>还有没有更好的方式</h2><p>节流函数虽然可以实现稀释的效果，但总是等待一段时间在执行不仅用户体验差了一些，而且万一在间隔等待的时间有其他业务逻辑要实现，那不是就更麻烦了，所有就有了<strong>利用防抖函数来优化节流函数</strong>的方法，具体来说就是</p>\n<ul>\n<li>在规定的时间内，还是按照节流函数的逻辑按照间隔执行</li>\n<li>在规定的时间后，按照防抖函数的逻辑立即执行</li>\n</ul>\n<p>具体实现方式如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 优化逻辑：规定时间内等待执行，规定时间后立刻执行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> last <span class=\"token operator\">&lt;</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    last <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在实际开发过程中，直接使用比较成熟的轮子是比较好的方式，所以要做项目中使用防抖函数和节流函数的话，我会推荐使用 lodash。<a class=\"link\"   href=\"https://www.lodashjs.com/\" >lodash<i class=\"fas fa-external-link-alt\"></i></a> 一致性、模块化、高性能的 JavaScript 实用工具库，主要是封装了各种工具函数，让开发变的更简单高效，并且封装的工具函数相比自己手写的函数考虑了更多的边界问题，让我们的代码更加健壮</p>\n<p>如果要在项目使用的话，直接引入 es 版本的依赖就好（如果是使用 ts 的项目，最好再引入 type 依赖）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i lodash-es\n<span class=\"token function\">pnpm</span> i -D @types/lodash-es<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后在项目中直接引入防抖函数(debounce)和节流函数()就可以直接使用了</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> debounce<span class=\"token punctuation\">,</span> throttle <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash-es\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debounce!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throttle!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>既然用到了 lodash 的函数，那就顺便分析看看源码做了哪些方面的提升和优化，首先看看防抖函数（<a class=\"link\"   href=\"https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/debounce.js\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p>封装的防抖函数主要增加了 <code>cancel()</code> 方法来停止函数的调用，或者是通过 <code>flush()</code> 方法立即执行调用，还可以通过配置参数 <code>option</code> 来控制执行的时机，并且还加入了各种边界判断（比如判断传入的 <code>func</code> 参数是否是函数，处理 <code>requestAnimationFrame</code> 的情况等等），下面展示的一些核心的函数逻辑</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> lastArgs<span class=\"token punctuation\">,</span> lastThis<span class=\"token punctuation\">,</span> maxWait<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> timerId<span class=\"token punctuation\">,</span> lastCallTime<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> lastInvokeTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> leading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> maxing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> trailing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 对于输入参数的判断和处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> func <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  wait <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>wait <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    leading <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>leading<span class=\"token punctuation\">;</span>\n    maxing <span class=\"token operator\">=</span> <span class=\"token string\">\"maxWait\"</span> <span class=\"token keyword\">in</span> options<span class=\"token punctuation\">;</span>\n    maxWait <span class=\"token operator\">=</span> maxing <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>options<span class=\"token punctuation\">.</span>maxWait <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> maxWait<span class=\"token punctuation\">;</span>\n    trailing <span class=\"token operator\">=</span> <span class=\"token string\">\"trailing\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">:</span> trailing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 改变 this 指向，执行 debounce 包裹的函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> lastArgs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisArg <span class=\"token operator\">=</span> lastThis<span class=\"token punctuation\">;</span>\n\n    lastArgs <span class=\"token operator\">=</span> lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    lastInvokeTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 开启 setTimeout</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pendingFunc<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>pendingFunc<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 指定延迟前调用函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">leadingEdge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    lastInvokeTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> leading <span class=\"token operator\">?</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">remainingWait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastCall <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastCallTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastInvoke <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastInvokeTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeWaiting <span class=\"token operator\">=</span> wait <span class=\"token operator\">-</span> timeSinceLastCall<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> maxing\n      <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>timeWaiting<span class=\"token punctuation\">,</span> maxWait <span class=\"token operator\">-</span> timeSinceLastInvoke<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> timeWaiting<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 判断函数立即执行函数调用，如果等待时间 > 最大时间的情况下就立即执行</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastCall <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastCallTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastInvoke <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastInvokeTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      lastCallTime <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span>\n      timeSinceLastCall <span class=\"token operator\">>=</span> wait <span class=\"token operator\">||</span>\n      timeSinceLastCall <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>maxing <span class=\"token operator\">&amp;&amp;</span> timeSinceLastInvoke <span class=\"token operator\">>=</span> maxWait<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 判断是否超过最大等待时间，超过就立即执行</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">timerExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">trailingEdge</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> <span class=\"token function\">remainingWait</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 指定延迟后调用函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">trailingEdge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trailing <span class=\"token operator\">&amp;&amp;</span> lastArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    lastArgs <span class=\"token operator\">=</span> lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isInvoking <span class=\"token operator\">=</span> <span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lastArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n    lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    lastCallTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvoking<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timerId <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">leadingEdge</span><span class=\"token punctuation\">(</span>lastCallTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>lastCallTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timerId <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> debounced<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> debounce<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>节流函数的实现就更简单了，主要就是基于对防抖函数 <code>debounce</code> 的封装，定义了一个最大延迟实践 <code>maxWait</code>（大佬们写的代码果然就是简洁），所以可以看到节流本质也是防抖函数的一个分支</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> leading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> trailing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> func <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    leading <span class=\"token operator\">=</span> <span class=\"token string\">\"leading\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">:</span> leading<span class=\"token punctuation\">;</span>\n    trailing <span class=\"token operator\">=</span> <span class=\"token string\">\"trailing\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">:</span> trailing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    leading<span class=\"token punctuation\">,</span>\n    trailing<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxWait</span><span class=\"token operator\">:</span> wait<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> throttle<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是节流和防抖\"><a href=\"#什么是节流和防抖\" class=\"headerlink\" title=\"什么是节流和防抖\"></a>什么是节流和防抖</h2><p>防抖，顾名思义，就是防止异常情况下的抖动，假设你在给女朋友挑礼物的时候，生怕女朋友不满意，不断的在搜索框里改变着想要购买的礼物，这时候不但你很焦虑，搜索框也很焦虑，因为假设每改变一次内容都要像服务端请求一次的话，那压力得多大啊，所以搜索框得等你冷静下来的时候在向服务端请求。那怎么判断你冷静下来了呢？比较合适的方法是<strong>通过时间判断</strong>，比如你输入了一个商品的关键字，一段时间没有改变内容，搜索框就知道你冷静了，它就可以向服务端去请求需要搜索的内容了</p>\n<p>所以<strong>防抖的含义，就是在触发高频操作的 n 秒内只执行一次，如果在 n 秒内又被触发，那么就重新计算时间</strong>，等到 n 秒确定完成之后再触发</p>\n<p>说到节流，想象一下这样一个场景：M2 芯片的 Macbook Air 今晚 8 点开启预售，你从 7 点 55 分开始就准备好选商品 -&gt; 加购物车 -&gt; 下单付款一系列操作，你要不断的疯狂点击按钮才能进行到下一步操作，如果每点一次按钮都要向服务端请求一次，想象一下这会给服务端带来多大的压力。所以这个时候节流就派上用场了</p>\n<p>所以所谓<strong>节流，就是节约流量，对于高频率的事件来说，在 n 秒内只会执行一次</strong>。也就是通过每隔一段时间执行一次的方式，以此来达到节约流量的效果，从而稀释了高频率操作对于服务端带来的压力</p>\n<p>所以防抖和节流的区别也就很明显了</p>\n<ul>\n<li>防抖是<strong>阻止</strong>你的疯狂操作，在你冷静下来后的最后一次才执行</li>\n<li>节流是<strong>稀释</strong>你的疯狂操作，不论你有多疯狂，我就是冷静的按照计划执行</li>\n</ul>\n<h2 id=\"如何实现节流和防抖\"><a href=\"#如何实现节流和防抖\" class=\"headerlink\" title=\"如何实现节流和防抖\"></a>如何实现节流和防抖</h2><p>下面看一下最基础的防抖、节流函数实现逻辑</p>\n<p>防抖函数实现逻辑主要是基于 <code>setTimeout</code> 来控制，如果在规定的 <code>delay</code> 时间内的话就清理掉 <code>timer</code>，否则就执行传入的函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 用户输入时清理掉第一个 setTimeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 改变 this 指向为调用 debounce 所指的对象</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>节流函数虽然也使用了 <code>setTimeout</code> 函数，但主要的实现逻辑还是基于“锁”的方式实现的，在执行完函数的一段时间内，<code>flag</code> 会被锁住，直到时间结束后 <code>flag</code> 锁被打开才能进入下一次循环</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 加锁，true 表示可以进入下一次循环，false 表示不可以</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 在 setTimeout 执行完毕后，把标记设置为 true，表示可以执行下一次循环</span>\n      flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"还有没有更好的方式\"><a href=\"#还有没有更好的方式\" class=\"headerlink\" title=\"还有没有更好的方式\"></a>还有没有更好的方式</h2><p>节流函数虽然可以实现稀释的效果，但总是等待一段时间在执行不仅用户体验差了一些，而且万一在间隔等待的时间有其他业务逻辑要实现，那不是就更麻烦了，所有就有了<strong>利用防抖函数来优化节流函数</strong>的方法，具体来说就是</p>\n<ul>\n<li>在规定的时间内，还是按照节流函数的逻辑按照间隔执行</li>\n<li>在规定的时间后，按照防抖函数的逻辑立即执行</li>\n</ul>\n<p>具体实现方式如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 优化逻辑：规定时间内等待执行，规定时间后立刻执行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> last <span class=\"token operator\">&lt;</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    last <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是在实际开发过程中，直接使用比较成熟的轮子是比较好的方式，所以要做项目中使用防抖函数和节流函数的话，我会推荐使用 lodash。<a class=\"link\"   href=\"https://www.lodashjs.com/\" >lodash<i class=\"fas fa-external-link-alt\"></i></a> 一致性、模块化、高性能的 JavaScript 实用工具库，主要是封装了各种工具函数，让开发变的更简单高效，并且封装的工具函数相比自己手写的函数考虑了更多的边界问题，让我们的代码更加健壮</p>\n<p>如果要在项目使用的话，直接引入 es 版本的依赖就好（如果是使用 ts 的项目，最好再引入 type 依赖）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">pnpm</span> i lodash-es\n<span class=\"token function\">pnpm</span> i -D @types/lodash-es<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后在项目中直接引入防抖函数(debounce)和节流函数()就可以直接使用了</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> debounce<span class=\"token punctuation\">,</span> throttle <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash-es\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debounce!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"throttle!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>既然用到了 lodash 的函数，那就顺便分析看看源码做了哪些方面的提升和优化，首先看看防抖函数（<a class=\"link\"   href=\"https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/debounce.js\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p>封装的防抖函数主要增加了 <code>cancel()</code> 方法来停止函数的调用，或者是通过 <code>flush()</code> 方法立即执行调用，还可以通过配置参数 <code>option</code> 来控制执行的时机，并且还加入了各种边界判断（比如判断传入的 <code>func</code> 参数是否是函数，处理 <code>requestAnimationFrame</code> 的情况等等），下面展示的一些核心的函数逻辑</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> lastArgs<span class=\"token punctuation\">,</span> lastThis<span class=\"token punctuation\">,</span> maxWait<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> timerId<span class=\"token punctuation\">,</span> lastCallTime<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> lastInvokeTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> leading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> maxing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> trailing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 对于输入参数的判断和处理</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> func <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  wait <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>wait <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    leading <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>leading<span class=\"token punctuation\">;</span>\n    maxing <span class=\"token operator\">=</span> <span class=\"token string\">\"maxWait\"</span> <span class=\"token keyword\">in</span> options<span class=\"token punctuation\">;</span>\n    maxWait <span class=\"token operator\">=</span> maxing <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>options<span class=\"token punctuation\">.</span>maxWait <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> maxWait<span class=\"token punctuation\">;</span>\n    trailing <span class=\"token operator\">=</span> <span class=\"token string\">\"trailing\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">:</span> trailing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 改变 this 指向，执行 debounce 包裹的函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> lastArgs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> thisArg <span class=\"token operator\">=</span> lastThis<span class=\"token punctuation\">;</span>\n\n    lastArgs <span class=\"token operator\">=</span> lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    lastInvokeTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 开启 setTimeout</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pendingFunc<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>pendingFunc<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 指定延迟前调用函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">leadingEdge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    lastInvokeTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> leading <span class=\"token operator\">?</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">remainingWait</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastCall <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastCallTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastInvoke <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastInvokeTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeWaiting <span class=\"token operator\">=</span> wait <span class=\"token operator\">-</span> timeSinceLastCall<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> maxing\n      <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>timeWaiting<span class=\"token punctuation\">,</span> maxWait <span class=\"token operator\">-</span> timeSinceLastInvoke<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> timeWaiting<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 判断函数立即执行函数调用，如果等待时间 > 最大时间的情况下就立即执行</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastCall <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastCallTime<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> timeSinceLastInvoke <span class=\"token operator\">=</span> time <span class=\"token operator\">-</span> lastInvokeTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      lastCallTime <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span>\n      timeSinceLastCall <span class=\"token operator\">>=</span> wait <span class=\"token operator\">||</span>\n      timeSinceLastCall <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n      <span class=\"token punctuation\">(</span>maxing <span class=\"token operator\">&amp;&amp;</span> timeSinceLastInvoke <span class=\"token operator\">>=</span> maxWait<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 判断是否超过最大等待时间，超过就立即执行</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">timerExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">trailingEdge</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> <span class=\"token function\">remainingWait</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 指定延迟后调用函数</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">trailingEdge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    timerId <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trailing <span class=\"token operator\">&amp;&amp;</span> lastArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    lastArgs <span class=\"token operator\">=</span> lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isInvoking <span class=\"token operator\">=</span> <span class=\"token function\">shouldInvoke</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    lastArgs <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n    lastThis <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    lastCallTime <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isInvoking<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timerId <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">leadingEdge</span><span class=\"token punctuation\">(</span>lastCallTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">invokeFunc</span><span class=\"token punctuation\">(</span>lastCallTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timerId <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      timerId <span class=\"token operator\">=</span> <span class=\"token function\">startTimer</span><span class=\"token punctuation\">(</span>timerExpired<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> debounced<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> debounce<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>节流函数的实现就更简单了，主要就是基于对防抖函数 <code>debounce</code> 的封装，定义了一个最大延迟实践 <code>maxWait</code>（大佬们写的代码果然就是简洁），所以可以看到节流本质也是防抖函数的一个分支</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> leading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> trailing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> func <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expected a function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    leading <span class=\"token operator\">=</span> <span class=\"token string\">\"leading\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>leading <span class=\"token operator\">:</span> leading<span class=\"token punctuation\">;</span>\n    trailing <span class=\"token operator\">=</span> <span class=\"token string\">\"trailing\"</span> <span class=\"token keyword\">in</span> options <span class=\"token operator\">?</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>trailing <span class=\"token operator\">:</span> trailing<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    leading<span class=\"token punctuation\">,</span>\n    trailing<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxWait</span><span class=\"token operator\">:</span> wait<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> throttle<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Vue 中优雅的捕获 Promise 异常","date":"2022-08-07T04:54:00.000Z","_content":"\n最近接手的几个老的 Vue 项目对于请求都没有异常处理，研究了一些解决方案，正好借机梳理一下如何在 Vue 中更优雅的捕获 Promise 异常\n\n## 常规的异常捕获方式\n\n在 Promise 提供了一个 `.catch` 方法用来捕获异常，假设有很多异步请求，通常会把 `.catch` 方法放在链式调用的最末尾。正常情况下末尾的 `.catch` 不会被触发，但当前面的任何一个 Promise rejected 之后，`.catch` 就可以捕获到异常\n\n```js\npromiseFunction1({\n  year: unref(year),\n})\n  .then((res) => {\n    if (res.status === 200) {\n      return promiseFunction2(res.data?.name || \"\");\n    }\n  })\n  .then((res) => {\n    if (res.status === 200) {\n      const getUserInfo = userInfoResult.data;\n      // ... 具体操作\n    }\n  })\n  // 异常捕获\n  .catch((error) => console.error(error));\n```\n\n如果使用 Promise 的语法糖 async / await 的话，可以使用更符合直觉的 `try...catch` 捕获异常，上面这个请求例子就可以修改为\n\n```js\nasync function handleUserInfo() {\n  try {\n    const userResult = await promiseFunction1({ year: unref(year) });\n    if (userResult.status !== 200) return;\n\n    const userInfoResult = await promiseFunction2(res.data?.name || \"\");\n    if (userInfoResult.status !== 200) return;\n\n    getUserInfo = userInfoResult.data;\n    // ... 具体操作\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n不管是 `.then` 方法还是 `try...catch` 都需要增加一些代码操作，最重要的是可能会忘记捕获异常，所以下面介绍两个更好一些的解决方案\n\n## 好一些的方式：await-to-js\n\n[await-to-js](https://github.com/scopsy/await-to-js) 是一个大佬对 async / await 返回内容进行的一层封装，在不用 `try...catch` 的方式下也能进行异常捕获\n\n在使用前需要先引入这个依赖：`npm i await-to-js`，下面我们来改写简化一下之前的异常捕获方式\n\n```js\nimport to from \"await-to-js\";\n\nasync function handleUserInfo() {\n  const [userError, userResult] = await promiseFunction1({ year: unref(year) });\n  if (userResult.status !== 200) return;\n\n  const [userInfoError, userInfoResult] = await promiseFunction2(\n    res.data?.name || \"\"\n  );\n  if (userInfoResult.status !== 200) return;\n\n  getUserInfo = userInfoResult.data;\n  // ... 具体操作\n}\n```\n\nawait-to-js 的实现也就短短几行代码，本质就是对 Promise 的 `.then` 和 `.catch` 返回结果进行组合，然后整体作为一个 Promise 再返回出去\n\n```ts\nexport function to<T, U = Error>(\n  promise: Promise<T>,\n  errorExt?: object // 传递给 err 对象的附加信息\n): Promise<[U, undefined] | [null, T]> {\n  return promise\n    .then<[null, T]>((data: T) => [null, data])\n    .catch<[U, undefined]>((err: U) => {\n      if (errorExt) {\n        const parsedError = Object.assign({}, err, errorExt);\n        return [parsedError, undefined];\n      }\n\n      return [err, undefined];\n    });\n}\n\nexport default to;\n```\n\n虽然 await-to-js 简化了代码，但还是需要引入依赖，对请求进行一层包裹，还是稍微麻烦了一点，如果我们对异常处理没有特殊处理的需要，仅仅只是捕获并且抛出，为了追求更简洁的代码；或者项目中有非常多的地方没有异常捕获，需要一个一个的手工增加非常麻烦，针对这两种情况，还有没有更好的办法呢？\n\n## 更好的方式：全局捕获\n\n在 Vue2 的全局配置中提供了一个 `errorHandler` 钩子可以用于捕获全局异常，但是最低版本要求 2.2.0+\n\n`errorHandler` 第一个参数 `err` 是具体的错误信息，第二个参数 `vm` 是 Vue 组件信息，第三个参数 `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子。一般为了捕获 Vue 特定的 `info` 信息，在内部处理时还会加上一层 `nextTick` ，确保捕获的是 DOM 渲染完成之后的信息。另外最好在根据不同环境配置判断是否需要捕获异常，增加程序的灵活性\n\n```js\n// errorHandler 使用示例\nimport Vue from \"vue\";\n\n// 配置项形式：'development' | ['development', 'production']\nconst { errorLog: needErrorLog } = settings;\n\n// 根据配置判断什么环境下需要捕获异常\nfunction checkNeedErrorLog() {\n  const env = process.env.NODE_ENV;\n\n  if (isString(needErrorLog)) {\n    return env === needErrorLog;\n  }\n  if (isArray(needErrorLog)) {\n    return needErrorLog.includes(env);\n  }\n\n  return false;\n}\n\n// 全局异常捕获\nif (checkNeedErrorLog()) {\n  Vue.config.errorHandler = function (err, vm, info) {\n    Vue.nextTick(() => {\n      console.error(`[${projectName}]: ${err}。`, `Vue info: ${info}`, vm);\n    });\n  };\n}\n```\n\n根据[官网的描述](https://cn.vuejs.org/v2/api/#errorHandler)，不同的 Vue 版本捕获的信息不同，所以建议最好是更新 Vue 2.6.0 以上的版本，这样就可以全局捕获到 Promise 和 async / await 抛出的异常了，\n\n> 从 2.2.0 起，`errorHandler` 钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 `undefined` 时，被捕获的错误会通过 `console.error` 输出而避免应用崩溃\n>\n> 从 2.4.0 起，`errorHandler` 钩子也会捕获 Vue 自定义事件处理函数内部的错误\n>\n> 从 2.6.0 起，`errorHandler` 钩子也会捕获 `v-on` DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理\n\n在 Vue3 中，除了提供 `errorHandler` 钩子外，还提供了 `warnHandler` 钩子，两个钩子的用法相同，区别是是 `warnHandler` 只在开发环境生效，生产环境会被忽略\n\n```js\napp.config.warnHandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n};\n```\n","source":"_posts/Vue 中优雅的捕获 Promise 异常.md","raw":"---\ntitle: Vue 中优雅的捕获 Promise 异常\ndate: 2022-08-07 12:54:00\ncategories: 前端\ntags: vue\n---\n\n最近接手的几个老的 Vue 项目对于请求都没有异常处理，研究了一些解决方案，正好借机梳理一下如何在 Vue 中更优雅的捕获 Promise 异常\n\n## 常规的异常捕获方式\n\n在 Promise 提供了一个 `.catch` 方法用来捕获异常，假设有很多异步请求，通常会把 `.catch` 方法放在链式调用的最末尾。正常情况下末尾的 `.catch` 不会被触发，但当前面的任何一个 Promise rejected 之后，`.catch` 就可以捕获到异常\n\n```js\npromiseFunction1({\n  year: unref(year),\n})\n  .then((res) => {\n    if (res.status === 200) {\n      return promiseFunction2(res.data?.name || \"\");\n    }\n  })\n  .then((res) => {\n    if (res.status === 200) {\n      const getUserInfo = userInfoResult.data;\n      // ... 具体操作\n    }\n  })\n  // 异常捕获\n  .catch((error) => console.error(error));\n```\n\n如果使用 Promise 的语法糖 async / await 的话，可以使用更符合直觉的 `try...catch` 捕获异常，上面这个请求例子就可以修改为\n\n```js\nasync function handleUserInfo() {\n  try {\n    const userResult = await promiseFunction1({ year: unref(year) });\n    if (userResult.status !== 200) return;\n\n    const userInfoResult = await promiseFunction2(res.data?.name || \"\");\n    if (userInfoResult.status !== 200) return;\n\n    getUserInfo = userInfoResult.data;\n    // ... 具体操作\n  } catch (error) {\n    console.error(error);\n  }\n}\n```\n\n不管是 `.then` 方法还是 `try...catch` 都需要增加一些代码操作，最重要的是可能会忘记捕获异常，所以下面介绍两个更好一些的解决方案\n\n## 好一些的方式：await-to-js\n\n[await-to-js](https://github.com/scopsy/await-to-js) 是一个大佬对 async / await 返回内容进行的一层封装，在不用 `try...catch` 的方式下也能进行异常捕获\n\n在使用前需要先引入这个依赖：`npm i await-to-js`，下面我们来改写简化一下之前的异常捕获方式\n\n```js\nimport to from \"await-to-js\";\n\nasync function handleUserInfo() {\n  const [userError, userResult] = await promiseFunction1({ year: unref(year) });\n  if (userResult.status !== 200) return;\n\n  const [userInfoError, userInfoResult] = await promiseFunction2(\n    res.data?.name || \"\"\n  );\n  if (userInfoResult.status !== 200) return;\n\n  getUserInfo = userInfoResult.data;\n  // ... 具体操作\n}\n```\n\nawait-to-js 的实现也就短短几行代码，本质就是对 Promise 的 `.then` 和 `.catch` 返回结果进行组合，然后整体作为一个 Promise 再返回出去\n\n```ts\nexport function to<T, U = Error>(\n  promise: Promise<T>,\n  errorExt?: object // 传递给 err 对象的附加信息\n): Promise<[U, undefined] | [null, T]> {\n  return promise\n    .then<[null, T]>((data: T) => [null, data])\n    .catch<[U, undefined]>((err: U) => {\n      if (errorExt) {\n        const parsedError = Object.assign({}, err, errorExt);\n        return [parsedError, undefined];\n      }\n\n      return [err, undefined];\n    });\n}\n\nexport default to;\n```\n\n虽然 await-to-js 简化了代码，但还是需要引入依赖，对请求进行一层包裹，还是稍微麻烦了一点，如果我们对异常处理没有特殊处理的需要，仅仅只是捕获并且抛出，为了追求更简洁的代码；或者项目中有非常多的地方没有异常捕获，需要一个一个的手工增加非常麻烦，针对这两种情况，还有没有更好的办法呢？\n\n## 更好的方式：全局捕获\n\n在 Vue2 的全局配置中提供了一个 `errorHandler` 钩子可以用于捕获全局异常，但是最低版本要求 2.2.0+\n\n`errorHandler` 第一个参数 `err` 是具体的错误信息，第二个参数 `vm` 是 Vue 组件信息，第三个参数 `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子。一般为了捕获 Vue 特定的 `info` 信息，在内部处理时还会加上一层 `nextTick` ，确保捕获的是 DOM 渲染完成之后的信息。另外最好在根据不同环境配置判断是否需要捕获异常，增加程序的灵活性\n\n```js\n// errorHandler 使用示例\nimport Vue from \"vue\";\n\n// 配置项形式：'development' | ['development', 'production']\nconst { errorLog: needErrorLog } = settings;\n\n// 根据配置判断什么环境下需要捕获异常\nfunction checkNeedErrorLog() {\n  const env = process.env.NODE_ENV;\n\n  if (isString(needErrorLog)) {\n    return env === needErrorLog;\n  }\n  if (isArray(needErrorLog)) {\n    return needErrorLog.includes(env);\n  }\n\n  return false;\n}\n\n// 全局异常捕获\nif (checkNeedErrorLog()) {\n  Vue.config.errorHandler = function (err, vm, info) {\n    Vue.nextTick(() => {\n      console.error(`[${projectName}]: ${err}。`, `Vue info: ${info}`, vm);\n    });\n  };\n}\n```\n\n根据[官网的描述](https://cn.vuejs.org/v2/api/#errorHandler)，不同的 Vue 版本捕获的信息不同，所以建议最好是更新 Vue 2.6.0 以上的版本，这样就可以全局捕获到 Promise 和 async / await 抛出的异常了，\n\n> 从 2.2.0 起，`errorHandler` 钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 `undefined` 时，被捕获的错误会通过 `console.error` 输出而避免应用崩溃\n>\n> 从 2.4.0 起，`errorHandler` 钩子也会捕获 Vue 自定义事件处理函数内部的错误\n>\n> 从 2.6.0 起，`errorHandler` 钩子也会捕获 `v-on` DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理\n\n在 Vue3 中，除了提供 `errorHandler` 钩子外，还提供了 `warnHandler` 钩子，两个钩子的用法相同，区别是是 `warnHandler` 只在开发环境生效，生产环境会被忽略\n\n```js\napp.config.warnHandler = function (msg, vm, trace) {\n  // `trace` 是组件的继承关系追踪\n};\n```\n","slug":"Vue 中优雅的捕获 Promise 异常","published":1,"updated":"2022-08-07T04:54:23.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6iuoslz0000zhtofbj4f06o","content":"<p>最近接手的几个老的 Vue 项目对于请求都没有异常处理，研究了一些解决方案，正好借机梳理一下如何在 Vue 中更优雅的捕获 Promise 异常</p>\n<h2 id=\"常规的异常捕获方式\"><a href=\"#常规的异常捕获方式\" class=\"headerlink\" title=\"常规的异常捕获方式\"></a>常规的异常捕获方式</h2><p>在 Promise 提供了一个 <code>.catch</code> 方法用来捕获异常，假设有很多异步请求，通常会把 <code>.catch</code> 方法放在链式调用的最末尾。正常情况下末尾的 <code>.catch</code> 不会被触发，但当前面的任何一个 Promise rejected 之后，<code>.catch</code> 就可以捕获到异常</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ... 具体操作</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 异常捕获</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用 Promise 的语法糖 async / await 的话，可以使用更符合直觉的 <code>try...catch</code> 捕获异常，上面这个请求例子就可以修改为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> userResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> userInfoResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfoResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... 具体操作</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不管是 <code>.then</code> 方法还是 <code>try...catch</code> 都需要增加一些代码操作，最重要的是可能会忘记捕获异常，所以下面介绍两个更好一些的解决方案</p>\n<h2 id=\"好一些的方式：await-to-js\"><a href=\"#好一些的方式：await-to-js\" class=\"headerlink\" title=\"好一些的方式：await-to-js\"></a>好一些的方式：await-to-js</h2><p><a class=\"link\"   href=\"https://github.com/scopsy/await-to-js\" >await-to-js<i class=\"fas fa-external-link-alt\"></i></a> 是一个大佬对 async / await 返回内容进行的一层封装，在不用 <code>try...catch</code> 的方式下也能进行异常捕获</p>\n<p>在使用前需要先引入这个依赖：<code>npm i await-to-js</code>，下面我们来改写简化一下之前的异常捕获方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> to <span class=\"token keyword\">from</span> <span class=\"token string\">\"await-to-js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userError<span class=\"token punctuation\">,</span> userResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userInfoError<span class=\"token punctuation\">,</span> userInfoResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>\n    res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfoResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 具体操作</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>await-to-js 的实现也就短短几行代码，本质就是对 Promise 的 <code>.then</code> 和 <code>.catch</code> 返回结果进行组合，然后整体作为一个 Promise 再返回出去</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">to</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> Error<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  promise<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  errorExt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token comment\">// 传递给 err 对象的附加信息</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> promise\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">then</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">catch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorExt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> parsedError <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errorExt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>parsedError<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> to<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然 await-to-js 简化了代码，但还是需要引入依赖，对请求进行一层包裹，还是稍微麻烦了一点，如果我们对异常处理没有特殊处理的需要，仅仅只是捕获并且抛出，为了追求更简洁的代码；或者项目中有非常多的地方没有异常捕获，需要一个一个的手工增加非常麻烦，针对这两种情况，还有没有更好的办法呢？</p>\n<h2 id=\"更好的方式：全局捕获\"><a href=\"#更好的方式：全局捕获\" class=\"headerlink\" title=\"更好的方式：全局捕获\"></a>更好的方式：全局捕获</h2><p>在 Vue2 的全局配置中提供了一个 <code>errorHandler</code> 钩子可以用于捕获全局异常，但是最低版本要求 2.2.0+</p>\n<p><code>errorHandler</code> 第一个参数 <code>err</code> 是具体的错误信息，第二个参数 <code>vm</code> 是 Vue 组件信息，第三个参数 <code>info</code> 是 Vue 特定的错误信息，比如错误所在的生命周期钩子。一般为了捕获 Vue 特定的 <code>info</code> 信息，在内部处理时还会加上一层 <code>nextTick</code> ，确保捕获的是 DOM 渲染完成之后的信息。另外最好在根据不同环境配置判断是否需要捕获异常，增加程序的灵活性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// errorHandler 使用示例</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 配置项形式：'development' | ['development', 'production']</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">errorLog</span><span class=\"token operator\">:</span> needErrorLog <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 根据配置判断什么环境下需要捕获异常</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkNeedErrorLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>needErrorLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> env <span class=\"token operator\">===</span> needErrorLog<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>needErrorLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> needErrorLog<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 全局异常捕获</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkNeedErrorLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>projectName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">。</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Vue info: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>info<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据<a class=\"link\"   href=\"https://cn.vuejs.org/v2/api/#errorHandler\" >官网的描述<i class=\"fas fa-external-link-alt\"></i></a>，不同的 Vue 版本捕获的信息不同，所以建议最好是更新 Vue 2.6.0 以上的版本，这样就可以全局捕获到 Promise 和 async / await 抛出的异常了，</p>\n<blockquote>\n<p>从 2.2.0 起，<code>errorHandler</code> 钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 <code>undefined</code> 时，被捕获的错误会通过 <code>console.error</code> 输出而避免应用崩溃</p>\n<p>从 2.4.0 起，<code>errorHandler</code> 钩子也会捕获 Vue 自定义事件处理函数内部的错误</p>\n<p>从 2.6.0 起，<code>errorHandler</code> 钩子也会捕获 <code>v-on</code> DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理</p>\n</blockquote>\n<p>在 Vue3 中，除了提供 <code>errorHandler</code> 钩子外，还提供了 <code>warnHandler</code> 钩子，两个钩子的用法相同，区别是是 <code>warnHandler</code> 只在开发环境生效，生产环境会被忽略</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">warnHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> trace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// `trace` 是组件的继承关系追踪</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>最近接手的几个老的 Vue 项目对于请求都没有异常处理，研究了一些解决方案，正好借机梳理一下如何在 Vue 中更优雅的捕获 Promise 异常</p>\n<h2 id=\"常规的异常捕获方式\"><a href=\"#常规的异常捕获方式\" class=\"headerlink\" title=\"常规的异常捕获方式\"></a>常规的异常捕获方式</h2><p>在 Promise 提供了一个 <code>.catch</code> 方法用来捕获异常，假设有很多异步请求，通常会把 <code>.catch</code> 方法放在链式调用的最末尾。正常情况下末尾的 <code>.catch</code> 不会被触发，但当前面的任何一个 Promise rejected 之后，<code>.catch</code> 就可以捕获到异常</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// ... 具体操作</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 异常捕获</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用 Promise 的语法糖 async / await 的话，可以使用更符合直觉的 <code>try...catch</code> 捕获异常，上面这个请求例子就可以修改为</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> userResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> userInfoResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfoResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... 具体操作</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不管是 <code>.then</code> 方法还是 <code>try...catch</code> 都需要增加一些代码操作，最重要的是可能会忘记捕获异常，所以下面介绍两个更好一些的解决方案</p>\n<h2 id=\"好一些的方式：await-to-js\"><a href=\"#好一些的方式：await-to-js\" class=\"headerlink\" title=\"好一些的方式：await-to-js\"></a>好一些的方式：await-to-js</h2><p><a class=\"link\"   href=\"https://github.com/scopsy/await-to-js\" >await-to-js<i class=\"fas fa-external-link-alt\"></i></a> 是一个大佬对 async / await 返回内容进行的一层封装，在不用 <code>try...catch</code> 的方式下也能进行异常捕获</p>\n<p>在使用前需要先引入这个依赖：<code>npm i await-to-js</code>，下面我们来改写简化一下之前的异常捕获方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> to <span class=\"token keyword\">from</span> <span class=\"token string\">\"await-to-js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userError<span class=\"token punctuation\">,</span> userResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">year</span><span class=\"token operator\">:</span> <span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userInfoError<span class=\"token punctuation\">,</span> userInfoResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFunction2</span><span class=\"token punctuation\">(</span>\n    res<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>name <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfoResult<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  getUserInfo <span class=\"token operator\">=</span> userInfoResult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ... 具体操作</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>await-to-js 的实现也就短短几行代码，本质就是对 Promise 的 <code>.then</code> 和 <code>.catch</code> 返回结果进行组合，然后整体作为一个 Promise 再返回出去</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">to</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token operator\">=</span> Error<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  promise<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  errorExt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object <span class=\"token comment\">// 传递给 err 对象的附加信息</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> promise\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">then</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">catch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorExt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> parsedError <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> errorExt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>parsedError<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> to<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然 await-to-js 简化了代码，但还是需要引入依赖，对请求进行一层包裹，还是稍微麻烦了一点，如果我们对异常处理没有特殊处理的需要，仅仅只是捕获并且抛出，为了追求更简洁的代码；或者项目中有非常多的地方没有异常捕获，需要一个一个的手工增加非常麻烦，针对这两种情况，还有没有更好的办法呢？</p>\n<h2 id=\"更好的方式：全局捕获\"><a href=\"#更好的方式：全局捕获\" class=\"headerlink\" title=\"更好的方式：全局捕获\"></a>更好的方式：全局捕获</h2><p>在 Vue2 的全局配置中提供了一个 <code>errorHandler</code> 钩子可以用于捕获全局异常，但是最低版本要求 2.2.0+</p>\n<p><code>errorHandler</code> 第一个参数 <code>err</code> 是具体的错误信息，第二个参数 <code>vm</code> 是 Vue 组件信息，第三个参数 <code>info</code> 是 Vue 特定的错误信息，比如错误所在的生命周期钩子。一般为了捕获 Vue 特定的 <code>info</code> 信息，在内部处理时还会加上一层 <code>nextTick</code> ，确保捕获的是 DOM 渲染完成之后的信息。另外最好在根据不同环境配置判断是否需要捕获异常，增加程序的灵活性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// errorHandler 使用示例</span>\n<span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 配置项形式：'development' | ['development', 'production']</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">errorLog</span><span class=\"token operator\">:</span> needErrorLog <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 根据配置判断什么环境下需要捕获异常</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkNeedErrorLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>needErrorLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> env <span class=\"token operator\">===</span> needErrorLog<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>needErrorLog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> needErrorLog<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 全局异常捕获</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkNeedErrorLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Vue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">errorHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>projectName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">]: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">。</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Vue info: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>info<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据<a class=\"link\"   href=\"https://cn.vuejs.org/v2/api/#errorHandler\" >官网的描述<i class=\"fas fa-external-link-alt\"></i></a>，不同的 Vue 版本捕获的信息不同，所以建议最好是更新 Vue 2.6.0 以上的版本，这样就可以全局捕获到 Promise 和 async / await 抛出的异常了，</p>\n<blockquote>\n<p>从 2.2.0 起，<code>errorHandler</code> 钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 <code>undefined</code> 时，被捕获的错误会通过 <code>console.error</code> 输出而避免应用崩溃</p>\n<p>从 2.4.0 起，<code>errorHandler</code> 钩子也会捕获 Vue 自定义事件处理函数内部的错误</p>\n<p>从 2.6.0 起，<code>errorHandler</code> 钩子也会捕获 <code>v-on</code> DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理</p>\n</blockquote>\n<p>在 Vue3 中，除了提供 <code>errorHandler</code> 钩子外，还提供了 <code>warnHandler</code> 钩子，两个钩子的用法相同，区别是是 <code>warnHandler</code> 只在开发环境生效，生产环境会被忽略</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">warnHandler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> trace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// `trace` 是组件的继承关系追踪</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n"},{"title":"开发环境升级 Vite 踩坑总结","date":"2022-08-21T13:21:00.000Z","_content":"\n## 为什么选择迁移 vite\n\n最主要原因就是本地开发启动速度快。在使用 vite 之前，特地先使用了 [speed-measure-webpack-plugin](https://github.com/stephencookdev/speed-measure-webpack-plugin) 这个插件来检测 webpack 的打包速度，结果是需要 15s - 20s。 相比之下，在切换 vite 之后，几乎就是秒启动\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-05%2021.59.18.png)\n\n当然也有一个弊端：**开发环境的首屏渲染、懒加载相比 webpack 更慢了**，根本原因是 vite 把源文件的 resolve、load、transform、parse 延后到由浏览器执行。但只要在首屏渲染完成后，vite 会使用强缓存对构建内容进行缓存，在这之后相比于 webpack 每次更新内容之后的重新打包，vite 的热更新又是是丝滑的热更新体验\n\n为什么开发环境不一并迁移 vite？最主要的考虑还是担心影响现有业务流程，而且 vite 的生产环境也是通过 rollup 打包来实现的，在生产构建没有很大的性能时间问题前暂时还是使用 webpack 进行生产打包构建\n\n## 迁移步骤和踩坑总结\n\n首先是安装依赖，因为最新版本的 Vite 3.0 支持的 Node 最低版本是 14.18+，不再支持 Node 12，考虑到老项目，还是选择了 Vite 2.9 版本。另外老项目使用的还是 Vue2，所以需要使用到 [vite-plugin-vue2](https://github.com/underfin/vite-plugin-vue2) 插件，让 Vue2 项目中可以使用 Vite\n\n- 安装依赖：`npm i -D vite@^2.9.14 vite-plugin-vue2`，然后在 `package.json`新增一个启动命令，新建一个 `vite.config.js` 配置文件\n\n```json\n// vite 启动命令\n\"scripts\": {\n  \"dev:vite\": \"vite\",\n},\n\n// 新增 vite.config.js 文件和基础内容\nimport { defineConfig } from \"vite\";\nimport { createVuePlugin } from \"vite-plugin-vue2\";\n\nexport default defineConfig({\n  plugins: [\n    createVuePlugin({\n      jsx: true,\n    }),\n  ],\n});\n```\n\n不出意外的话是可以直接启动的，但是页面是空白，原因是因为在传统的 vue-cli / webpack 项目中 `index.html` 文件一般都是放在 `public` 目录下。而在 vite 项目中 `index.html` 是放在根目录下，作为整个项目的入口，通过 `index.html` 中的 `<script>` 标签来加载 js 文件。考虑到升级前定下的原则：**尽量不改动原有项目代码和配置**，所以需要使用到 [vite-plugin-html](https://github.com/vbenjs/vite-plugin-html/blob/main/README.zh_CN.md) 这个插件修改 vite 识别 `index.html` 目录的位置\n\n- 安装依赖 `npm i -D vite-plugin-html`，然后在 `vite.config.js` 中配置 `index.html` 入口\n- index.html 新增：`<script type=\"module\" src=\"/src/main.js\"></script>`\n\n```js\nimport { createHtmlPlugin } from \"vite-plugin-html\";\n\nexport default defineConfig({\n  plugins: [\n    createHtmlPlugin({\n      template: \"public/index.html\",\n      minify: true,\n    }),\n  ],\n});\n```\n\n接下来启动项目，会发现 Vite 无法识别忽略 `.vue` 后缀的文件，这是因为 Vite 已不再默认忽略.vue 扩展名（根据 github 上 [issue 讨论](https://github.com/vitejs/vite/issues/178#issuecomment-630138450)，尤大回答设计就是如此），所以只能手动兼容\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.21.57.png)\n\n- 在 `vite.config.js` 中手动配置后缀名忽略选项\n\n```js\nexport default defineConfig({\n  resolve: {\n    // 手动配置后缀名忽略选项\n    extensions: [\".vue\", \".js\", \".json\", \".mjs\"],\n  },\n});\n```\n\n继续启动项目，提示找不到 sass 依赖，只能重新安装 sass，版本选择低一些，`sass@~1.26.5`，过高可能存在问题\n\n- 安装 sass 依赖：`npm i -D sass@~1.26.5`\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.36.23.png)\n\n接下来启动项目需要解决两个别名识别问题，一个是常用的 webpack 别名定义，一般都会在 webpack 配置文件定义 `src` 目录的别名方便开发引入文件。第二个是 sass 别名的引入，项目中引入 sass 文件的方式是 `@import '~variable.scss'`，vite 支持了 `@import` 的引入，但是无法识别`~` 别名\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.38.24.png)\n\n- 增加适配 webpack 定义别名 `@xxx` 和 `@/xxx` 的场景\n- 增加适配引入 sass 文件 `~/xxxx` 和 `~xxx` 的场景\n\n```js\nexport default defineConfig({\n  resolve: {\n    alias: [\n      // 适配 @xxxx、@/xxxx\n      { find: \"@\", replacement: path.join(__dirname, \"src\") },\n      // 适配 ~/xxxx\n      {\n        find: /* ~/ */ /^~(?=\\/)/,\n        replacement: path.join(__dirname, \"node_modules\"),\n      },\n      // 适配 ~xxxx\n      {\n        find: /* ~ */ /^~(?!\\/)/,\n        replacement: path.join(__dirname, \"node_modules/\"),\n      },\n    ],\n  },\n});\n```\n\n继续填坑，提示 `require is not defined`，由于开发环境使用浏览器的 ESM 模式，不支持 CJS 模式，本着不修改源码的原则，继续使用插件兼容 CJS 的模式\n\n- 安装 [@originjs/vite-plugin-require-context](https://www.npmjs.com/package/@originjs/vite-plugin-require-context) 和 [vite-plugin-commonjs](https://github.com/vite-plugin/vite-plugin-commonjs) 插件并在 `vite.config.js` 文件中引入\n\n```js\nimport commonjs from \"vite-plugin-commonjs\";\nimport ViteRequireContext from \"@originjs/vite-plugin-require-context\";\n\nexport default defineConfig({\n  plugins: [\n    // 兼容 commonjs\n    commonjs(),\n    // 兼容 webpack require.context 写法\n    ViteRequireContext(),\n  ],\n});\n```\n\n在 webpack 中使用环境变量的方式主要是通过 `process.env.xxx`，而 vite 中是通过 `import.meta.env.VITE_xxx` 的方式访问环境变量，为了不影响生产环境 webpack 环境变量的使用，需要自定义项目中使用到的环境变量\n\n- 在 `vite.config.js` 中自定义项目使用到的环境变量\n\n```js\ndefine: {\n    // 同 webpack.DefinePlugin，手动兼容 dev 环境 process.env\n    'process.env': {\n      VUE_APP_ENV: 'development',\n      VUE_APP_REQUESTPATH: '/hrpb',\n      VUE_APP_TITLE: '传统金融业务人员PB系统',\n      VUE_APP_SHORT_TITLE: 'hrpb'\n    }\n},\n```\n\n到这里项目中基本可以正常启动不报错了，但是如果项目使用的 UI 组件库是按需引入的话，还要在 vite 中重新配置一遍按需引入\n\n- 使用 [vite-plugin-style-import](https://github.com/vbenjs/vite-plugin-style-import) 配置 UI 组件库按需引入\n- `vite.config.js` 配置 ant-design-vue 主题色等自定义颜色\n\n```js\nimport { createStyleImportPlugin, AndDesignVueResolve } from 'vite-plugin-style-import'\n\nplugins: [\n  // 导入 ant-design-vue 样式\n  createStyleImportPlugin({\n    resolves: [AndDesignVueResolve()]\n  })\n],\ncss: {\n  // 定义 ant-design-vue 颜色\n  preprocessorOptions: {\n    less: {\n      modifyVars: {\n        'primary-color': '#b60005'\n      },\n        javascriptEnabled: true\n    }\n  }\n}\n```\n\n## 迁移 vite 后效果\n\n冷启动时间直线减少，现在只需要 2 秒左右，而且即使项目体积增大，启动速度也没有太大的变化，其次就是热更新几乎是无感的，不像 webpack 可能还需要等待一两秒的重新打包\n\n![截屏2022-08-21 19.11.11](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-21%2019.11.11.png)\n\n但现在 vite 的首屏加载时间确实是存在的一个问题，相信这也是 vite 后续提升的方向之一吧\n","source":"_posts/开发环境升级 Vite 踩坑总结.md","raw":"---\ntitle: 开发环境升级 Vite 踩坑总结\ndate: 2022-08-21 21:21:00\ncategories: 前端\ntags: Vite\n---\n\n## 为什么选择迁移 vite\n\n最主要原因就是本地开发启动速度快。在使用 vite 之前，特地先使用了 [speed-measure-webpack-plugin](https://github.com/stephencookdev/speed-measure-webpack-plugin) 这个插件来检测 webpack 的打包速度，结果是需要 15s - 20s。 相比之下，在切换 vite 之后，几乎就是秒启动\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-05%2021.59.18.png)\n\n当然也有一个弊端：**开发环境的首屏渲染、懒加载相比 webpack 更慢了**，根本原因是 vite 把源文件的 resolve、load、transform、parse 延后到由浏览器执行。但只要在首屏渲染完成后，vite 会使用强缓存对构建内容进行缓存，在这之后相比于 webpack 每次更新内容之后的重新打包，vite 的热更新又是是丝滑的热更新体验\n\n为什么开发环境不一并迁移 vite？最主要的考虑还是担心影响现有业务流程，而且 vite 的生产环境也是通过 rollup 打包来实现的，在生产构建没有很大的性能时间问题前暂时还是使用 webpack 进行生产打包构建\n\n## 迁移步骤和踩坑总结\n\n首先是安装依赖，因为最新版本的 Vite 3.0 支持的 Node 最低版本是 14.18+，不再支持 Node 12，考虑到老项目，还是选择了 Vite 2.9 版本。另外老项目使用的还是 Vue2，所以需要使用到 [vite-plugin-vue2](https://github.com/underfin/vite-plugin-vue2) 插件，让 Vue2 项目中可以使用 Vite\n\n- 安装依赖：`npm i -D vite@^2.9.14 vite-plugin-vue2`，然后在 `package.json`新增一个启动命令，新建一个 `vite.config.js` 配置文件\n\n```json\n// vite 启动命令\n\"scripts\": {\n  \"dev:vite\": \"vite\",\n},\n\n// 新增 vite.config.js 文件和基础内容\nimport { defineConfig } from \"vite\";\nimport { createVuePlugin } from \"vite-plugin-vue2\";\n\nexport default defineConfig({\n  plugins: [\n    createVuePlugin({\n      jsx: true,\n    }),\n  ],\n});\n```\n\n不出意外的话是可以直接启动的，但是页面是空白，原因是因为在传统的 vue-cli / webpack 项目中 `index.html` 文件一般都是放在 `public` 目录下。而在 vite 项目中 `index.html` 是放在根目录下，作为整个项目的入口，通过 `index.html` 中的 `<script>` 标签来加载 js 文件。考虑到升级前定下的原则：**尽量不改动原有项目代码和配置**，所以需要使用到 [vite-plugin-html](https://github.com/vbenjs/vite-plugin-html/blob/main/README.zh_CN.md) 这个插件修改 vite 识别 `index.html` 目录的位置\n\n- 安装依赖 `npm i -D vite-plugin-html`，然后在 `vite.config.js` 中配置 `index.html` 入口\n- index.html 新增：`<script type=\"module\" src=\"/src/main.js\"></script>`\n\n```js\nimport { createHtmlPlugin } from \"vite-plugin-html\";\n\nexport default defineConfig({\n  plugins: [\n    createHtmlPlugin({\n      template: \"public/index.html\",\n      minify: true,\n    }),\n  ],\n});\n```\n\n接下来启动项目，会发现 Vite 无法识别忽略 `.vue` 后缀的文件，这是因为 Vite 已不再默认忽略.vue 扩展名（根据 github 上 [issue 讨论](https://github.com/vitejs/vite/issues/178#issuecomment-630138450)，尤大回答设计就是如此），所以只能手动兼容\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.21.57.png)\n\n- 在 `vite.config.js` 中手动配置后缀名忽略选项\n\n```js\nexport default defineConfig({\n  resolve: {\n    // 手动配置后缀名忽略选项\n    extensions: [\".vue\", \".js\", \".json\", \".mjs\"],\n  },\n});\n```\n\n继续启动项目，提示找不到 sass 依赖，只能重新安装 sass，版本选择低一些，`sass@~1.26.5`，过高可能存在问题\n\n- 安装 sass 依赖：`npm i -D sass@~1.26.5`\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.36.23.png)\n\n接下来启动项目需要解决两个别名识别问题，一个是常用的 webpack 别名定义，一般都会在 webpack 配置文件定义 `src` 目录的别名方便开发引入文件。第二个是 sass 别名的引入，项目中引入 sass 文件的方式是 `@import '~variable.scss'`，vite 支持了 `@import` 的引入，但是无法识别`~` 别名\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.38.24.png)\n\n- 增加适配 webpack 定义别名 `@xxx` 和 `@/xxx` 的场景\n- 增加适配引入 sass 文件 `~/xxxx` 和 `~xxx` 的场景\n\n```js\nexport default defineConfig({\n  resolve: {\n    alias: [\n      // 适配 @xxxx、@/xxxx\n      { find: \"@\", replacement: path.join(__dirname, \"src\") },\n      // 适配 ~/xxxx\n      {\n        find: /* ~/ */ /^~(?=\\/)/,\n        replacement: path.join(__dirname, \"node_modules\"),\n      },\n      // 适配 ~xxxx\n      {\n        find: /* ~ */ /^~(?!\\/)/,\n        replacement: path.join(__dirname, \"node_modules/\"),\n      },\n    ],\n  },\n});\n```\n\n继续填坑，提示 `require is not defined`，由于开发环境使用浏览器的 ESM 模式，不支持 CJS 模式，本着不修改源码的原则，继续使用插件兼容 CJS 的模式\n\n- 安装 [@originjs/vite-plugin-require-context](https://www.npmjs.com/package/@originjs/vite-plugin-require-context) 和 [vite-plugin-commonjs](https://github.com/vite-plugin/vite-plugin-commonjs) 插件并在 `vite.config.js` 文件中引入\n\n```js\nimport commonjs from \"vite-plugin-commonjs\";\nimport ViteRequireContext from \"@originjs/vite-plugin-require-context\";\n\nexport default defineConfig({\n  plugins: [\n    // 兼容 commonjs\n    commonjs(),\n    // 兼容 webpack require.context 写法\n    ViteRequireContext(),\n  ],\n});\n```\n\n在 webpack 中使用环境变量的方式主要是通过 `process.env.xxx`，而 vite 中是通过 `import.meta.env.VITE_xxx` 的方式访问环境变量，为了不影响生产环境 webpack 环境变量的使用，需要自定义项目中使用到的环境变量\n\n- 在 `vite.config.js` 中自定义项目使用到的环境变量\n\n```js\ndefine: {\n    // 同 webpack.DefinePlugin，手动兼容 dev 环境 process.env\n    'process.env': {\n      VUE_APP_ENV: 'development',\n      VUE_APP_REQUESTPATH: '/hrpb',\n      VUE_APP_TITLE: '传统金融业务人员PB系统',\n      VUE_APP_SHORT_TITLE: 'hrpb'\n    }\n},\n```\n\n到这里项目中基本可以正常启动不报错了，但是如果项目使用的 UI 组件库是按需引入的话，还要在 vite 中重新配置一遍按需引入\n\n- 使用 [vite-plugin-style-import](https://github.com/vbenjs/vite-plugin-style-import) 配置 UI 组件库按需引入\n- `vite.config.js` 配置 ant-design-vue 主题色等自定义颜色\n\n```js\nimport { createStyleImportPlugin, AndDesignVueResolve } from 'vite-plugin-style-import'\n\nplugins: [\n  // 导入 ant-design-vue 样式\n  createStyleImportPlugin({\n    resolves: [AndDesignVueResolve()]\n  })\n],\ncss: {\n  // 定义 ant-design-vue 颜色\n  preprocessorOptions: {\n    less: {\n      modifyVars: {\n        'primary-color': '#b60005'\n      },\n        javascriptEnabled: true\n    }\n  }\n}\n```\n\n## 迁移 vite 后效果\n\n冷启动时间直线减少，现在只需要 2 秒左右，而且即使项目体积增大，启动速度也没有太大的变化，其次就是热更新几乎是无感的，不像 webpack 可能还需要等待一两秒的重新打包\n\n![截屏2022-08-21 19.11.11](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-21%2019.11.11.png)\n\n但现在 vite 的首屏加载时间确实是存在的一个问题，相信这也是 vite 后续提升的方向之一吧\n","slug":"开发环境升级 Vite 踩坑总结","published":1,"updated":"2022-08-21T13:22:02.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl73czlfn0000ilto71j7gap4","content":"<h2 id=\"为什么选择迁移-vite\"><a href=\"#为什么选择迁移-vite\" class=\"headerlink\" title=\"为什么选择迁移 vite\"></a>为什么选择迁移 vite</h2><p>最主要原因就是本地开发启动速度快。在使用 vite 之前，特地先使用了 <a class=\"link\"   href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\" >speed-measure-webpack-plugin<i class=\"fas fa-external-link-alt\"></i></a> 这个插件来检测 webpack 的打包速度，结果是需要 15s - 20s。 相比之下，在切换 vite 之后，几乎就是秒启动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-05%2021.59.18.png\"\n                     \n                ></p>\n<p>当然也有一个弊端：<strong>开发环境的首屏渲染、懒加载相比 webpack 更慢了</strong>，根本原因是 vite 把源文件的 resolve、load、transform、parse 延后到由浏览器执行。但只要在首屏渲染完成后，vite 会使用强缓存对构建内容进行缓存，在这之后相比于 webpack 每次更新内容之后的重新打包，vite 的热更新又是是丝滑的热更新体验</p>\n<p>为什么开发环境不一并迁移 vite？最主要的考虑还是担心影响现有业务流程，而且 vite 的生产环境也是通过 rollup 打包来实现的，在生产构建没有很大的性能时间问题前暂时还是使用 webpack 进行生产打包构建</p>\n<h2 id=\"迁移步骤和踩坑总结\"><a href=\"#迁移步骤和踩坑总结\" class=\"headerlink\" title=\"迁移步骤和踩坑总结\"></a>迁移步骤和踩坑总结</h2><p>首先是安装依赖，因为最新版本的 Vite 3.0 支持的 Node 最低版本是 14.18+，不再支持 Node 12，考虑到老项目，还是选择了 Vite 2.9 版本。另外老项目使用的还是 Vue2，所以需要使用到 <a class=\"link\"   href=\"https://github.com/underfin/vite-plugin-vue2\" >vite-plugin-vue2<i class=\"fas fa-external-link-alt\"></i></a> 插件，让 Vue2 项目中可以使用 Vite</p>\n<ul>\n<li>安装依赖：<code>npm i -D vite@^2.9.14 vite-plugin-vue2</code>，然后在 <code>package.json</code>新增一个启动命令，新建一个 <code>vite.config.js</code> 配置文件</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// vite 启动命令</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"dev:vite\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// 新增 vite.config.js 文件和基础内容</span>\nimport <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">\"vite\"</span>;\nimport <span class=\"token punctuation\">&#123;</span> createVuePlugin <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">\"vite-plugin-vue2\"</span>;\n\nexport default defineConfig(<span class=\"token punctuation\">&#123;</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    createVuePlugin(<span class=\"token punctuation\">&#123;</span>\n      jsx<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不出意外的话是可以直接启动的，但是页面是空白，原因是因为在传统的 vue-cli / webpack 项目中 <code>index.html</code> 文件一般都是放在 <code>public</code> 目录下。而在 vite 项目中 <code>index.html</code> 是放在根目录下，作为整个项目的入口，通过 <code>index.html</code> 中的 <code>&lt;script&gt;</code> 标签来加载 js 文件。考虑到升级前定下的原则：<strong>尽量不改动原有项目代码和配置</strong>，所以需要使用到 <a class=\"link\"   href=\"https://github.com/vbenjs/vite-plugin-html/blob/main/README.zh_CN.md\" >vite-plugin-html<i class=\"fas fa-external-link-alt\"></i></a> 这个插件修改 vite 识别 <code>index.html</code> 目录的位置</p>\n<ul>\n<li>安装依赖 <code>npm i -D vite-plugin-html</code>，然后在 <code>vite.config.js</code> 中配置 <code>index.html</code> 入口</li>\n<li>index.html 新增：<code>&lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createHtmlPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-html\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">createHtmlPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来启动项目，会发现 Vite 无法识别忽略 <code>.vue</code> 后缀的文件，这是因为 Vite 已不再默认忽略.vue 扩展名（根据 github 上 <a class=\"link\"   href=\"https://github.com/vitejs/vite/issues/178#issuecomment-630138450\" >issue 讨论<i class=\"fas fa-external-link-alt\"></i></a>，尤大回答设计就是如此），所以只能手动兼容</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.21.57.png\"\n                     \n                ></p>\n<ul>\n<li>在 <code>vite.config.js</code> 中手动配置后缀名忽略选项</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 手动配置后缀名忽略选项</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".mjs\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续启动项目，提示找不到 sass 依赖，只能重新安装 sass，版本选择低一些，<code>sass@~1.26.5</code>，过高可能存在问题</p>\n<ul>\n<li>安装 sass 依赖：<code>npm i -D sass@~1.26.5</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.36.23.png\"\n                     \n                ></p>\n<p>接下来启动项目需要解决两个别名识别问题，一个是常用的 webpack 别名定义，一般都会在 webpack 配置文件定义 <code>src</code> 目录的别名方便开发引入文件。第二个是 sass 别名的引入，项目中引入 sass 文件的方式是 <code>@import &#39;~variable.scss&#39;</code>，vite 支持了 <code>@import</code> 的引入，但是无法识别<code>~</code> 别名</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.38.24.png\"\n                     \n                ></p>\n<ul>\n<li>增加适配 webpack 定义别名 <code>@xxx</code> 和 <code>@/xxx</code> 的场景</li>\n<li>增加适配引入 sass 文件 <code>~/xxxx</code> 和 <code>~xxx</code> 的场景</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// 适配 @xxxx、@/xxxx</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 适配 ~/xxxx</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* ~/ */</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^~(?=\\/)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 适配 ~xxxx</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* ~ */</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^~(?!\\/)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续填坑，提示 <code>require is not defined</code>，由于开发环境使用浏览器的 ESM 模式，不支持 CJS 模式，本着不修改源码的原则，继续使用插件兼容 CJS 的模式</p>\n<ul>\n<li>安装 <a class=\"link\"   href=\"https://www.npmjs.com/package/@originjs/vite-plugin-require-context\" >@originjs/vite-plugin-require-context<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"https://github.com/vite-plugin/vite-plugin-commonjs\" >vite-plugin-commonjs<i class=\"fas fa-external-link-alt\"></i></a> 插件并在 <code>vite.config.js</code> 文件中引入</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> commonjs <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-commonjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ViteRequireContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"@originjs/vite-plugin-require-context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 兼容 commonjs</span>\n    <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 兼容 webpack require.context 写法</span>\n    <span class=\"token function\">ViteRequireContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 webpack 中使用环境变量的方式主要是通过 <code>process.env.xxx</code>，而 vite 中是通过 <code>import.meta.env.VITE_xxx</code> 的方式访问环境变量，为了不影响生产环境 webpack 环境变量的使用，需要自定义项目中使用到的环境变量</p>\n<ul>\n<li>在 <code>vite.config.js</code> 中自定义项目使用到的环境变量</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">define</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 同 webpack.DefinePlugin，手动兼容 dev 环境 process.env</span>\n    <span class=\"token string-property property\">'process.env'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token constant\">VUE_APP_ENV</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_REQUESTPATH</span><span class=\"token operator\">:</span> <span class=\"token string\">'/hrpb'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_TITLE</span><span class=\"token operator\">:</span> <span class=\"token string\">'传统金融业务人员PB系统'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_SHORT_TITLE</span><span class=\"token operator\">:</span> <span class=\"token string\">'hrpb'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里项目中基本可以正常启动不报错了，但是如果项目使用的 UI 组件库是按需引入的话，还要在 vite 中重新配置一遍按需引入</p>\n<ul>\n<li>使用 <a class=\"link\"   href=\"https://github.com/vbenjs/vite-plugin-style-import\" >vite-plugin-style-import<i class=\"fas fa-external-link-alt\"></i></a> 配置 UI 组件库按需引入</li>\n<li><code>vite.config.js</code> 配置 ant-design-vue 主题色等自定义颜色</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStyleImportPlugin<span class=\"token punctuation\">,</span> AndDesignVueResolve <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-style-import'</span>\n\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 导入 ant-design-vue 样式</span>\n  <span class=\"token function\">createStyleImportPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">resolves</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">AndDesignVueResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">css</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义 ant-design-vue 颜色</span>\n  <span class=\"token literal-property property\">preprocessorOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">less</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">modifyVars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">'primary-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#b60005'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">javascriptEnabled</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迁移-vite-后效果\"><a href=\"#迁移-vite-后效果\" class=\"headerlink\" title=\"迁移 vite 后效果\"></a>迁移 vite 后效果</h2><p>冷启动时间直线减少，现在只需要 2 秒左右，而且即使项目体积增大，启动速度也没有太大的变化，其次就是热更新几乎是无感的，不像 webpack 可能还需要等待一两秒的重新打包</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-21%2019.11.11.png\"\n                      alt=\"截屏2022-08-21 19.11.11\"\n                ></p>\n<p>但现在 vite 的首屏加载时间确实是存在的一个问题，相信这也是 vite 后续提升的方向之一吧</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么选择迁移-vite\"><a href=\"#为什么选择迁移-vite\" class=\"headerlink\" title=\"为什么选择迁移 vite\"></a>为什么选择迁移 vite</h2><p>最主要原因就是本地开发启动速度快。在使用 vite 之前，特地先使用了 <a class=\"link\"   href=\"https://github.com/stephencookdev/speed-measure-webpack-plugin\" >speed-measure-webpack-plugin<i class=\"fas fa-external-link-alt\"></i></a> 这个插件来检测 webpack 的打包速度，结果是需要 15s - 20s。 相比之下，在切换 vite 之后，几乎就是秒启动</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-05%2021.59.18.png\"\n                     \n                ></p>\n<p>当然也有一个弊端：<strong>开发环境的首屏渲染、懒加载相比 webpack 更慢了</strong>，根本原因是 vite 把源文件的 resolve、load、transform、parse 延后到由浏览器执行。但只要在首屏渲染完成后，vite 会使用强缓存对构建内容进行缓存，在这之后相比于 webpack 每次更新内容之后的重新打包，vite 的热更新又是是丝滑的热更新体验</p>\n<p>为什么开发环境不一并迁移 vite？最主要的考虑还是担心影响现有业务流程，而且 vite 的生产环境也是通过 rollup 打包来实现的，在生产构建没有很大的性能时间问题前暂时还是使用 webpack 进行生产打包构建</p>\n<h2 id=\"迁移步骤和踩坑总结\"><a href=\"#迁移步骤和踩坑总结\" class=\"headerlink\" title=\"迁移步骤和踩坑总结\"></a>迁移步骤和踩坑总结</h2><p>首先是安装依赖，因为最新版本的 Vite 3.0 支持的 Node 最低版本是 14.18+，不再支持 Node 12，考虑到老项目，还是选择了 Vite 2.9 版本。另外老项目使用的还是 Vue2，所以需要使用到 <a class=\"link\"   href=\"https://github.com/underfin/vite-plugin-vue2\" >vite-plugin-vue2<i class=\"fas fa-external-link-alt\"></i></a> 插件，让 Vue2 项目中可以使用 Vite</p>\n<ul>\n<li>安装依赖：<code>npm i -D vite@^2.9.14 vite-plugin-vue2</code>，然后在 <code>package.json</code>新增一个启动命令，新建一个 <code>vite.config.js</code> 配置文件</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// vite 启动命令</span>\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"dev:vite\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// 新增 vite.config.js 文件和基础内容</span>\nimport <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">\"vite\"</span>;\nimport <span class=\"token punctuation\">&#123;</span> createVuePlugin <span class=\"token punctuation\">&#125;</span> from <span class=\"token string\">\"vite-plugin-vue2\"</span>;\n\nexport default defineConfig(<span class=\"token punctuation\">&#123;</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    createVuePlugin(<span class=\"token punctuation\">&#123;</span>\n      jsx<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不出意外的话是可以直接启动的，但是页面是空白，原因是因为在传统的 vue-cli / webpack 项目中 <code>index.html</code> 文件一般都是放在 <code>public</code> 目录下。而在 vite 项目中 <code>index.html</code> 是放在根目录下，作为整个项目的入口，通过 <code>index.html</code> 中的 <code>&lt;script&gt;</code> 标签来加载 js 文件。考虑到升级前定下的原则：<strong>尽量不改动原有项目代码和配置</strong>，所以需要使用到 <a class=\"link\"   href=\"https://github.com/vbenjs/vite-plugin-html/blob/main/README.zh_CN.md\" >vite-plugin-html<i class=\"fas fa-external-link-alt\"></i></a> 这个插件修改 vite 识别 <code>index.html</code> 目录的位置</p>\n<ul>\n<li>安装依赖 <code>npm i -D vite-plugin-html</code>，然后在 <code>vite.config.js</code> 中配置 <code>index.html</code> 入口</li>\n<li>index.html 新增：<code>&lt;script type=&quot;module&quot; src=&quot;/src/main.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createHtmlPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-html\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">createHtmlPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来启动项目，会发现 Vite 无法识别忽略 <code>.vue</code> 后缀的文件，这是因为 Vite 已不再默认忽略.vue 扩展名（根据 github 上 <a class=\"link\"   href=\"https://github.com/vitejs/vite/issues/178#issuecomment-630138450\" >issue 讨论<i class=\"fas fa-external-link-alt\"></i></a>，尤大回答设计就是如此），所以只能手动兼容</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.21.57.png\"\n                     \n                ></p>\n<ul>\n<li>在 <code>vite.config.js</code> 中手动配置后缀名忽略选项</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 手动配置后缀名忽略选项</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".mjs\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续启动项目，提示找不到 sass 依赖，只能重新安装 sass，版本选择低一些，<code>sass@~1.26.5</code>，过高可能存在问题</p>\n<ul>\n<li>安装 sass 依赖：<code>npm i -D sass@~1.26.5</code></li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.36.23.png\"\n                     \n                ></p>\n<p>接下来启动项目需要解决两个别名识别问题，一个是常用的 webpack 别名定义，一般都会在 webpack 配置文件定义 <code>src</code> 目录的别名方便开发引入文件。第二个是 sass 别名的引入，项目中引入 sass 文件的方式是 <code>@import &#39;~variable.scss&#39;</code>，vite 支持了 <code>@import</code> 的引入，但是无法识别<code>~</code> 别名</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-06%2007.38.24.png\"\n                     \n                ></p>\n<ul>\n<li>增加适配 webpack 定义别名 <code>@xxx</code> 和 <code>@/xxx</code> 的场景</li>\n<li>增加适配引入 sass 文件 <code>~/xxxx</code> 和 <code>~xxx</code> 的场景</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// 适配 @xxxx、@/xxxx</span>\n      <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 适配 ~/xxxx</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* ~/ */</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^~(?=\\/)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 适配 ~xxxx</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">find</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* ~ */</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^~(?!\\/)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">replacement</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继续填坑，提示 <code>require is not defined</code>，由于开发环境使用浏览器的 ESM 模式，不支持 CJS 模式，本着不修改源码的原则，继续使用插件兼容 CJS 的模式</p>\n<ul>\n<li>安装 <a class=\"link\"   href=\"https://www.npmjs.com/package/@originjs/vite-plugin-require-context\" >@originjs/vite-plugin-require-context<i class=\"fas fa-external-link-alt\"></i></a> 和 <a class=\"link\"   href=\"https://github.com/vite-plugin/vite-plugin-commonjs\" >vite-plugin-commonjs<i class=\"fas fa-external-link-alt\"></i></a> 插件并在 <code>vite.config.js</code> 文件中引入</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> commonjs <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-commonjs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ViteRequireContext <span class=\"token keyword\">from</span> <span class=\"token string\">\"@originjs/vite-plugin-require-context\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 兼容 commonjs</span>\n    <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 兼容 webpack require.context 写法</span>\n    <span class=\"token function\">ViteRequireContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 webpack 中使用环境变量的方式主要是通过 <code>process.env.xxx</code>，而 vite 中是通过 <code>import.meta.env.VITE_xxx</code> 的方式访问环境变量，为了不影响生产环境 webpack 环境变量的使用，需要自定义项目中使用到的环境变量</p>\n<ul>\n<li>在 <code>vite.config.js</code> 中自定义项目使用到的环境变量</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">define</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 同 webpack.DefinePlugin，手动兼容 dev 环境 process.env</span>\n    <span class=\"token string-property property\">'process.env'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token constant\">VUE_APP_ENV</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_REQUESTPATH</span><span class=\"token operator\">:</span> <span class=\"token string\">'/hrpb'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_TITLE</span><span class=\"token operator\">:</span> <span class=\"token string\">'传统金融业务人员PB系统'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">VUE_APP_SHORT_TITLE</span><span class=\"token operator\">:</span> <span class=\"token string\">'hrpb'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里项目中基本可以正常启动不报错了，但是如果项目使用的 UI 组件库是按需引入的话，还要在 vite 中重新配置一遍按需引入</p>\n<ul>\n<li>使用 <a class=\"link\"   href=\"https://github.com/vbenjs/vite-plugin-style-import\" >vite-plugin-style-import<i class=\"fas fa-external-link-alt\"></i></a> 配置 UI 组件库按需引入</li>\n<li><code>vite.config.js</code> 配置 ant-design-vue 主题色等自定义颜色</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStyleImportPlugin<span class=\"token punctuation\">,</span> AndDesignVueResolve <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-style-import'</span>\n\n<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// 导入 ant-design-vue 样式</span>\n  <span class=\"token function\">createStyleImportPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">resolves</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">AndDesignVueResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">css</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 定义 ant-design-vue 颜色</span>\n  <span class=\"token literal-property property\">preprocessorOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">less</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">modifyVars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">'primary-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#b60005'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">javascriptEnabled</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"迁移-vite-后效果\"><a href=\"#迁移-vite-后效果\" class=\"headerlink\" title=\"迁移 vite 后效果\"></a>迁移 vite 后效果</h2><p>冷启动时间直线减少，现在只需要 2 秒左右，而且即使项目体积增大，启动速度也没有太大的变化，其次就是热更新几乎是无感的，不像 webpack 可能还需要等待一两秒的重新打包</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-08-21%2019.11.11.png\"\n                      alt=\"截屏2022-08-21 19.11.11\"\n                ></p>\n<p>但现在 vite 的首屏加载时间确实是存在的一个问题，相信这也是 vite 后续提升的方向之一吧</p>\n"},{"title":"PC 端响应式布局方案","date":"2022-10-16T07:49:00.000Z","_content":"\n最近在工作中做了一些响应式布局的功能和可视化大屏的开发，所以这里我也整理一下用到的响应式布局方案作为未来项目开发的参考方案\n\n## 常用实现方案\n\n### flex 布局\n\nflex 布局一把梭能解决绝大多情况下的响应式布局问题，尤其是全屏布局、两列布局、内容居中之类的场景，下面就是一个使用 flex 实现的全屏布局 demo\n\n[flex 全屏布局 demo - 码上掘金 (juejin.cn)](https://code.juejin.cn/pen/7154945301076410383)\n\n但是对于一些特殊的场景，比如由于宽度缩小但是字体大小没有变化导致的换行错位问题，就需要使用到下面一些方案\n\n### 媒体查询\n\n媒体查询有两种用法\n\n- 直接在 css 文件中定义不同屏幕下的样式\n- 通过 link 中的媒体查询，不同屏幕引用不同的分辨率\n\n比如我要实现一个 1400px 和 900px 两个不同屏幕下的样式，我可以这样使用媒体查询\n\n```css\n/** 方式一：直接定义两个屏幕的样式 **/\n@media screen and (max-width: 1400px) {\n  .home {\n    width: 80%;\n    font-size: 14px;\n  }\n}\n\n@media screen and (max-width: 900px) {\n  .home {\n    width: 100%;\n    font-size: 10px;\n  }\n}\n```\n\n```html\n<!-- 方式二：通过 link 引用不同屏幕的 css 文件 -->\n<link rel=\"stylesheet\" media=\"(max-width: 1400px)\" href=\"pc.css\" />\n<link rel=\"stylesheet\" media=\"(max-width: 900px)\" href=\"laptop.css\" />\n```\n\n媒体查询的兼容性也非常不错，除了 ie 大部分浏览器都支持\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210151059234.png)\n\n### 动态 rem / em 方案\n\nem 和 rem 都是相对单位，区别在于\n\n- em 根据自身字体大小计算\n- rem 根据根节点 html 的字体大小计算（root em），默认是 16 px\n\n所有单位无论是 绝对单位 还是 相对单位，最终都是转化为 px 在屏幕上显示。所以我们只要根据屏幕宽度和设计图的宽度动态声明 `font-size` 的大小，然后以 em / rem 作为长度单位声明所有节点的几何属性，就可以实现自适应布局的效果\n\n```js\nfunction autoResponse(width = 750) {\n  const target = document.documentElement\n  console.log(target.clientWidth)\n  if (target.clientWidth >= 600) {\n    target.style.fontSize = '40px'\n  } else {\n    target.style.fontSize = `${(target.clientWidth / width) * 100}px`\n  }\n}\n\nautoResponse()\n\nwindow.addEventListener('resize', autoResponse)\n```\n\n但需要注意的是要在 html 的 meta 属性中将布局窗口设置为屏幕宽度，并且禁止缩放屏幕\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1\"\n/>\n```\n\n### Viewport 方案\n\n动态 rem / em 方案本质是让页面元素根据屏幕宽度变化等比例缩放，而 CSS 的 Viewport 单位就是相对屏幕宽高的长度单位，常用的 Viewport 单位有四个\n\n- vw：viewpoint width，视窗宽度，1vw 相当于 `window.innerWidth` 的 1%\n- vh：viewpoint height，视窗高度，1vh 相当于 `window.innerHeight` 的 1%\n- vmin：vw 和 vh 中较小的长度\n- vmax：vw 和 vh 中较大的长度\n\n在实际开发中，我们可以使用 [postcss-px-to-viewport](https://www.npmjs.com/package/postcss-px-to-viewport) 这个插件来帮助我们把设计稿的 px 转换成 viewport 单位，这样根据设计稿开发出来的页面可以有很好的响应式效果。另外现在 Viewport 的兼容性支持也非常完善了，这是目前最为推荐响应式方案\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161432426.png)\n\n### scale 整体缩放\n\n最后这个方案主要是是应用在大屏可视化的开发场景\n\n我们在拿到设计稿的时候，会有一个基础的宽高比，比如在 figma 就会有一些常用的设备比例参数，Desktop 的 1440 _ 1024 就表示设计稿是以 width = 1440px、height = 1024px 进行设计的，如果我们按照这个比例进行开发，那么在 1440 _ 1024 分辨率的设备上就能完美展示，但是在其他设备上就会存在展示不完整或者留白的问题\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161044144.png)\n\n既然有了基础比例，我们只要针对不同分辨率下做整体的缩放就好了，这个时候就要使用到 css 的 `scale()` 函数。[`scale()`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/scale) 可以用来设置 `tranform` 属性的缩放比例，如果只有一个参数，比如 `scale(0.8)`，就是 x 轴和 y 轴同时缩小 80%；如果有两个参数，比如 `scale(0.8，0.9)`，就是 x 轴缩小 80%，y 轴缩小 90%。\n\n为了得到缩放比例我们需要拿当前屏幕的宽高比例（比如：1920 _ 1080）和设计稿比例（比如上图的 1440 _ 1024）做一个比较\n\n- 如果当前屏幕宽高比（1920 / 1080）**大于**设计稿宽高比（1440 \\* 1024），需要缩放的比例就是**屏幕高度除以设计稿高度**（1080 / 1024 = 1.05）\n- 如果当前屏幕宽高比（1200 / 900）**小于**设计稿宽高比（1440 \\* 1024），需要缩放的比例就是**屏幕宽度除以设计稿宽度**（1200 / 1440 = 0.83）\n\n下面是简单的代码示例\n\n```js\nconst scale =\n  document.documentElement.clientWidth / document.documentElement.clientHeight >\n  designDraftWidth / designDraftHeight\n    ? document.documentElement.clientHeight / designDraftHeight\n    : document.documentElement.clientWidth / designDraftWidth\n```\n\n有了缩放比例，我们只需要监听浏览器的 `resize` 事件，实时更新缩放比例就可可以达到响应式的效果了，这里放一个 [618 数据大屏](https://sugar.aipage.com/dashboard/5f81db321ff3e080e9f09168c923854f)作为实现效果参考\n\n但是这个方案有几个小问题需要注意，\n\n- 在极端情况下（比如分辨率很高的大屏展示中），可能会因为缩放造成字体模糊问题和不能正确监听到点击事件问题\n- scale 的兼容性相对就没有很好，如果要使用的话需要考虑下兼容性的问题\n- 监听 `resize` 事件最好加上防抖避免性能问题，离开页面时也要注意销毁 `resize` 事件\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210160749015.png)\n\n## 一些简单的经验总结\n\n- 首选 flex 布局方式和 Element 的 row / col 布局，能够很大程度上减少响应式布局的开发工作量\n\n- 对于一个页面 container 中存在多个展示内容的场景，最好在 container 中定义 Viewport 宽高，组件内部的宽度、高度都设置为 100%，其他几何属性通过 Viewport 定义，这样可以增加组件内部的复用性\n- 对于需要特殊处理的属性可以通过\n  1. 媒体查询特殊处理样式\n  2. 监听 `resize` 事件，通过响应式变量修改组件内部样式属性\n- 对于使用 echarts 展示数据的场景，要在浏览器 `resize`事件后手动调用 echarts 的 `resize()` 方法保证图表展示的响应性\n","source":"_posts/PC 端响应式布局方案.md","raw":"---\ntitle: PC 端响应式布局方案\ndate: 2022-10-16 15:49:00\ncategories: 前端\ntags: CSS\n---\n\n最近在工作中做了一些响应式布局的功能和可视化大屏的开发，所以这里我也整理一下用到的响应式布局方案作为未来项目开发的参考方案\n\n## 常用实现方案\n\n### flex 布局\n\nflex 布局一把梭能解决绝大多情况下的响应式布局问题，尤其是全屏布局、两列布局、内容居中之类的场景，下面就是一个使用 flex 实现的全屏布局 demo\n\n[flex 全屏布局 demo - 码上掘金 (juejin.cn)](https://code.juejin.cn/pen/7154945301076410383)\n\n但是对于一些特殊的场景，比如由于宽度缩小但是字体大小没有变化导致的换行错位问题，就需要使用到下面一些方案\n\n### 媒体查询\n\n媒体查询有两种用法\n\n- 直接在 css 文件中定义不同屏幕下的样式\n- 通过 link 中的媒体查询，不同屏幕引用不同的分辨率\n\n比如我要实现一个 1400px 和 900px 两个不同屏幕下的样式，我可以这样使用媒体查询\n\n```css\n/** 方式一：直接定义两个屏幕的样式 **/\n@media screen and (max-width: 1400px) {\n  .home {\n    width: 80%;\n    font-size: 14px;\n  }\n}\n\n@media screen and (max-width: 900px) {\n  .home {\n    width: 100%;\n    font-size: 10px;\n  }\n}\n```\n\n```html\n<!-- 方式二：通过 link 引用不同屏幕的 css 文件 -->\n<link rel=\"stylesheet\" media=\"(max-width: 1400px)\" href=\"pc.css\" />\n<link rel=\"stylesheet\" media=\"(max-width: 900px)\" href=\"laptop.css\" />\n```\n\n媒体查询的兼容性也非常不错，除了 ie 大部分浏览器都支持\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210151059234.png)\n\n### 动态 rem / em 方案\n\nem 和 rem 都是相对单位，区别在于\n\n- em 根据自身字体大小计算\n- rem 根据根节点 html 的字体大小计算（root em），默认是 16 px\n\n所有单位无论是 绝对单位 还是 相对单位，最终都是转化为 px 在屏幕上显示。所以我们只要根据屏幕宽度和设计图的宽度动态声明 `font-size` 的大小，然后以 em / rem 作为长度单位声明所有节点的几何属性，就可以实现自适应布局的效果\n\n```js\nfunction autoResponse(width = 750) {\n  const target = document.documentElement\n  console.log(target.clientWidth)\n  if (target.clientWidth >= 600) {\n    target.style.fontSize = '40px'\n  } else {\n    target.style.fontSize = `${(target.clientWidth / width) * 100}px`\n  }\n}\n\nautoResponse()\n\nwindow.addEventListener('resize', autoResponse)\n```\n\n但需要注意的是要在 html 的 meta 属性中将布局窗口设置为屏幕宽度，并且禁止缩放屏幕\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1\"\n/>\n```\n\n### Viewport 方案\n\n动态 rem / em 方案本质是让页面元素根据屏幕宽度变化等比例缩放，而 CSS 的 Viewport 单位就是相对屏幕宽高的长度单位，常用的 Viewport 单位有四个\n\n- vw：viewpoint width，视窗宽度，1vw 相当于 `window.innerWidth` 的 1%\n- vh：viewpoint height，视窗高度，1vh 相当于 `window.innerHeight` 的 1%\n- vmin：vw 和 vh 中较小的长度\n- vmax：vw 和 vh 中较大的长度\n\n在实际开发中，我们可以使用 [postcss-px-to-viewport](https://www.npmjs.com/package/postcss-px-to-viewport) 这个插件来帮助我们把设计稿的 px 转换成 viewport 单位，这样根据设计稿开发出来的页面可以有很好的响应式效果。另外现在 Viewport 的兼容性支持也非常完善了，这是目前最为推荐响应式方案\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161432426.png)\n\n### scale 整体缩放\n\n最后这个方案主要是是应用在大屏可视化的开发场景\n\n我们在拿到设计稿的时候，会有一个基础的宽高比，比如在 figma 就会有一些常用的设备比例参数，Desktop 的 1440 _ 1024 就表示设计稿是以 width = 1440px、height = 1024px 进行设计的，如果我们按照这个比例进行开发，那么在 1440 _ 1024 分辨率的设备上就能完美展示，但是在其他设备上就会存在展示不完整或者留白的问题\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161044144.png)\n\n既然有了基础比例，我们只要针对不同分辨率下做整体的缩放就好了，这个时候就要使用到 css 的 `scale()` 函数。[`scale()`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/scale) 可以用来设置 `tranform` 属性的缩放比例，如果只有一个参数，比如 `scale(0.8)`，就是 x 轴和 y 轴同时缩小 80%；如果有两个参数，比如 `scale(0.8，0.9)`，就是 x 轴缩小 80%，y 轴缩小 90%。\n\n为了得到缩放比例我们需要拿当前屏幕的宽高比例（比如：1920 _ 1080）和设计稿比例（比如上图的 1440 _ 1024）做一个比较\n\n- 如果当前屏幕宽高比（1920 / 1080）**大于**设计稿宽高比（1440 \\* 1024），需要缩放的比例就是**屏幕高度除以设计稿高度**（1080 / 1024 = 1.05）\n- 如果当前屏幕宽高比（1200 / 900）**小于**设计稿宽高比（1440 \\* 1024），需要缩放的比例就是**屏幕宽度除以设计稿宽度**（1200 / 1440 = 0.83）\n\n下面是简单的代码示例\n\n```js\nconst scale =\n  document.documentElement.clientWidth / document.documentElement.clientHeight >\n  designDraftWidth / designDraftHeight\n    ? document.documentElement.clientHeight / designDraftHeight\n    : document.documentElement.clientWidth / designDraftWidth\n```\n\n有了缩放比例，我们只需要监听浏览器的 `resize` 事件，实时更新缩放比例就可可以达到响应式的效果了，这里放一个 [618 数据大屏](https://sugar.aipage.com/dashboard/5f81db321ff3e080e9f09168c923854f)作为实现效果参考\n\n但是这个方案有几个小问题需要注意，\n\n- 在极端情况下（比如分辨率很高的大屏展示中），可能会因为缩放造成字体模糊问题和不能正确监听到点击事件问题\n- scale 的兼容性相对就没有很好，如果要使用的话需要考虑下兼容性的问题\n- 监听 `resize` 事件最好加上防抖避免性能问题，离开页面时也要注意销毁 `resize` 事件\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210160749015.png)\n\n## 一些简单的经验总结\n\n- 首选 flex 布局方式和 Element 的 row / col 布局，能够很大程度上减少响应式布局的开发工作量\n\n- 对于一个页面 container 中存在多个展示内容的场景，最好在 container 中定义 Viewport 宽高，组件内部的宽度、高度都设置为 100%，其他几何属性通过 Viewport 定义，这样可以增加组件内部的复用性\n- 对于需要特殊处理的属性可以通过\n  1. 媒体查询特殊处理样式\n  2. 监听 `resize` 事件，通过响应式变量修改组件内部样式属性\n- 对于使用 echarts 展示数据的场景，要在浏览器 `resize`事件后手动调用 echarts 的 `resize()` 方法保证图表展示的响应性\n","slug":"PC 端响应式布局方案","published":1,"updated":"2022-10-16T08:04:07.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9b2ah6r0000urtof6mcc6yv","content":"<p>最近在工作中做了一些响应式布局的功能和可视化大屏的开发，所以这里我也整理一下用到的响应式布局方案作为未来项目开发的参考方案</p>\n<h2 id=\"常用实现方案\"><a href=\"#常用实现方案\" class=\"headerlink\" title=\"常用实现方案\"></a>常用实现方案</h2><h3 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h3><p>flex 布局一把梭能解决绝大多情况下的响应式布局问题，尤其是全屏布局、两列布局、内容居中之类的场景，下面就是一个使用 flex 实现的全屏布局 demo</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7154945301076410383\" >flex 全屏布局 demo - 码上掘金 (juejin.cn)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>但是对于一些特殊的场景，比如由于宽度缩小但是字体大小没有变化导致的换行错位问题，就需要使用到下面一些方案</p>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>媒体查询有两种用法</p>\n<ul>\n<li>直接在 css 文件中定义不同屏幕下的样式</li>\n<li>通过 link 中的媒体查询，不同屏幕引用不同的分辨率</li>\n</ul>\n<p>比如我要实现一个 1400px 和 900px 两个不同屏幕下的样式，我可以这样使用媒体查询</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/** 方式一：直接定义两个屏幕的样式 **/</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">.home</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 80%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 900px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">.home</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 方式二：通过 link 引用不同屏幕的 css 文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 1400px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pc.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 900px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>laptop.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>媒体查询的兼容性也非常不错，除了 ie 大部分浏览器都支持</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210151059234.png\"\n                     \n                ></p>\n<h3 id=\"动态-rem-em-方案\"><a href=\"#动态-rem-em-方案\" class=\"headerlink\" title=\"动态 rem / em 方案\"></a>动态 rem / em 方案</h3><p>em 和 rem 都是相对单位，区别在于</p>\n<ul>\n<li>em 根据自身字体大小计算</li>\n<li>rem 根据根节点 html 的字体大小计算（root em），默认是 16 px</li>\n</ul>\n<p>所有单位无论是 绝对单位 还是 相对单位，最终都是转化为 px 在屏幕上显示。所以我们只要根据屏幕宽度和设计图的宽度动态声明 <code>font-size</code> 的大小，然后以 em / rem 作为长度单位声明所有节点的几何属性，就可以实现自适应布局的效果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">autoResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width <span class=\"token operator\">=</span> <span class=\"token number\">750</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">>=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token string\">'40px'</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">autoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> autoResponse<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但需要注意的是要在 html 的 meta 属性中将布局窗口设置为屏幕宽度，并且禁止缩放屏幕</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Viewport-方案\"><a href=\"#Viewport-方案\" class=\"headerlink\" title=\"Viewport 方案\"></a>Viewport 方案</h3><p>动态 rem / em 方案本质是让页面元素根据屏幕宽度变化等比例缩放，而 CSS 的 Viewport 单位就是相对屏幕宽高的长度单位，常用的 Viewport 单位有四个</p>\n<ul>\n<li>vw：viewpoint width，视窗宽度，1vw 相当于 <code>window.innerWidth</code> 的 1%</li>\n<li>vh：viewpoint height，视窗高度，1vh 相当于 <code>window.innerHeight</code> 的 1%</li>\n<li>vmin：vw 和 vh 中较小的长度</li>\n<li>vmax：vw 和 vh 中较大的长度</li>\n</ul>\n<p>在实际开发中，我们可以使用 <a class=\"link\"   href=\"https://www.npmjs.com/package/postcss-px-to-viewport\" >postcss-px-to-viewport<i class=\"fas fa-external-link-alt\"></i></a> 这个插件来帮助我们把设计稿的 px 转换成 viewport 单位，这样根据设计稿开发出来的页面可以有很好的响应式效果。另外现在 Viewport 的兼容性支持也非常完善了，这是目前最为推荐响应式方案</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161432426.png\"\n                     \n                ></p>\n<h3 id=\"scale-整体缩放\"><a href=\"#scale-整体缩放\" class=\"headerlink\" title=\"scale 整体缩放\"></a>scale 整体缩放</h3><p>最后这个方案主要是是应用在大屏可视化的开发场景</p>\n<p>我们在拿到设计稿的时候，会有一个基础的宽高比，比如在 figma 就会有一些常用的设备比例参数，Desktop 的 1440 _ 1024 就表示设计稿是以 width = 1440px、height = 1024px 进行设计的，如果我们按照这个比例进行开发，那么在 1440 _ 1024 分辨率的设备上就能完美展示，但是在其他设备上就会存在展示不完整或者留白的问题</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161044144.png\"\n                     \n                ></p>\n<p>既然有了基础比例，我们只要针对不同分辨率下做整体的缩放就好了，这个时候就要使用到 css 的 <code>scale()</code> 函数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scale\"><code>scale()</code></a> 可以用来设置 <code>tranform</code> 属性的缩放比例，如果只有一个参数，比如 <code>scale(0.8)</code>，就是 x 轴和 y 轴同时缩小 80%；如果有两个参数，比如 <code>scale(0.8，0.9)</code>，就是 x 轴缩小 80%，y 轴缩小 90%。</p>\n<p>为了得到缩放比例我们需要拿当前屏幕的宽高比例（比如：1920 _ 1080）和设计稿比例（比如上图的 1440 _ 1024）做一个比较</p>\n<ul>\n<li>如果当前屏幕宽高比（1920 / 1080）<strong>大于</strong>设计稿宽高比（1440 * 1024），需要缩放的比例就是<strong>屏幕高度除以设计稿高度</strong>（1080 / 1024 = 1.05）</li>\n<li>如果当前屏幕宽高比（1200 / 900）<strong>小于</strong>设计稿宽高比（1440 * 1024），需要缩放的比例就是<strong>屏幕宽度除以设计稿宽度</strong>（1200 / 1440 = 0.83）</li>\n</ul>\n<p>下面是简单的代码示例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span>\n  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">></span>\n  designDraftWidth <span class=\"token operator\">/</span> designDraftHeight\n    <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">/</span> designDraftHeight\n    <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> designDraftWidth<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了缩放比例，我们只需要监听浏览器的 <code>resize</code> 事件，实时更新缩放比例就可可以达到响应式的效果了，这里放一个 <a class=\"link\"   href=\"https://sugar.aipage.com/dashboard/5f81db321ff3e080e9f09168c923854f\" >618 数据大屏<i class=\"fas fa-external-link-alt\"></i></a>作为实现效果参考</p>\n<p>但是这个方案有几个小问题需要注意，</p>\n<ul>\n<li>在极端情况下（比如分辨率很高的大屏展示中），可能会因为缩放造成字体模糊问题和不能正确监听到点击事件问题</li>\n<li>scale 的兼容性相对就没有很好，如果要使用的话需要考虑下兼容性的问题</li>\n<li>监听 <code>resize</code> 事件最好加上防抖避免性能问题，离开页面时也要注意销毁 <code>resize</code> 事件</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210160749015.png\"\n                     \n                ></p>\n<h2 id=\"一些简单的经验总结\"><a href=\"#一些简单的经验总结\" class=\"headerlink\" title=\"一些简单的经验总结\"></a>一些简单的经验总结</h2><ul>\n<li><p>首选 flex 布局方式和 Element 的 row / col 布局，能够很大程度上减少响应式布局的开发工作量</p>\n</li>\n<li><p>对于一个页面 container 中存在多个展示内容的场景，最好在 container 中定义 Viewport 宽高，组件内部的宽度、高度都设置为 100%，其他几何属性通过 Viewport 定义，这样可以增加组件内部的复用性</p>\n</li>\n<li><p>对于需要特殊处理的属性可以通过</p>\n<ol>\n<li>媒体查询特殊处理样式</li>\n<li>监听 <code>resize</code> 事件，通过响应式变量修改组件内部样式属性</li>\n</ol>\n</li>\n<li><p>对于使用 echarts 展示数据的场景，要在浏览器 <code>resize</code>事件后手动调用 echarts 的 <code>resize()</code> 方法保证图表展示的响应性</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在工作中做了一些响应式布局的功能和可视化大屏的开发，所以这里我也整理一下用到的响应式布局方案作为未来项目开发的参考方案</p>\n<h2 id=\"常用实现方案\"><a href=\"#常用实现方案\" class=\"headerlink\" title=\"常用实现方案\"></a>常用实现方案</h2><h3 id=\"flex-布局\"><a href=\"#flex-布局\" class=\"headerlink\" title=\"flex 布局\"></a>flex 布局</h3><p>flex 布局一把梭能解决绝大多情况下的响应式布局问题，尤其是全屏布局、两列布局、内容居中之类的场景，下面就是一个使用 flex 实现的全屏布局 demo</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7154945301076410383\" >flex 全屏布局 demo - 码上掘金 (juejin.cn)<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>但是对于一些特殊的场景，比如由于宽度缩小但是字体大小没有变化导致的换行错位问题，就需要使用到下面一些方案</p>\n<h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><p>媒体查询有两种用法</p>\n<ul>\n<li>直接在 css 文件中定义不同屏幕下的样式</li>\n<li>通过 link 中的媒体查询，不同屏幕引用不同的分辨率</li>\n</ul>\n<p>比如我要实现一个 1400px 和 900px 两个不同屏幕下的样式，我可以这样使用媒体查询</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/** 方式一：直接定义两个屏幕的样式 **/</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1400px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">.home</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 80%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 900px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">.home</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 方式二：通过 link 引用不同屏幕的 css 文件 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 1400px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pc.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 900px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>laptop.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>媒体查询的兼容性也非常不错，除了 ie 大部分浏览器都支持</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210151059234.png\"\n                     \n                ></p>\n<h3 id=\"动态-rem-em-方案\"><a href=\"#动态-rem-em-方案\" class=\"headerlink\" title=\"动态 rem / em 方案\"></a>动态 rem / em 方案</h3><p>em 和 rem 都是相对单位，区别在于</p>\n<ul>\n<li>em 根据自身字体大小计算</li>\n<li>rem 根据根节点 html 的字体大小计算（root em），默认是 16 px</li>\n</ul>\n<p>所有单位无论是 绝对单位 还是 相对单位，最终都是转化为 px 在屏幕上显示。所以我们只要根据屏幕宽度和设计图的宽度动态声明 <code>font-size</code> 的大小，然后以 em / rem 作为长度单位声明所有节点的几何属性，就可以实现自适应布局的效果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">autoResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width <span class=\"token operator\">=</span> <span class=\"token number\">750</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">>=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token string\">'40px'</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> width<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">autoResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> autoResponse<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但需要注意的是要在 html 的 meta 属性中将布局窗口设置为屏幕宽度，并且禁止缩放屏幕</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span>\n  <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Viewport-方案\"><a href=\"#Viewport-方案\" class=\"headerlink\" title=\"Viewport 方案\"></a>Viewport 方案</h3><p>动态 rem / em 方案本质是让页面元素根据屏幕宽度变化等比例缩放，而 CSS 的 Viewport 单位就是相对屏幕宽高的长度单位，常用的 Viewport 单位有四个</p>\n<ul>\n<li>vw：viewpoint width，视窗宽度，1vw 相当于 <code>window.innerWidth</code> 的 1%</li>\n<li>vh：viewpoint height，视窗高度，1vh 相当于 <code>window.innerHeight</code> 的 1%</li>\n<li>vmin：vw 和 vh 中较小的长度</li>\n<li>vmax：vw 和 vh 中较大的长度</li>\n</ul>\n<p>在实际开发中，我们可以使用 <a class=\"link\"   href=\"https://www.npmjs.com/package/postcss-px-to-viewport\" >postcss-px-to-viewport<i class=\"fas fa-external-link-alt\"></i></a> 这个插件来帮助我们把设计稿的 px 转换成 viewport 单位，这样根据设计稿开发出来的页面可以有很好的响应式效果。另外现在 Viewport 的兼容性支持也非常完善了，这是目前最为推荐响应式方案</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161432426.png\"\n                     \n                ></p>\n<h3 id=\"scale-整体缩放\"><a href=\"#scale-整体缩放\" class=\"headerlink\" title=\"scale 整体缩放\"></a>scale 整体缩放</h3><p>最后这个方案主要是是应用在大屏可视化的开发场景</p>\n<p>我们在拿到设计稿的时候，会有一个基础的宽高比，比如在 figma 就会有一些常用的设备比例参数，Desktop 的 1440 _ 1024 就表示设计稿是以 width = 1440px、height = 1024px 进行设计的，如果我们按照这个比例进行开发，那么在 1440 _ 1024 分辨率的设备上就能完美展示，但是在其他设备上就会存在展示不完整或者留白的问题</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210161044144.png\"\n                     \n                ></p>\n<p>既然有了基础比例，我们只要针对不同分辨率下做整体的缩放就好了，这个时候就要使用到 css 的 <code>scale()</code> 函数。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scale\"><code>scale()</code></a> 可以用来设置 <code>tranform</code> 属性的缩放比例，如果只有一个参数，比如 <code>scale(0.8)</code>，就是 x 轴和 y 轴同时缩小 80%；如果有两个参数，比如 <code>scale(0.8，0.9)</code>，就是 x 轴缩小 80%，y 轴缩小 90%。</p>\n<p>为了得到缩放比例我们需要拿当前屏幕的宽高比例（比如：1920 _ 1080）和设计稿比例（比如上图的 1440 _ 1024）做一个比较</p>\n<ul>\n<li>如果当前屏幕宽高比（1920 / 1080）<strong>大于</strong>设计稿宽高比（1440 * 1024），需要缩放的比例就是<strong>屏幕高度除以设计稿高度</strong>（1080 / 1024 = 1.05）</li>\n<li>如果当前屏幕宽高比（1200 / 900）<strong>小于</strong>设计稿宽高比（1440 * 1024），需要缩放的比例就是<strong>屏幕宽度除以设计稿宽度</strong>（1200 / 1440 = 0.83）</li>\n</ul>\n<p>下面是简单的代码示例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span>\n  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">></span>\n  designDraftWidth <span class=\"token operator\">/</span> designDraftHeight\n    <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight <span class=\"token operator\">/</span> designDraftHeight\n    <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> designDraftWidth<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有了缩放比例，我们只需要监听浏览器的 <code>resize</code> 事件，实时更新缩放比例就可可以达到响应式的效果了，这里放一个 <a class=\"link\"   href=\"https://sugar.aipage.com/dashboard/5f81db321ff3e080e9f09168c923854f\" >618 数据大屏<i class=\"fas fa-external-link-alt\"></i></a>作为实现效果参考</p>\n<p>但是这个方案有几个小问题需要注意，</p>\n<ul>\n<li>在极端情况下（比如分辨率很高的大屏展示中），可能会因为缩放造成字体模糊问题和不能正确监听到点击事件问题</li>\n<li>scale 的兼容性相对就没有很好，如果要使用的话需要考虑下兼容性的问题</li>\n<li>监听 <code>resize</code> 事件最好加上防抖避免性能问题，离开页面时也要注意销毁 <code>resize</code> 事件</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202210160749015.png\"\n                     \n                ></p>\n<h2 id=\"一些简单的经验总结\"><a href=\"#一些简单的经验总结\" class=\"headerlink\" title=\"一些简单的经验总结\"></a>一些简单的经验总结</h2><ul>\n<li><p>首选 flex 布局方式和 Element 的 row / col 布局，能够很大程度上减少响应式布局的开发工作量</p>\n</li>\n<li><p>对于一个页面 container 中存在多个展示内容的场景，最好在 container 中定义 Viewport 宽高，组件内部的宽度、高度都设置为 100%，其他几何属性通过 Viewport 定义，这样可以增加组件内部的复用性</p>\n</li>\n<li><p>对于需要特殊处理的属性可以通过</p>\n<ol>\n<li>媒体查询特殊处理样式</li>\n<li>监听 <code>resize</code> 事件，通过响应式变量修改组件内部样式属性</li>\n</ol>\n</li>\n<li><p>对于使用 echarts 展示数据的场景，要在浏览器 <code>resize</code>事件后手动调用 echarts 的 <code>resize()</code> 方法保证图表展示的响应性</p>\n</li>\n</ul>\n"},{"title":"因为懒，我写了个同步cookie的插件","date":"2022-09-14T03:03:00.000Z","_content":"\n## 为什么需要同步 cookie 的需求？\n\n因为我们公司统一登录、统一认证体系实现方式是通过在公司域名下的 cookie 注入 acces_token 等内容，然后在不同系统间通过携带的 cookie 信息进行认证并跳转到对应系统。因为本地开发环境 localhost 和公司域名不在同一个域下，导致需要模拟登录后，需要手动将相关 cookie 信息拷贝在 main.js 文件中，注入到 localhost 域名下。这就导致每次换一个用户登录，我就要手动复制下面这些内容，而且当 cookie 过期时也要重复一遍这样的操作，这对一个程序员来说太繁琐了，太麻烦了，严重影响了摸鱼时间\n\n```js\n// 每次在开发环境都要手动复制 4 个 cookie 信息\nconst evnNode = process.env.VUE_APP_ENV\n\nif (evnNode === 'development') {\n  document.cookie = 'access_token=xxx'\n  document.cookie = 'refresh_token=xxx'\n  document.cookie = 'token_since=123'\n  document.cookie = 'original_access_token=xxx'\n}\n```\n\n所以在这样一个背景下，我开始探索有什么办法能不用每次都手动复制这 4 个复制 cookie 的方案\n\n最初想到的方案是直接通过获取公司域名下的 cookie 信息，但因为浏览器的安全性质，是不能获取跨域的 cookie 信息的，这个时候又想到改造浏览器的安全限制，但这个方案不具有通用性，就先放弃了。第二个考虑的方案是本地起一个 node 中间件，通过这个中间间实现携带 cookie，但是因为实现复杂也放弃了\n\n之后在一次偶然的百度中发现 chrome 插件可以突破跨域的限制，获取到不同域名下的 cookie，然后百度了一下 chrome 插件的开发者文档，找到了监听 cookie 变化的事件，研究到这里，我觉得可以开始实现需求了\n\n## 撸起袖子开始干\n\n一个 chrome 插件本质也是一个前端应用运行在 chrome 浏览器的环境里，所以直接就选择了 Vue3 + Vite2 进行开发。先用 `pnpm create vite` 初始化一个 vite 项目，安装好需要使用的 UI 库 Ant Design Vue，删掉无用的内容之后先得到一个基础的项目结构\n\n接下来配置 chrome 插件的信息，chrome 插件主要是在 `manifest.json` 文件中配置基础信息。在 public 目录下新建一个 `manifast.json` 文件，文件中有几个配置是比较重要的，这里特别解释一下\n\n- `manifest_version`：定义配置清单的版本，从 Chrome 88 开始就是 V3，我是用的也是 3 这个版本\n- `permissions`：申请操作 chrome 的一些操作权限，这个插件里我主要用到的是 storage 和 cookies 的权限\n- `host_permissions`：申请有权限操作的域名，这里直接指定所有域名 `\"<all_urls>\"` 即可\n- `background`：后台运行脚本指定的属性，可以是 HTML，也可以是 JS 文件，主要是用于在后台监听 cookie 变化\n\n插件的 icon 我是在阿里的 [iconfont](https://www.iconfont.cn/) 上下载的，下载时可以选择不同的大小，其他信息就直接附上源码好了\n\n```json\n{\n  \"manifest_version\": 3,\n  \"name\": \"sync-cookie-extension\",\n  \"version\": \"1.0.0\",\n  \"description\": \"开发环境同步测试 cookie 至 localhost，便于本地请求服务携带 cookie\",\n  \"icons\": {\n    \"16\": \"sources/cookie16.png\",\n    \"32\": \"sources/cookie32.png\",\n    \"48\": \"sources/cookie48.png\",\n    \"128\": \"sources/cookie128.png\"\n  },\n  \"action\": {\n    \"default_icon\": \"sources/cookie48.png\",\n    \"default_title\": \"解决本地开发 localhost 请求无法携带 cookie 问题\",\n    \"default_popup\": \"index.html\"\n  },\n  \"permissions\": [\"storage\", \"cookies\"],\n  \"host_permissions\": [\"<all_urls>\"],\n  \"background\": {\n    \"service_worker\": \"background.js\",\n    \"type\": \"module\"\n  }\n}\n```\n\n然后就是插件的功能开发，根据需求这个插件主要实现的两个功能\n\n1. 支持配置需要同步到本地的域名和 cookie 名称，支持开启和关闭同步\n\n2. 当配置列表中的 cookie 发生变化时，能够将同步至本地\n\n第一个功能就是基于可编辑表格的 CRUD 一套功能，我是用的 Ant Design Vue 来开发的，一套操作下来页面效果是这样的（[源码地址](https://github.com/wujieli0207/chrome-sync-cookie-extension/blob/master/src/components/Main.vue)）\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2007.32.34.png)\n\n下面就是实现最主要的同步功能：当 from 字段下 cookie name 发上变化时，将 cookie 同步至 to 字段对应的域名下（默认是 localhost ）\n\n第一步先要将我们在列表中配置的域名信息存储在 localstorage 中，一方面为了在插件后台中能够获取到需要同步的列表，另一方面当插件刷新时列表信息也不会丢失。然后还要写一个同步 cookie 的方法 `updateCookie` 方法用于加载时第一次同步 cookie\n\n```ts\n// 在 useStorage.ts 中定义存储 localstorage 方法和更新 cookie 的方法\nimport {\n  ICookieTableDataSource,\n  ICookie,\n  TCookieConfig,\n  LIST_KEY,\n} from '../type'\n\n// 增加协议头\nfunction addProtocol(uri: string) {\n  return uri.startsWith('http') ? uri : `http://${uri}`\n}\n\n// 移除协议头\nfunction removeProtocol(uri: string) {\n  return uri.startsWith('http')\n    ? uri.replace('http://', '').replace('https://', '')\n    : uri\n}\n\nconst useStorage = () => {\n  async function updateStorage(list: ICookieTableDataSource[]) {\n    await chrome.storage.local.set({ [LIST_KEY]: list })\n  }\n\n  async function getStorage(key = LIST_KEY) {\n    return await chrome.storage.local.get(key)\n  }\n\n  async function updateCookie(config: TCookieConfig) {\n    try {\n      const cookie = await chrome.cookies.get({\n        url: addProtocol(config.from || 'url'),\n        name: config.cookieName || 'name',\n      })\n\n      return cookie ? await setCookie(cookie, config) : null\n    } catch (error) {\n      console.error('error: ', error)\n    }\n  }\n\n  function setCookie(cookie: ICookie, config: TCookieConfig) {\n    return chrome.cookies.set({\n      url: addProtocol(config.to || 'url'),\n      domain: removeProtocol(config.to || 'url'),\n      name: cookie.name,\n      path: '/',\n      value: cookie.value,\n    })\n  }\n\n  return {\n    updateStorage,\n    getStorage,\n    updateCookie,\n  }\n}\n\nexport default useStorage\n```\n\n第二步就是在插件首次加载的时候，从 localhost 读取是否开启同步和配置列表，然后读取配置列表的信息更新 cookie\n\n```ts\n// 读取是否同步开启和配置列表\nconst dataSource = ref<ICookieTableDataSource[]>(DEFAULT_LIST) // DEFAULT_LIST 是默认最初的同步列表，这样第一次加载插件时 localstorage 为空的话也不用手动在写一遍\n\nconst { updateStorage, getStorage, updateCookie } = useStorage()\n\nonMounted(async () => {\n  // 初始化开启同步状态\n  const openSyncLocal = await getStorage('isOpenSync')\n\n  if (!isEmpty(openSyncLocal)) {\n    isOpenSync.value = openSyncLocal.isOpenSync\n  }\n\n  // 从 localStorage 初始化数据\n  const storage = await getStorage()\n  const domainList = !isEmpty(storage)\n    ? (Object.values(storage[LIST_KEY]) as ICookieTableDataSource[])\n    : []\n\n  if (!isEmpty(domainList)) {\n    dataSource.value = domainList\n  }\n\n  // 更新 localStorage 和 cookie\n  if (!isEmpty(unref(dataSource))) {\n    updateStorage(dataSource.value)\n\n    dataSource.value.forEach((item) => {\n      updateCookie({\n        from: item.from,\n        to: item.to,\n        cookieName: item.cookieName,\n      })\n    })\n  }\n})\n```\n\n第三步当是否开启同步状态和配置列表发生变化时需要更新 localhost，这里使用 watch 监听同步状态的改变，然后再保存同步列表的方法里新增更新 localstorage\n\n```ts\nwatch(isOpenSync, async () => {\n  await chrome.storage.local.set({ isOpenSync: isOpenSync.value })\n})\n\nasync function handleSave(rowId: string) {\n  Object.assign(\n    dataSource.value.filter((item) => item.id === rowId)[0],\n    editableData[rowId]\n  )\n  delete editableData[rowId]\n  // 更新 localStorage\n  updateStorage(dataSource.value)\n}\n```\n\n到这里已经实现的第一次的 cookie 同步功能，然后就要用到监听 cookie 变化的事件 `chrome.cookies.onChanged.addListener` 了。我们之前在 `manifest.json` 文件中配置了 `background` 这个参数，这个时候就要用上了\n\n```json\n\"background\": {\n  \"service_worker\": \"background.js\",\n  \"type\": \"module\"\n}\n```\n\n在项目 public 目录下新建 `background.js`，添加 cookie 改变监听事件函数，然后从 localhost 中获取是否开启同步状态和配置列表，在开启同步的状态下，从列表中找到需要更新的 cookie 同步至本地就可以了\n\n```js\naddCookiesChangeEvent()\n\nfunction addCookiesChangeEvent() {\n  console.log('start addCookiesChangeEvent')\n  chrome.cookies.onChanged.addListener(async ({ cookie, removed }) => {\n    // 判断是否开启同步\n    const openSyncObj = await chrome.storage.local.get('isOpenSync')\n    const isOpenSync = openSyncObj.isOpenSync\n\n    if (!isOpenSync) return\n\n    const storage = await chrome.storage.local.get(['domainList'])\n\n    if (Object.keys(storage).length === 0) return\n    const domainList = Object.values(storage['domainList'])\n\n    // 需求更新的 cookie\n    const target = domainList.find((item) => {\n      return (\n        equalDomain(item.from, cookie.domain) && item.cookieName === cookie.name\n      )\n    })\n\n    if (target) {\n      if (removed) {\n        removeCookie(cookie, target)\n      } else {\n        setCookie(cookie, target)\n      }\n    }\n  })\n}\n\nfunction setCookie(cookie, config) {\n  return chrome.cookies.set({\n    url: addProtocol(config.to || 'url'),\n    domain: removeProtocol(config.to || 'url'),\n    name: cookie.name,\n    path: '/',\n    value: cookie.value,\n  })\n}\n\nfunction removeCookie(cookie, config) {\n  chrome.cookies.remove({\n    url: addProtocol(config.to || 'url'),\n    name: cookie.name,\n  })\n}\n\n// 增加协议头\nfunction addProtocol(uri) {\n  return uri.startsWith('http') ? uri : `http://${uri}`\n}\n\n// 移除协议头\nfunction removeProtocol(uri) {\n  return uri.startsWith('http')\n    ? uri.replace('http://', '').replace('https://', '')\n    : uri\n}\n\nfunction equalDomain(domain1, domain2) {\n  return addProtocol(domain1) === addProtocol(domain2)\n}\n```\n\n到这里同步功能就已经实现了，接下来打包项目 `pnpm run build`，打开 chrome 浏览器开发者模式，选择“加载解压缩的扩展”，选择打包的 dist 文件安装，如果安装成功的话可以看到这样一个图标\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.17.10.png)\n\n最后测试一下插件的效果，在百度域名下输入一个测试域名，然后在 localhost 下刷新一下，可以看到 cookie 已经成功同步过去了，大功告成\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.04.png)\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.47.png)\n\n代码我也上传到了 github，有兴趣的话大家也可以 star 支持一波，[源码地址](https://github.com/wujieli0207/chrome-sync-cookie-extension)\n","source":"_posts/因为懒，我写了个同步cookie的插件.md","raw":"---\ntitle: 因为懒，我写了个同步cookie的插件\ndate: 2022-09-14 11:03:00\ncategories: 前端\ntags: chrome\n---\n\n## 为什么需要同步 cookie 的需求？\n\n因为我们公司统一登录、统一认证体系实现方式是通过在公司域名下的 cookie 注入 acces_token 等内容，然后在不同系统间通过携带的 cookie 信息进行认证并跳转到对应系统。因为本地开发环境 localhost 和公司域名不在同一个域下，导致需要模拟登录后，需要手动将相关 cookie 信息拷贝在 main.js 文件中，注入到 localhost 域名下。这就导致每次换一个用户登录，我就要手动复制下面这些内容，而且当 cookie 过期时也要重复一遍这样的操作，这对一个程序员来说太繁琐了，太麻烦了，严重影响了摸鱼时间\n\n```js\n// 每次在开发环境都要手动复制 4 个 cookie 信息\nconst evnNode = process.env.VUE_APP_ENV\n\nif (evnNode === 'development') {\n  document.cookie = 'access_token=xxx'\n  document.cookie = 'refresh_token=xxx'\n  document.cookie = 'token_since=123'\n  document.cookie = 'original_access_token=xxx'\n}\n```\n\n所以在这样一个背景下，我开始探索有什么办法能不用每次都手动复制这 4 个复制 cookie 的方案\n\n最初想到的方案是直接通过获取公司域名下的 cookie 信息，但因为浏览器的安全性质，是不能获取跨域的 cookie 信息的，这个时候又想到改造浏览器的安全限制，但这个方案不具有通用性，就先放弃了。第二个考虑的方案是本地起一个 node 中间件，通过这个中间间实现携带 cookie，但是因为实现复杂也放弃了\n\n之后在一次偶然的百度中发现 chrome 插件可以突破跨域的限制，获取到不同域名下的 cookie，然后百度了一下 chrome 插件的开发者文档，找到了监听 cookie 变化的事件，研究到这里，我觉得可以开始实现需求了\n\n## 撸起袖子开始干\n\n一个 chrome 插件本质也是一个前端应用运行在 chrome 浏览器的环境里，所以直接就选择了 Vue3 + Vite2 进行开发。先用 `pnpm create vite` 初始化一个 vite 项目，安装好需要使用的 UI 库 Ant Design Vue，删掉无用的内容之后先得到一个基础的项目结构\n\n接下来配置 chrome 插件的信息，chrome 插件主要是在 `manifest.json` 文件中配置基础信息。在 public 目录下新建一个 `manifast.json` 文件，文件中有几个配置是比较重要的，这里特别解释一下\n\n- `manifest_version`：定义配置清单的版本，从 Chrome 88 开始就是 V3，我是用的也是 3 这个版本\n- `permissions`：申请操作 chrome 的一些操作权限，这个插件里我主要用到的是 storage 和 cookies 的权限\n- `host_permissions`：申请有权限操作的域名，这里直接指定所有域名 `\"<all_urls>\"` 即可\n- `background`：后台运行脚本指定的属性，可以是 HTML，也可以是 JS 文件，主要是用于在后台监听 cookie 变化\n\n插件的 icon 我是在阿里的 [iconfont](https://www.iconfont.cn/) 上下载的，下载时可以选择不同的大小，其他信息就直接附上源码好了\n\n```json\n{\n  \"manifest_version\": 3,\n  \"name\": \"sync-cookie-extension\",\n  \"version\": \"1.0.0\",\n  \"description\": \"开发环境同步测试 cookie 至 localhost，便于本地请求服务携带 cookie\",\n  \"icons\": {\n    \"16\": \"sources/cookie16.png\",\n    \"32\": \"sources/cookie32.png\",\n    \"48\": \"sources/cookie48.png\",\n    \"128\": \"sources/cookie128.png\"\n  },\n  \"action\": {\n    \"default_icon\": \"sources/cookie48.png\",\n    \"default_title\": \"解决本地开发 localhost 请求无法携带 cookie 问题\",\n    \"default_popup\": \"index.html\"\n  },\n  \"permissions\": [\"storage\", \"cookies\"],\n  \"host_permissions\": [\"<all_urls>\"],\n  \"background\": {\n    \"service_worker\": \"background.js\",\n    \"type\": \"module\"\n  }\n}\n```\n\n然后就是插件的功能开发，根据需求这个插件主要实现的两个功能\n\n1. 支持配置需要同步到本地的域名和 cookie 名称，支持开启和关闭同步\n\n2. 当配置列表中的 cookie 发生变化时，能够将同步至本地\n\n第一个功能就是基于可编辑表格的 CRUD 一套功能，我是用的 Ant Design Vue 来开发的，一套操作下来页面效果是这样的（[源码地址](https://github.com/wujieli0207/chrome-sync-cookie-extension/blob/master/src/components/Main.vue)）\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2007.32.34.png)\n\n下面就是实现最主要的同步功能：当 from 字段下 cookie name 发上变化时，将 cookie 同步至 to 字段对应的域名下（默认是 localhost ）\n\n第一步先要将我们在列表中配置的域名信息存储在 localstorage 中，一方面为了在插件后台中能够获取到需要同步的列表，另一方面当插件刷新时列表信息也不会丢失。然后还要写一个同步 cookie 的方法 `updateCookie` 方法用于加载时第一次同步 cookie\n\n```ts\n// 在 useStorage.ts 中定义存储 localstorage 方法和更新 cookie 的方法\nimport {\n  ICookieTableDataSource,\n  ICookie,\n  TCookieConfig,\n  LIST_KEY,\n} from '../type'\n\n// 增加协议头\nfunction addProtocol(uri: string) {\n  return uri.startsWith('http') ? uri : `http://${uri}`\n}\n\n// 移除协议头\nfunction removeProtocol(uri: string) {\n  return uri.startsWith('http')\n    ? uri.replace('http://', '').replace('https://', '')\n    : uri\n}\n\nconst useStorage = () => {\n  async function updateStorage(list: ICookieTableDataSource[]) {\n    await chrome.storage.local.set({ [LIST_KEY]: list })\n  }\n\n  async function getStorage(key = LIST_KEY) {\n    return await chrome.storage.local.get(key)\n  }\n\n  async function updateCookie(config: TCookieConfig) {\n    try {\n      const cookie = await chrome.cookies.get({\n        url: addProtocol(config.from || 'url'),\n        name: config.cookieName || 'name',\n      })\n\n      return cookie ? await setCookie(cookie, config) : null\n    } catch (error) {\n      console.error('error: ', error)\n    }\n  }\n\n  function setCookie(cookie: ICookie, config: TCookieConfig) {\n    return chrome.cookies.set({\n      url: addProtocol(config.to || 'url'),\n      domain: removeProtocol(config.to || 'url'),\n      name: cookie.name,\n      path: '/',\n      value: cookie.value,\n    })\n  }\n\n  return {\n    updateStorage,\n    getStorage,\n    updateCookie,\n  }\n}\n\nexport default useStorage\n```\n\n第二步就是在插件首次加载的时候，从 localhost 读取是否开启同步和配置列表，然后读取配置列表的信息更新 cookie\n\n```ts\n// 读取是否同步开启和配置列表\nconst dataSource = ref<ICookieTableDataSource[]>(DEFAULT_LIST) // DEFAULT_LIST 是默认最初的同步列表，这样第一次加载插件时 localstorage 为空的话也不用手动在写一遍\n\nconst { updateStorage, getStorage, updateCookie } = useStorage()\n\nonMounted(async () => {\n  // 初始化开启同步状态\n  const openSyncLocal = await getStorage('isOpenSync')\n\n  if (!isEmpty(openSyncLocal)) {\n    isOpenSync.value = openSyncLocal.isOpenSync\n  }\n\n  // 从 localStorage 初始化数据\n  const storage = await getStorage()\n  const domainList = !isEmpty(storage)\n    ? (Object.values(storage[LIST_KEY]) as ICookieTableDataSource[])\n    : []\n\n  if (!isEmpty(domainList)) {\n    dataSource.value = domainList\n  }\n\n  // 更新 localStorage 和 cookie\n  if (!isEmpty(unref(dataSource))) {\n    updateStorage(dataSource.value)\n\n    dataSource.value.forEach((item) => {\n      updateCookie({\n        from: item.from,\n        to: item.to,\n        cookieName: item.cookieName,\n      })\n    })\n  }\n})\n```\n\n第三步当是否开启同步状态和配置列表发生变化时需要更新 localhost，这里使用 watch 监听同步状态的改变，然后再保存同步列表的方法里新增更新 localstorage\n\n```ts\nwatch(isOpenSync, async () => {\n  await chrome.storage.local.set({ isOpenSync: isOpenSync.value })\n})\n\nasync function handleSave(rowId: string) {\n  Object.assign(\n    dataSource.value.filter((item) => item.id === rowId)[0],\n    editableData[rowId]\n  )\n  delete editableData[rowId]\n  // 更新 localStorage\n  updateStorage(dataSource.value)\n}\n```\n\n到这里已经实现的第一次的 cookie 同步功能，然后就要用到监听 cookie 变化的事件 `chrome.cookies.onChanged.addListener` 了。我们之前在 `manifest.json` 文件中配置了 `background` 这个参数，这个时候就要用上了\n\n```json\n\"background\": {\n  \"service_worker\": \"background.js\",\n  \"type\": \"module\"\n}\n```\n\n在项目 public 目录下新建 `background.js`，添加 cookie 改变监听事件函数，然后从 localhost 中获取是否开启同步状态和配置列表，在开启同步的状态下，从列表中找到需要更新的 cookie 同步至本地就可以了\n\n```js\naddCookiesChangeEvent()\n\nfunction addCookiesChangeEvent() {\n  console.log('start addCookiesChangeEvent')\n  chrome.cookies.onChanged.addListener(async ({ cookie, removed }) => {\n    // 判断是否开启同步\n    const openSyncObj = await chrome.storage.local.get('isOpenSync')\n    const isOpenSync = openSyncObj.isOpenSync\n\n    if (!isOpenSync) return\n\n    const storage = await chrome.storage.local.get(['domainList'])\n\n    if (Object.keys(storage).length === 0) return\n    const domainList = Object.values(storage['domainList'])\n\n    // 需求更新的 cookie\n    const target = domainList.find((item) => {\n      return (\n        equalDomain(item.from, cookie.domain) && item.cookieName === cookie.name\n      )\n    })\n\n    if (target) {\n      if (removed) {\n        removeCookie(cookie, target)\n      } else {\n        setCookie(cookie, target)\n      }\n    }\n  })\n}\n\nfunction setCookie(cookie, config) {\n  return chrome.cookies.set({\n    url: addProtocol(config.to || 'url'),\n    domain: removeProtocol(config.to || 'url'),\n    name: cookie.name,\n    path: '/',\n    value: cookie.value,\n  })\n}\n\nfunction removeCookie(cookie, config) {\n  chrome.cookies.remove({\n    url: addProtocol(config.to || 'url'),\n    name: cookie.name,\n  })\n}\n\n// 增加协议头\nfunction addProtocol(uri) {\n  return uri.startsWith('http') ? uri : `http://${uri}`\n}\n\n// 移除协议头\nfunction removeProtocol(uri) {\n  return uri.startsWith('http')\n    ? uri.replace('http://', '').replace('https://', '')\n    : uri\n}\n\nfunction equalDomain(domain1, domain2) {\n  return addProtocol(domain1) === addProtocol(domain2)\n}\n```\n\n到这里同步功能就已经实现了，接下来打包项目 `pnpm run build`，打开 chrome 浏览器开发者模式，选择“加载解压缩的扩展”，选择打包的 dist 文件安装，如果安装成功的话可以看到这样一个图标\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.17.10.png)\n\n最后测试一下插件的效果，在百度域名下输入一个测试域名，然后在 localhost 下刷新一下，可以看到 cookie 已经成功同步过去了，大功告成\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.04.png)\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.47.png)\n\n代码我也上传到了 github，有兴趣的话大家也可以 star 支持一波，[源码地址](https://github.com/wujieli0207/chrome-sync-cookie-extension)\n","slug":"因为懒，我写了个同步cookie的插件","published":1,"updated":"2022-10-16T07:58:42.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9b2ah6v0001urto4yszayr8","content":"<h2 id=\"为什么需要同步-cookie-的需求？\"><a href=\"#为什么需要同步-cookie-的需求？\" class=\"headerlink\" title=\"为什么需要同步 cookie 的需求？\"></a>为什么需要同步 cookie 的需求？</h2><p>因为我们公司统一登录、统一认证体系实现方式是通过在公司域名下的 cookie 注入 acces_token 等内容，然后在不同系统间通过携带的 cookie 信息进行认证并跳转到对应系统。因为本地开发环境 localhost 和公司域名不在同一个域下，导致需要模拟登录后，需要手动将相关 cookie 信息拷贝在 main.js 文件中，注入到 localhost 域名下。这就导致每次换一个用户登录，我就要手动复制下面这些内容，而且当 cookie 过期时也要重复一遍这样的操作，这对一个程序员来说太繁琐了，太麻烦了，严重影响了摸鱼时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 每次在开发环境都要手动复制 4 个 cookie 信息</span>\n<span class=\"token keyword\">const</span> evnNode <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_ENV</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evnNode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'access_token=xxx'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'refresh_token=xxx'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'token_since=123'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'original_access_token=xxx'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以在这样一个背景下，我开始探索有什么办法能不用每次都手动复制这 4 个复制 cookie 的方案</p>\n<p>最初想到的方案是直接通过获取公司域名下的 cookie 信息，但因为浏览器的安全性质，是不能获取跨域的 cookie 信息的，这个时候又想到改造浏览器的安全限制，但这个方案不具有通用性，就先放弃了。第二个考虑的方案是本地起一个 node 中间件，通过这个中间间实现携带 cookie，但是因为实现复杂也放弃了</p>\n<p>之后在一次偶然的百度中发现 chrome 插件可以突破跨域的限制，获取到不同域名下的 cookie，然后百度了一下 chrome 插件的开发者文档，找到了监听 cookie 变化的事件，研究到这里，我觉得可以开始实现需求了</p>\n<h2 id=\"撸起袖子开始干\"><a href=\"#撸起袖子开始干\" class=\"headerlink\" title=\"撸起袖子开始干\"></a>撸起袖子开始干</h2><p>一个 chrome 插件本质也是一个前端应用运行在 chrome 浏览器的环境里，所以直接就选择了 Vue3 + Vite2 进行开发。先用 <code>pnpm create vite</code> 初始化一个 vite 项目，安装好需要使用的 UI 库 Ant Design Vue，删掉无用的内容之后先得到一个基础的项目结构</p>\n<p>接下来配置 chrome 插件的信息，chrome 插件主要是在 <code>manifest.json</code> 文件中配置基础信息。在 public 目录下新建一个 <code>manifast.json</code> 文件，文件中有几个配置是比较重要的，这里特别解释一下</p>\n<ul>\n<li><code>manifest_version</code>：定义配置清单的版本，从 Chrome 88 开始就是 V3，我是用的也是 3 这个版本</li>\n<li><code>permissions</code>：申请操作 chrome 的一些操作权限，这个插件里我主要用到的是 storage 和 cookies 的权限</li>\n<li><code>host_permissions</code>：申请有权限操作的域名，这里直接指定所有域名 <code>&quot;&lt;all_urls&gt;&quot;</code> 即可</li>\n<li><code>background</code>：后台运行脚本指定的属性，可以是 HTML，也可以是 JS 文件，主要是用于在后台监听 cookie 变化</li>\n</ul>\n<p>插件的 icon 我是在阿里的 <a class=\"link\"   href=\"https://www.iconfont.cn/\" >iconfont<i class=\"fas fa-external-link-alt\"></i></a> 上下载的，下载时可以选择不同的大小，其他信息就直接附上源码好了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"manifest_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sync-cookie-extension\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"开发环境同步测试 cookie 至 localhost，便于本地请求服务携带 cookie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"icons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"16\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie16.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"32\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie32.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"48\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie48.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"128\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie128.png\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"default_icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie48.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"default_title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"解决本地开发 localhost 请求无法携带 cookie 问题\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"default_popup\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.html\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"storage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cookies\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"host_permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;all_urls>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"service_worker\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后就是插件的功能开发，根据需求这个插件主要实现的两个功能</p>\n<ol>\n<li><p>支持配置需要同步到本地的域名和 cookie 名称，支持开启和关闭同步</p>\n</li>\n<li><p>当配置列表中的 cookie 发生变化时，能够将同步至本地</p>\n</li>\n</ol>\n<p>第一个功能就是基于可编辑表格的 CRUD 一套功能，我是用的 Ant Design Vue 来开发的，一套操作下来页面效果是这样的（<a class=\"link\"   href=\"https://github.com/wujieli0207/chrome-sync-cookie-extension/blob/master/src/components/Main.vue\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2007.32.34.png\"\n                     \n                ></p>\n<p>下面就是实现最主要的同步功能：当 from 字段下 cookie name 发上变化时，将 cookie 同步至 to 字段对应的域名下（默认是 localhost ）</p>\n<p>第一步先要将我们在列表中配置的域名信息存储在 localstorage 中，一方面为了在插件后台中能够获取到需要同步的列表，另一方面当插件刷新时列表信息也不会丢失。然后还要写一个同步 cookie 的方法 <code>updateCookie</code> 方法用于加载时第一次同步 cookie</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 在 useStorage.ts 中定义存储 localstorage 方法和更新 cookie 的方法</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>\n  ICookieTableDataSource<span class=\"token punctuation\">,</span>\n  ICookie<span class=\"token punctuation\">,</span>\n  TCookieConfig<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type'</span>\n\n<span class=\"token comment\">// 增加协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> uri <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uri<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 移除协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> uri\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStorage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">:</span> ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> list <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateCookie</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> TCookieConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        url<span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>from <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>cookieName <span class=\"token operator\">||</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> cookie <span class=\"token operator\">?</span> <span class=\"token keyword\">await</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token operator\">:</span> ICookie<span class=\"token punctuation\">,</span> config<span class=\"token operator\">:</span> TCookieConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      url<span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      domain<span class=\"token operator\">:</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    updateStorage<span class=\"token punctuation\">,</span>\n    getStorage<span class=\"token punctuation\">,</span>\n    updateCookie<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useStorage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二步就是在插件首次加载的时候，从 localhost 读取是否开启同步和配置列表，然后读取配置列表的信息更新 cookie</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 读取是否同步开启和配置列表</span>\n<span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LIST</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// DEFAULT_LIST 是默认最初的同步列表，这样第一次加载插件时 localstorage 为空的话也不用手动在写一遍</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> updateStorage<span class=\"token punctuation\">,</span> getStorage<span class=\"token punctuation\">,</span> updateCookie <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 初始化开启同步状态</span>\n  <span class=\"token keyword\">const</span> openSyncLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isOpenSync'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>openSyncLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    isOpenSync<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> openSyncLocal<span class=\"token punctuation\">.</span>isOpenSync\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 从 localStorage 初始化数据</span>\n  <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> domainList <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span><span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>domainList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    dataSource<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> domainList\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 更新 localStorage 和 cookie</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n    dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">updateCookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        from<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>\n        to<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">,</span>\n        cookieName<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>cookieName<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步当是否开启同步状态和配置列表发生变化时需要更新 localhost，这里使用 watch 监听同步状态的改变，然后再保存同步列表的方法里新增更新 localstorage</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>isOpenSync<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isOpenSync<span class=\"token operator\">:</span> isOpenSync<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleSave</span><span class=\"token punctuation\">(</span>rowId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n    dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> rowId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    editableData<span class=\"token punctuation\">[</span>rowId<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> editableData<span class=\"token punctuation\">[</span>rowId<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 更新 localStorage</span>\n  <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里已经实现的第一次的 cookie 同步功能，然后就要用到监听 cookie 变化的事件 <code>chrome.cookies.onChanged.addListener</code> 了。我们之前在 <code>manifest.json</code> 文件中配置了 <code>background</code> 这个参数，这个时候就要用上了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"service_worker\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在项目 public 目录下新建 <code>background.js</code>，添加 cookie 改变监听事件函数，然后从 localhost 中获取是否开启同步状态和配置列表，在开启同步的状态下，从列表中找到需要更新的 cookie 同步至本地就可以了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addCookiesChangeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addCookiesChangeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start addCookiesChangeEvent'</span><span class=\"token punctuation\">)</span>\n  chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>onChanged<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> cookie<span class=\"token punctuation\">,</span> removed <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断是否开启同步</span>\n    <span class=\"token keyword\">const</span> openSyncObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isOpenSync'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> isOpenSync <span class=\"token operator\">=</span> openSyncObj<span class=\"token punctuation\">.</span>isOpenSync\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOpenSync<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'domainList'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">const</span> domainList <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span><span class=\"token string\">'domainList'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 需求更新的 cookie</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> domainList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">equalDomain</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>cookieName <span class=\"token operator\">===</span> cookie<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">removeCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">domain</span><span class=\"token operator\">:</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 增加协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> uri <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uri<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 移除协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> uri\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">equalDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">domain1<span class=\"token punctuation\">,</span> domain2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>domain1<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>domain2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里同步功能就已经实现了，接下来打包项目 <code>pnpm run build</code>，打开 chrome 浏览器开发者模式，选择“加载解压缩的扩展”，选择打包的 dist 文件安装，如果安装成功的话可以看到这样一个图标</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.17.10.png\"\n                     \n                ></p>\n<p>最后测试一下插件的效果，在百度域名下输入一个测试域名，然后在 localhost 下刷新一下，可以看到 cookie 已经成功同步过去了，大功告成</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.04.png\"\n                     \n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.47.png\"\n                     \n                ></p>\n<p>代码我也上传到了 github，有兴趣的话大家也可以 star 支持一波，<a class=\"link\"   href=\"https://github.com/wujieli0207/chrome-sync-cookie-extension\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么需要同步-cookie-的需求？\"><a href=\"#为什么需要同步-cookie-的需求？\" class=\"headerlink\" title=\"为什么需要同步 cookie 的需求？\"></a>为什么需要同步 cookie 的需求？</h2><p>因为我们公司统一登录、统一认证体系实现方式是通过在公司域名下的 cookie 注入 acces_token 等内容，然后在不同系统间通过携带的 cookie 信息进行认证并跳转到对应系统。因为本地开发环境 localhost 和公司域名不在同一个域下，导致需要模拟登录后，需要手动将相关 cookie 信息拷贝在 main.js 文件中，注入到 localhost 域名下。这就导致每次换一个用户登录，我就要手动复制下面这些内容，而且当 cookie 过期时也要重复一遍这样的操作，这对一个程序员来说太繁琐了，太麻烦了，严重影响了摸鱼时间</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 每次在开发环境都要手动复制 4 个 cookie 信息</span>\n<span class=\"token keyword\">const</span> evnNode <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_ENV</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evnNode <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'access_token=xxx'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'refresh_token=xxx'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'token_since=123'</span>\n  document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'original_access_token=xxx'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以在这样一个背景下，我开始探索有什么办法能不用每次都手动复制这 4 个复制 cookie 的方案</p>\n<p>最初想到的方案是直接通过获取公司域名下的 cookie 信息，但因为浏览器的安全性质，是不能获取跨域的 cookie 信息的，这个时候又想到改造浏览器的安全限制，但这个方案不具有通用性，就先放弃了。第二个考虑的方案是本地起一个 node 中间件，通过这个中间间实现携带 cookie，但是因为实现复杂也放弃了</p>\n<p>之后在一次偶然的百度中发现 chrome 插件可以突破跨域的限制，获取到不同域名下的 cookie，然后百度了一下 chrome 插件的开发者文档，找到了监听 cookie 变化的事件，研究到这里，我觉得可以开始实现需求了</p>\n<h2 id=\"撸起袖子开始干\"><a href=\"#撸起袖子开始干\" class=\"headerlink\" title=\"撸起袖子开始干\"></a>撸起袖子开始干</h2><p>一个 chrome 插件本质也是一个前端应用运行在 chrome 浏览器的环境里，所以直接就选择了 Vue3 + Vite2 进行开发。先用 <code>pnpm create vite</code> 初始化一个 vite 项目，安装好需要使用的 UI 库 Ant Design Vue，删掉无用的内容之后先得到一个基础的项目结构</p>\n<p>接下来配置 chrome 插件的信息，chrome 插件主要是在 <code>manifest.json</code> 文件中配置基础信息。在 public 目录下新建一个 <code>manifast.json</code> 文件，文件中有几个配置是比较重要的，这里特别解释一下</p>\n<ul>\n<li><code>manifest_version</code>：定义配置清单的版本，从 Chrome 88 开始就是 V3，我是用的也是 3 这个版本</li>\n<li><code>permissions</code>：申请操作 chrome 的一些操作权限，这个插件里我主要用到的是 storage 和 cookies 的权限</li>\n<li><code>host_permissions</code>：申请有权限操作的域名，这里直接指定所有域名 <code>&quot;&lt;all_urls&gt;&quot;</code> 即可</li>\n<li><code>background</code>：后台运行脚本指定的属性，可以是 HTML，也可以是 JS 文件，主要是用于在后台监听 cookie 变化</li>\n</ul>\n<p>插件的 icon 我是在阿里的 <a class=\"link\"   href=\"https://www.iconfont.cn/\" >iconfont<i class=\"fas fa-external-link-alt\"></i></a> 上下载的，下载时可以选择不同的大小，其他信息就直接附上源码好了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"manifest_version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sync-cookie-extension\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"开发环境同步测试 cookie 至 localhost，便于本地请求服务携带 cookie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"icons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"16\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie16.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"32\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie32.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"48\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie48.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"128\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie128.png\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"default_icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sources/cookie48.png\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"default_title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"解决本地开发 localhost 请求无法携带 cookie 问题\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"default_popup\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.html\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"storage\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cookies\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"host_permissions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"&lt;all_urls>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"service_worker\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后就是插件的功能开发，根据需求这个插件主要实现的两个功能</p>\n<ol>\n<li><p>支持配置需要同步到本地的域名和 cookie 名称，支持开启和关闭同步</p>\n</li>\n<li><p>当配置列表中的 cookie 发生变化时，能够将同步至本地</p>\n</li>\n</ol>\n<p>第一个功能就是基于可编辑表格的 CRUD 一套功能，我是用的 Ant Design Vue 来开发的，一套操作下来页面效果是这样的（<a class=\"link\"   href=\"https://github.com/wujieli0207/chrome-sync-cookie-extension/blob/master/src/components/Main.vue\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a>）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2007.32.34.png\"\n                     \n                ></p>\n<p>下面就是实现最主要的同步功能：当 from 字段下 cookie name 发上变化时，将 cookie 同步至 to 字段对应的域名下（默认是 localhost ）</p>\n<p>第一步先要将我们在列表中配置的域名信息存储在 localstorage 中，一方面为了在插件后台中能够获取到需要同步的列表，另一方面当插件刷新时列表信息也不会丢失。然后还要写一个同步 cookie 的方法 <code>updateCookie</code> 方法用于加载时第一次同步 cookie</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 在 useStorage.ts 中定义存储 localstorage 方法和更新 cookie 的方法</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>\n  ICookieTableDataSource<span class=\"token punctuation\">,</span>\n  ICookie<span class=\"token punctuation\">,</span>\n  TCookieConfig<span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type'</span>\n\n<span class=\"token comment\">// 增加协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> uri <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uri<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 移除协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> uri\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStorage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">:</span> ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> list <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateCookie</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> TCookieConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        url<span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>from <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        name<span class=\"token operator\">:</span> config<span class=\"token punctuation\">.</span>cookieName <span class=\"token operator\">||</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> cookie <span class=\"token operator\">?</span> <span class=\"token keyword\">await</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token operator\">:</span> ICookie<span class=\"token punctuation\">,</span> config<span class=\"token operator\">:</span> TCookieConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      url<span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      domain<span class=\"token operator\">:</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    updateStorage<span class=\"token punctuation\">,</span>\n    getStorage<span class=\"token punctuation\">,</span>\n    updateCookie<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useStorage<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二步就是在插件首次加载的时候，从 localhost 读取是否开启同步和配置列表，然后读取配置列表的信息更新 cookie</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 读取是否同步开启和配置列表</span>\n<span class=\"token keyword\">const</span> dataSource <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">ref</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LIST</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// DEFAULT_LIST 是默认最初的同步列表，这样第一次加载插件时 localstorage 为空的话也不用手动在写一遍</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> updateStorage<span class=\"token punctuation\">,</span> getStorage<span class=\"token punctuation\">,</span> updateCookie <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 初始化开启同步状态</span>\n  <span class=\"token keyword\">const</span> openSyncLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isOpenSync'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>openSyncLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    isOpenSync<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> openSyncLocal<span class=\"token punctuation\">.</span>isOpenSync\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 从 localStorage 初始化数据</span>\n  <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> domainList <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span><span class=\"token constant\">LIST_KEY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> ICookieTableDataSource<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>domainList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    dataSource<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> domainList\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 更新 localStorage 和 cookie</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token function\">unref</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\n    dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">updateCookie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        from<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>\n        to<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">,</span>\n        cookieName<span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>cookieName<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第三步当是否开启同步状态和配置列表发生变化时需要更新 localhost，这里使用 watch 监听同步状态的改变，然后再保存同步列表的方法里新增更新 localstorage</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>isOpenSync<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> isOpenSync<span class=\"token operator\">:</span> isOpenSync<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleSave</span><span class=\"token punctuation\">(</span>rowId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n    dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> rowId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    editableData<span class=\"token punctuation\">[</span>rowId<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">delete</span> editableData<span class=\"token punctuation\">[</span>rowId<span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// 更新 localStorage</span>\n  <span class=\"token function\">updateStorage</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里已经实现的第一次的 cookie 同步功能，然后就要用到监听 cookie 变化的事件 <code>chrome.cookies.onChanged.addListener</code> 了。我们之前在 <code>manifest.json</code> 文件中配置了 <code>background</code> 这个参数，这个时候就要用上了</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"service_worker\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"background.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在项目 public 目录下新建 <code>background.js</code>，添加 cookie 改变监听事件函数，然后从 localhost 中获取是否开启同步状态和配置列表，在开启同步的状态下，从列表中找到需要更新的 cookie 同步至本地就可以了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">addCookiesChangeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addCookiesChangeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start addCookiesChangeEvent'</span><span class=\"token punctuation\">)</span>\n  chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>onChanged<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> cookie<span class=\"token punctuation\">,</span> removed <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 判断是否开启同步</span>\n    <span class=\"token keyword\">const</span> openSyncObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isOpenSync'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> isOpenSync <span class=\"token operator\">=</span> openSyncObj<span class=\"token punctuation\">.</span>isOpenSync\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOpenSync<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> chrome<span class=\"token punctuation\">.</span>storage<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'domainList'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n    <span class=\"token keyword\">const</span> domainList <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span><span class=\"token string\">'domainList'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 需求更新的 cookie</span>\n    <span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> domainList<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token function\">equalDomain</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>cookieName <span class=\"token operator\">===</span> cookie<span class=\"token punctuation\">.</span>name\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">removeCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">domain</span><span class=\"token operator\">:</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie<span class=\"token punctuation\">,</span> config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  chrome<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>to <span class=\"token operator\">||</span> <span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> cookie<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 增加协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> uri <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uri<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 移除协议头</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">removeProtocol</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uri</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> uri\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">equalDomain</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">domain1<span class=\"token punctuation\">,</span> domain2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>domain1<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">addProtocol</span><span class=\"token punctuation\">(</span>domain2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>到这里同步功能就已经实现了，接下来打包项目 <code>pnpm run build</code>，打开 chrome 浏览器开发者模式，选择“加载解压缩的扩展”，选择打包的 dist 文件安装，如果安装成功的话可以看到这样一个图标</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.17.10.png\"\n                     \n                ></p>\n<p>最后测试一下插件的效果，在百度域名下输入一个测试域名，然后在 localhost 下刷新一下，可以看到 cookie 已经成功同步过去了，大功告成</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.04.png\"\n                     \n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2022-09-04%2009.27.47.png\"\n                     \n                ></p>\n<p>代码我也上传到了 github，有兴趣的话大家也可以 star 支持一波，<a class=\"link\"   href=\"https://github.com/wujieli0207/chrome-sync-cookie-extension\" >源码地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"浅谈前端性能优化：图片懒加载","date":"2022-09-25T08:12:00.000Z","_content":"\n## 图片懒加载基本原理\n\n所谓图片懒加载，就是需要展示图片的时候再加载，当图片没有进入我们的视觉范围内的时候，图片还没有加载，只用一个占位符或者 loading 图片替代。当我们滚动页面时，占位符或者 loading 图片进入到我们的视觉范围，就加载图片。这样可以解决一次性加载大量图片带来的性能问题\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607000.png)\n\n为了实现图片懒加载有两个核心问题需要解决\n\n1. 如何判断图片已经在可视区域范围内？\n2. 图片进入可视区域后，如何触发加载图片\n\n对于第二个问题需要用到 DOM 元素的 [dataset 属性](https://zh.javascript.info/dom-attributes-and-properties#fei-biao-zhun-de-te-xing-dataset)，所有以 `data-` 开头的属性都可以用做自定义属性，所以我们可以定义一个 `data-src` 属性存放需要加载的图片链接，`src` 属性使用 loading 占位图片，当需要加载图片的时候，把 `src` 的链接更换为 `data-src` 的链接即可\n\n```html\n<img data-src=\"需要加载的图片链接\" src=\"loading 图片链接\" />\n```\n\n所以剩下要解决的是第一个问题：如何判断图片进入可视区域内？\n\n## 方案一：getBoundingClientRect()\n\n这个方案需要获取两个高度：浏览器窗口高度（可视区域高度）和元素距离浏览器窗口顶部的高度\n\n浏览器窗口高度通过 `document.documentElement.clientHeight` 这个 API 来获取，另外我也在网上找了一张浏览器常用高度的示意图供大家参考\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Untitled.png)\n\n获取元素距离可视区域顶部的高度需要通过`getBoundingClientRect()` API 来实现，`getBoundingClientRect()` 获取的是 DOM 元素相对于窗口的坐标集合，集合中有多个属性，其中的 top 属性就是当前元素元素距离窗口可视区域顶部的距离（下图是所有距离属性的示意图）\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251610228.png)\n\n有了这两个高度判断的 API，实现方案就简单了，通过监听**当前可视区域的高度** - **元素距离可视区域顶部的高度**，当这个高度差小于 0 时说明图片已经进入可视区域，这时开始加载图片\n\n```js\n// 获取所有图片标签\nconst imgs = document.getElementsByTagName('img')\n// 获取可视区域的高度\nconst viewHight = document.documentElement.clientHeight\n// 统计当前加载到了哪张照片，避免每一次都从第一张照片开始检查\nlet num = 0\n\nfunction lazyload() {\n  for (let i = num; i < imgs.length; i++) {\n    const item = imgs[i]\n    // 可视区域高度减去元素顶部距离可视区域顶部的高度，如果差值大于 0 说明元素展示\n    let distance = viewHight - item.getBoundingClientRect().top\n    if (distance >= 0) {\n      // 展示真实图片\n      item.src = item.getAttribute('data-src')\n      num = i + 1\n    }\n  }\n}\n\n// 监听 scroll 事件\nwindow.addEventListener('scroll', lazyload, false)\n\nlazyload()\n```\n\n下面是我使用马上掘金实现的一个小 demo，大家可以直接体验一下效果\n\n[图片懒加载：监听可视窗口实现 - 码上掘金](https://code.juejin.cn/pen/7134838493754163234)\n\n但是使用这个方案有一个弊端，就是 scroll 是同步事件，在滚动时需要大量计算，很容易造成性能问题，所以会需要配合节流方法一起使用（可以看看我的[这篇文章](https://juejin.cn/post/7120222425455394823)对于节流的介绍）。所以对于这个问题，还有没有其他更好的方案呢？\n\n## 方案二：Intersection Observer\n\n`IntersectionObserver` 提供了一种**异步观察**目标元素与其祖先元素或 viewport 交叉状态的方法，可以通过浏览器全局访问，目的就是为了解决监听 scroll 同步事件带来的性能问题\n\n`IntersectionObserver(callback, options)` 方法有两个参数，下面分别介绍一下这两个参数\n\n`callback` 参数：当元素可见性变化时执行的回调函数，所以当元素进入时会触发一次 `callback` ，离开时还会触发一次 `callback` 。`callback` 函数有一个 `entries` 作为入参，`entries` 是一个对象，有 7 个属性，前两个属性很重要，是用于实现图片懒加载的核心属性\n\n- target：观察的目标 DOM 元素\n- isIntersecting：目标元素 target 当前是否可见，可见为 true\n- time：返回一个记录从 `IntersectionObserver` 的时间到交叉被触发的时间的时间戳\n- rootBounds：根元素的矩形区域的信息，`getBoundingClientRect()` 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null\n- boundingClientRect：目标元素的矩形信息\n- intersectionRatio：相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于 0\n- intersectionRect：目标元素和视窗（根）相交的矩形信息\n\n虽然剩余 5 个属性暂时还用不上，但是为了方便大家理解这 5 个属性，我还是画了一个示意图\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607872.png)\n\noptions 是可选参数配置，主要有三个属性\n\n- root：监听对象的祖先元素，一般都是默认为 root\n- thresholds：阈值列表，决定什么时候触发 `callback` 函数。默认是 0，就是当目标元素刚出现在交界处时就会触发 `callback` 函数\n- rootMargin：扩大或缩小 viewport 的范围，可以理解为划定一个范围\n\n另外 `IntersectionObserver` 还有三个方法，用于启动和停止监听\n\n- `IntersectionObserver.observe()`：开始监听\n- `IntersectionObserver.disconnect()`：停止监听\n- `IntersectionObserver.unobserve(element)`：停止监听特定的 element 元素\n\n有了上面这些基础知识的铺垫之后，下面是图片懒加载方法实现的核心代码，原理也是一样，在当前元素可见时把 `src` 替换为 `data-src` 中的真实链接\n\n```js\nconst io = new IntersectionObserver((entries) => {\n  entries.forEach((item) => {\n    // 当前元素可见时\n    if (item.isIntersecting) {\n      item.target.src = item.target.dataset.src // 替换 src\n      io.unobserve(item.target) // 停止观察当前元素，避免不可见时再次调用 callback 函数\n    }\n  })\n})\n\nconst imgs = document.querySelectorAll('[data-src]')\n\n// 监听所有图片元素\nimgs.forEach((item) => {\n  io.observe(item)\n})\n```\n\n同样附上 demo 链接体验一下效果\n\n[图片懒加载：根据 IntersectionObserver 实现 - 码上掘金](https://code.juejin.cn/pen/7134699544843026439)\n\n从浏览器兼容性的角度看，`IntersectionObserver` 也兼容了大部分浏览器，如果大家没有特别的浏览器兼容需要，完全可以使用这个性能更好的方法来实现图片懒加载\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251608066.png)\n","source":"_posts/浅谈前端性能优化：图片懒加载.md","raw":"---\ntitle: 浅谈前端性能优化：图片懒加载\ndate: 2022-09-25 16:12:00\ncategories: 前端\ntags: 性能优化\n---\n\n## 图片懒加载基本原理\n\n所谓图片懒加载，就是需要展示图片的时候再加载，当图片没有进入我们的视觉范围内的时候，图片还没有加载，只用一个占位符或者 loading 图片替代。当我们滚动页面时，占位符或者 loading 图片进入到我们的视觉范围，就加载图片。这样可以解决一次性加载大量图片带来的性能问题\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607000.png)\n\n为了实现图片懒加载有两个核心问题需要解决\n\n1. 如何判断图片已经在可视区域范围内？\n2. 图片进入可视区域后，如何触发加载图片\n\n对于第二个问题需要用到 DOM 元素的 [dataset 属性](https://zh.javascript.info/dom-attributes-and-properties#fei-biao-zhun-de-te-xing-dataset)，所有以 `data-` 开头的属性都可以用做自定义属性，所以我们可以定义一个 `data-src` 属性存放需要加载的图片链接，`src` 属性使用 loading 占位图片，当需要加载图片的时候，把 `src` 的链接更换为 `data-src` 的链接即可\n\n```html\n<img data-src=\"需要加载的图片链接\" src=\"loading 图片链接\" />\n```\n\n所以剩下要解决的是第一个问题：如何判断图片进入可视区域内？\n\n## 方案一：getBoundingClientRect()\n\n这个方案需要获取两个高度：浏览器窗口高度（可视区域高度）和元素距离浏览器窗口顶部的高度\n\n浏览器窗口高度通过 `document.documentElement.clientHeight` 这个 API 来获取，另外我也在网上找了一张浏览器常用高度的示意图供大家参考\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Untitled.png)\n\n获取元素距离可视区域顶部的高度需要通过`getBoundingClientRect()` API 来实现，`getBoundingClientRect()` 获取的是 DOM 元素相对于窗口的坐标集合，集合中有多个属性，其中的 top 属性就是当前元素元素距离窗口可视区域顶部的距离（下图是所有距离属性的示意图）\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251610228.png)\n\n有了这两个高度判断的 API，实现方案就简单了，通过监听**当前可视区域的高度** - **元素距离可视区域顶部的高度**，当这个高度差小于 0 时说明图片已经进入可视区域，这时开始加载图片\n\n```js\n// 获取所有图片标签\nconst imgs = document.getElementsByTagName('img')\n// 获取可视区域的高度\nconst viewHight = document.documentElement.clientHeight\n// 统计当前加载到了哪张照片，避免每一次都从第一张照片开始检查\nlet num = 0\n\nfunction lazyload() {\n  for (let i = num; i < imgs.length; i++) {\n    const item = imgs[i]\n    // 可视区域高度减去元素顶部距离可视区域顶部的高度，如果差值大于 0 说明元素展示\n    let distance = viewHight - item.getBoundingClientRect().top\n    if (distance >= 0) {\n      // 展示真实图片\n      item.src = item.getAttribute('data-src')\n      num = i + 1\n    }\n  }\n}\n\n// 监听 scroll 事件\nwindow.addEventListener('scroll', lazyload, false)\n\nlazyload()\n```\n\n下面是我使用马上掘金实现的一个小 demo，大家可以直接体验一下效果\n\n[图片懒加载：监听可视窗口实现 - 码上掘金](https://code.juejin.cn/pen/7134838493754163234)\n\n但是使用这个方案有一个弊端，就是 scroll 是同步事件，在滚动时需要大量计算，很容易造成性能问题，所以会需要配合节流方法一起使用（可以看看我的[这篇文章](https://juejin.cn/post/7120222425455394823)对于节流的介绍）。所以对于这个问题，还有没有其他更好的方案呢？\n\n## 方案二：Intersection Observer\n\n`IntersectionObserver` 提供了一种**异步观察**目标元素与其祖先元素或 viewport 交叉状态的方法，可以通过浏览器全局访问，目的就是为了解决监听 scroll 同步事件带来的性能问题\n\n`IntersectionObserver(callback, options)` 方法有两个参数，下面分别介绍一下这两个参数\n\n`callback` 参数：当元素可见性变化时执行的回调函数，所以当元素进入时会触发一次 `callback` ，离开时还会触发一次 `callback` 。`callback` 函数有一个 `entries` 作为入参，`entries` 是一个对象，有 7 个属性，前两个属性很重要，是用于实现图片懒加载的核心属性\n\n- target：观察的目标 DOM 元素\n- isIntersecting：目标元素 target 当前是否可见，可见为 true\n- time：返回一个记录从 `IntersectionObserver` 的时间到交叉被触发的时间的时间戳\n- rootBounds：根元素的矩形区域的信息，`getBoundingClientRect()` 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null\n- boundingClientRect：目标元素的矩形信息\n- intersectionRatio：相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于 0\n- intersectionRect：目标元素和视窗（根）相交的矩形信息\n\n虽然剩余 5 个属性暂时还用不上，但是为了方便大家理解这 5 个属性，我还是画了一个示意图\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607872.png)\n\noptions 是可选参数配置，主要有三个属性\n\n- root：监听对象的祖先元素，一般都是默认为 root\n- thresholds：阈值列表，决定什么时候触发 `callback` 函数。默认是 0，就是当目标元素刚出现在交界处时就会触发 `callback` 函数\n- rootMargin：扩大或缩小 viewport 的范围，可以理解为划定一个范围\n\n另外 `IntersectionObserver` 还有三个方法，用于启动和停止监听\n\n- `IntersectionObserver.observe()`：开始监听\n- `IntersectionObserver.disconnect()`：停止监听\n- `IntersectionObserver.unobserve(element)`：停止监听特定的 element 元素\n\n有了上面这些基础知识的铺垫之后，下面是图片懒加载方法实现的核心代码，原理也是一样，在当前元素可见时把 `src` 替换为 `data-src` 中的真实链接\n\n```js\nconst io = new IntersectionObserver((entries) => {\n  entries.forEach((item) => {\n    // 当前元素可见时\n    if (item.isIntersecting) {\n      item.target.src = item.target.dataset.src // 替换 src\n      io.unobserve(item.target) // 停止观察当前元素，避免不可见时再次调用 callback 函数\n    }\n  })\n})\n\nconst imgs = document.querySelectorAll('[data-src]')\n\n// 监听所有图片元素\nimgs.forEach((item) => {\n  io.observe(item)\n})\n```\n\n同样附上 demo 链接体验一下效果\n\n[图片懒加载：根据 IntersectionObserver 实现 - 码上掘金](https://code.juejin.cn/pen/7134699544843026439)\n\n从浏览器兼容性的角度看，`IntersectionObserver` 也兼容了大部分浏览器，如果大家没有特别的浏览器兼容需要，完全可以使用这个性能更好的方法来实现图片懒加载\n\n![](https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251608066.png)\n","slug":"浅谈前端性能优化：图片懒加载","published":1,"updated":"2022-10-16T08:00:21.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9b2ah710003urto0hnifmkb","content":"<h2 id=\"图片懒加载基本原理\"><a href=\"#图片懒加载基本原理\" class=\"headerlink\" title=\"图片懒加载基本原理\"></a>图片懒加载基本原理</h2><p>所谓图片懒加载，就是需要展示图片的时候再加载，当图片没有进入我们的视觉范围内的时候，图片还没有加载，只用一个占位符或者 loading 图片替代。当我们滚动页面时，占位符或者 loading 图片进入到我们的视觉范围，就加载图片。这样可以解决一次性加载大量图片带来的性能问题</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607000.png\"\n                     \n                ></p>\n<p>为了实现图片懒加载有两个核心问题需要解决</p>\n<ol>\n<li>如何判断图片已经在可视区域范围内？</li>\n<li>图片进入可视区域后，如何触发加载图片</li>\n</ol>\n<p>对于第二个问题需要用到 DOM 元素的 <a class=\"link\"   href=\"https://zh.javascript.info/dom-attributes-and-properties#fei-biao-zhun-de-te-xing-dataset\" >dataset 属性<i class=\"fas fa-external-link-alt\"></i></a>，所有以 <code>data-</code> 开头的属性都可以用做自定义属性，所以我们可以定义一个 <code>data-src</code> 属性存放需要加载的图片链接，<code>src</code> 属性使用 loading 占位图片，当需要加载图片的时候，把 <code>src</code> 的链接更换为 <code>data-src</code> 的链接即可</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>需要加载的图片链接<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loading 图片链接<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所以剩下要解决的是第一个问题：如何判断图片进入可视区域内？</p>\n<h2 id=\"方案一：getBoundingClientRect\"><a href=\"#方案一：getBoundingClientRect\" class=\"headerlink\" title=\"方案一：getBoundingClientRect()\"></a>方案一：getBoundingClientRect()</h2><p>这个方案需要获取两个高度：浏览器窗口高度（可视区域高度）和元素距离浏览器窗口顶部的高度</p>\n<p>浏览器窗口高度通过 <code>document.documentElement.clientHeight</code> 这个 API 来获取，另外我也在网上找了一张浏览器常用高度的示意图供大家参考</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Untitled.png\"\n                     \n                ></p>\n<p>获取元素距离可视区域顶部的高度需要通过<code>getBoundingClientRect()</code> API 来实现，<code>getBoundingClientRect()</code> 获取的是 DOM 元素相对于窗口的坐标集合，集合中有多个属性，其中的 top 属性就是当前元素元素距离窗口可视区域顶部的距离（下图是所有距离属性的示意图）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251610228.png\"\n                     \n                ></p>\n<p>有了这两个高度判断的 API，实现方案就简单了，通过监听<strong>当前可视区域的高度</strong> - <strong>元素距离可视区域顶部的高度</strong>，当这个高度差小于 0 时说明图片已经进入可视区域，这时开始加载图片</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取所有图片标签</span>\n<span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 获取可视区域的高度</span>\n<span class=\"token keyword\">const</span> viewHight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight\n<span class=\"token comment\">// 统计当前加载到了哪张照片，避免每一次都从第一张照片开始检查</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lazyload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imgs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 可视区域高度减去元素顶部距离可视区域顶部的高度，如果差值大于 0 说明元素展示</span>\n    <span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> viewHight <span class=\"token operator\">-</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 展示真实图片</span>\n      item<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span>\n      num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 监听 scroll 事件</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> lazyload<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">lazyload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是我使用马上掘金实现的一个小 demo，大家可以直接体验一下效果</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7134838493754163234\" >图片懒加载：监听可视窗口实现 - 码上掘金<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>但是使用这个方案有一个弊端，就是 scroll 是同步事件，在滚动时需要大量计算，很容易造成性能问题，所以会需要配合节流方法一起使用（可以看看我的<a class=\"link\"   href=\"https://juejin.cn/post/7120222425455394823\" >这篇文章<i class=\"fas fa-external-link-alt\"></i></a>对于节流的介绍）。所以对于这个问题，还有没有其他更好的方案呢？</p>\n<h2 id=\"方案二：Intersection-Observer\"><a href=\"#方案二：Intersection-Observer\" class=\"headerlink\" title=\"方案二：Intersection Observer\"></a>方案二：Intersection Observer</h2><p><code>IntersectionObserver</code> 提供了一种<strong>异步观察</strong>目标元素与其祖先元素或 viewport 交叉状态的方法，可以通过浏览器全局访问，目的就是为了解决监听 scroll 同步事件带来的性能问题</p>\n<p><code>IntersectionObserver(callback, options)</code> 方法有两个参数，下面分别介绍一下这两个参数</p>\n<p><code>callback</code> 参数：当元素可见性变化时执行的回调函数，所以当元素进入时会触发一次 <code>callback</code> ，离开时还会触发一次 <code>callback</code> 。<code>callback</code> 函数有一个 <code>entries</code> 作为入参，<code>entries</code> 是一个对象，有 7 个属性，前两个属性很重要，是用于实现图片懒加载的核心属性</p>\n<ul>\n<li>target：观察的目标 DOM 元素</li>\n<li>isIntersecting：目标元素 target 当前是否可见，可见为 true</li>\n<li>time：返回一个记录从 <code>IntersectionObserver</code> 的时间到交叉被触发的时间的时间戳</li>\n<li>rootBounds：根元素的矩形区域的信息，<code>getBoundingClientRect()</code> 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null</li>\n<li>boundingClientRect：目标元素的矩形信息</li>\n<li>intersectionRatio：相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于 0</li>\n<li>intersectionRect：目标元素和视窗（根）相交的矩形信息</li>\n</ul>\n<p>虽然剩余 5 个属性暂时还用不上，但是为了方便大家理解这 5 个属性，我还是画了一个示意图</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607872.png\"\n                     \n                ></p>\n<p>options 是可选参数配置，主要有三个属性</p>\n<ul>\n<li>root：监听对象的祖先元素，一般都是默认为 root</li>\n<li>thresholds：阈值列表，决定什么时候触发 <code>callback</code> 函数。默认是 0，就是当目标元素刚出现在交界处时就会触发 <code>callback</code> 函数</li>\n<li>rootMargin：扩大或缩小 viewport 的范围，可以理解为划定一个范围</li>\n</ul>\n<p>另外 <code>IntersectionObserver</code> 还有三个方法，用于启动和停止监听</p>\n<ul>\n<li><code>IntersectionObserver.observe()</code>：开始监听</li>\n<li><code>IntersectionObserver.disconnect()</code>：停止监听</li>\n<li><code>IntersectionObserver.unobserve(element)</code>：停止监听特定的 element 元素</li>\n</ul>\n<p>有了上面这些基础知识的铺垫之后，下面是图片懒加载方法实现的核心代码，原理也是一样，在当前元素可见时把 <code>src</code> 替换为 <code>data-src</code> 中的真实链接</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当前元素可见时</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src <span class=\"token comment\">// 替换 src</span>\n      io<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 停止观察当前元素，避免不可见时再次调用 callback 函数</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-src]'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 监听所有图片元素</span>\nimgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  io<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样附上 demo 链接体验一下效果</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7134699544843026439\" >图片懒加载：根据 IntersectionObserver 实现 - 码上掘金<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>从浏览器兼容性的角度看，<code>IntersectionObserver</code> 也兼容了大部分浏览器，如果大家没有特别的浏览器兼容需要，完全可以使用这个性能更好的方法来实现图片懒加载</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251608066.png\"\n                     \n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"图片懒加载基本原理\"><a href=\"#图片懒加载基本原理\" class=\"headerlink\" title=\"图片懒加载基本原理\"></a>图片懒加载基本原理</h2><p>所谓图片懒加载，就是需要展示图片的时候再加载，当图片没有进入我们的视觉范围内的时候，图片还没有加载，只用一个占位符或者 loading 图片替代。当我们滚动页面时，占位符或者 loading 图片进入到我们的视觉范围，就加载图片。这样可以解决一次性加载大量图片带来的性能问题</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607000.png\"\n                     \n                ></p>\n<p>为了实现图片懒加载有两个核心问题需要解决</p>\n<ol>\n<li>如何判断图片已经在可视区域范围内？</li>\n<li>图片进入可视区域后，如何触发加载图片</li>\n</ol>\n<p>对于第二个问题需要用到 DOM 元素的 <a class=\"link\"   href=\"https://zh.javascript.info/dom-attributes-and-properties#fei-biao-zhun-de-te-xing-dataset\" >dataset 属性<i class=\"fas fa-external-link-alt\"></i></a>，所有以 <code>data-</code> 开头的属性都可以用做自定义属性，所以我们可以定义一个 <code>data-src</code> 属性存放需要加载的图片链接，<code>src</code> 属性使用 loading 占位图片，当需要加载图片的时候，把 <code>src</code> 的链接更换为 <code>data-src</code> 的链接即可</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>需要加载的图片链接<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loading 图片链接<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所以剩下要解决的是第一个问题：如何判断图片进入可视区域内？</p>\n<h2 id=\"方案一：getBoundingClientRect\"><a href=\"#方案一：getBoundingClientRect\" class=\"headerlink\" title=\"方案一：getBoundingClientRect()\"></a>方案一：getBoundingClientRect()</h2><p>这个方案需要获取两个高度：浏览器窗口高度（可视区域高度）和元素距离浏览器窗口顶部的高度</p>\n<p>浏览器窗口高度通过 <code>document.documentElement.clientHeight</code> 这个 API 来获取，另外我也在网上找了一张浏览器常用高度的示意图供大家参考</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/Untitled.png\"\n                     \n                ></p>\n<p>获取元素距离可视区域顶部的高度需要通过<code>getBoundingClientRect()</code> API 来实现，<code>getBoundingClientRect()</code> 获取的是 DOM 元素相对于窗口的坐标集合，集合中有多个属性，其中的 top 属性就是当前元素元素距离窗口可视区域顶部的距离（下图是所有距离属性的示意图）</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251610228.png\"\n                     \n                ></p>\n<p>有了这两个高度判断的 API，实现方案就简单了，通过监听<strong>当前可视区域的高度</strong> - <strong>元素距离可视区域顶部的高度</strong>，当这个高度差小于 0 时说明图片已经进入可视区域，这时开始加载图片</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 获取所有图片标签</span>\n<span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 获取可视区域的高度</span>\n<span class=\"token keyword\">const</span> viewHight <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight\n<span class=\"token comment\">// 统计当前加载到了哪张照片，避免每一次都从第一张照片开始检查</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">lazyload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> imgs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> imgs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// 可视区域高度减去元素顶部距离可视区域顶部的高度，如果差值大于 0 说明元素展示</span>\n    <span class=\"token keyword\">let</span> distance <span class=\"token operator\">=</span> viewHight <span class=\"token operator\">-</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 展示真实图片</span>\n      item<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span>\n      num <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 监听 scroll 事件</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> lazyload<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">lazyload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面是我使用马上掘金实现的一个小 demo，大家可以直接体验一下效果</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7134838493754163234\" >图片懒加载：监听可视窗口实现 - 码上掘金<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>但是使用这个方案有一个弊端，就是 scroll 是同步事件，在滚动时需要大量计算，很容易造成性能问题，所以会需要配合节流方法一起使用（可以看看我的<a class=\"link\"   href=\"https://juejin.cn/post/7120222425455394823\" >这篇文章<i class=\"fas fa-external-link-alt\"></i></a>对于节流的介绍）。所以对于这个问题，还有没有其他更好的方案呢？</p>\n<h2 id=\"方案二：Intersection-Observer\"><a href=\"#方案二：Intersection-Observer\" class=\"headerlink\" title=\"方案二：Intersection Observer\"></a>方案二：Intersection Observer</h2><p><code>IntersectionObserver</code> 提供了一种<strong>异步观察</strong>目标元素与其祖先元素或 viewport 交叉状态的方法，可以通过浏览器全局访问，目的就是为了解决监听 scroll 同步事件带来的性能问题</p>\n<p><code>IntersectionObserver(callback, options)</code> 方法有两个参数，下面分别介绍一下这两个参数</p>\n<p><code>callback</code> 参数：当元素可见性变化时执行的回调函数，所以当元素进入时会触发一次 <code>callback</code> ，离开时还会触发一次 <code>callback</code> 。<code>callback</code> 函数有一个 <code>entries</code> 作为入参，<code>entries</code> 是一个对象，有 7 个属性，前两个属性很重要，是用于实现图片懒加载的核心属性</p>\n<ul>\n<li>target：观察的目标 DOM 元素</li>\n<li>isIntersecting：目标元素 target 当前是否可见，可见为 true</li>\n<li>time：返回一个记录从 <code>IntersectionObserver</code> 的时间到交叉被触发的时间的时间戳</li>\n<li>rootBounds：根元素的矩形区域的信息，<code>getBoundingClientRect()</code> 方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回 null</li>\n<li>boundingClientRect：目标元素的矩形信息</li>\n<li>intersectionRatio：相交区域和目标元素的比例值 intersectionRect/boundingClientRect 不可见时小于等于 0</li>\n<li>intersectionRect：目标元素和视窗（根）相交的矩形信息</li>\n</ul>\n<p>虽然剩余 5 个属性暂时还用不上，但是为了方便大家理解这 5 个属性，我还是画了一个示意图</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251607872.png\"\n                     \n                ></p>\n<p>options 是可选参数配置，主要有三个属性</p>\n<ul>\n<li>root：监听对象的祖先元素，一般都是默认为 root</li>\n<li>thresholds：阈值列表，决定什么时候触发 <code>callback</code> 函数。默认是 0，就是当目标元素刚出现在交界处时就会触发 <code>callback</code> 函数</li>\n<li>rootMargin：扩大或缩小 viewport 的范围，可以理解为划定一个范围</li>\n</ul>\n<p>另外 <code>IntersectionObserver</code> 还有三个方法，用于启动和停止监听</p>\n<ul>\n<li><code>IntersectionObserver.observe()</code>：开始监听</li>\n<li><code>IntersectionObserver.disconnect()</code>：停止监听</li>\n<li><code>IntersectionObserver.unobserve(element)</code>：停止监听特定的 element 元素</li>\n</ul>\n<p>有了上面这些基础知识的铺垫之后，下面是图片懒加载方法实现的核心代码，原理也是一样，在当前元素可见时把 <code>src</code> 替换为 <code>data-src</code> 中的真实链接</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> io <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 当前元素可见时</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>src <span class=\"token comment\">// 替换 src</span>\n      io<span class=\"token punctuation\">.</span><span class=\"token function\">unobserve</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 停止观察当前元素，避免不可见时再次调用 callback 函数</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> imgs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[data-src]'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 监听所有图片元素</span>\nimgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  io<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样附上 demo 链接体验一下效果</p>\n<p><a class=\"link\"   href=\"https://code.juejin.cn/pen/7134699544843026439\" >图片懒加载：根据 IntersectionObserver 实现 - 码上掘金<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>从浏览器兼容性的角度看，<code>IntersectionObserver</code> 也兼容了大部分浏览器，如果大家没有特别的浏览器兼容需要，完全可以使用这个性能更好的方法来实现图片懒加载</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://notesimgs.oss-cn-shanghai.aliyuncs.com/img/202209251608066.png\"\n                     \n                ></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0m014aw0009a7sj2b3h63hr","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b0000ha7sj6bt1c3o9"},{"post_id":"cl0m014ao0001a7sjf9g7er5w","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b1000ma7sj8qaw6b1c"},{"post_id":"cl0m014ay000ea7sjddkw8ook","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b2000oa7sjdrdl0q5r"},{"post_id":"cl0m014ar0003a7sjeq2ucet5","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b3000ta7sjaiebega4"},{"post_id":"cl0m014az000ga7sj2fg73nhc","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b4000wa7sj4bg15anf"},{"post_id":"cl0m014b1000la7sj0a3sgd9i","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b50010a7sjfetg2jc0"},{"post_id":"cl0m014au0007a7sjbz0eec4i","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b50012a7sj8usi5c5w"},{"post_id":"cl0m014b1000na7sj71p47rfn","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b60016a7sj17xihx45"},{"post_id":"cl0m014b3000sa7sj81z3cot3","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b60018a7sj917rdmip"},{"post_id":"cl0m014aw000aa7sj0edug67o","category_id":"cl0m014b2000pa7sjbmn6gga0","_id":"cl0m014b7001aa7sja0hx4g0w"},{"post_id":"cl0m014b4000va7sjeoiqfsox","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl0m014b7001ca7sj8hirfskr"},{"post_id":"cl0m014b5000za7sj8tdf517p","category_id":"cl0m014b60014a7sj8qv8diep","_id":"cl0m014b7001ea7sj50sldgry"},{"post_id":"cl132y9fe0000380e8e85185t","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl132y9fk0002380e04x42up8"},{"post_id":"cl67regyb0000cito20j364j7","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl67regyj0002cito7chiabkh"},{"post_id":"cl67regym0005cito6gfahopc","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl67regyp0007cito32r0cz12"},{"post_id":"cl67regyq0009cito1fjxf3mo","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl67regyu000dcitof65l9jqp"},{"post_id":"cl67regys000acito31rn0dwn","category_id":"cl0m014b60014a7sj8qv8diep","_id":"cl67regyu000fcito14qag3wq"},{"post_id":"cl67regyt000ccitohx27hiuk","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl67regyu000hcitod5y6hc58"},{"post_id":"cl6iuoslz0000zhtofbj4f06o","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl6iuosm40002zhto76l30si9"},{"post_id":"cl73czlfn0000ilto71j7gap4","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl73czlfv0002ilto53ai4xu9"},{"post_id":"cl9b2ah6r0000urtof6mcc6yv","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl9b2ah720004urtoctwy8gtv"},{"post_id":"cl9b2ah6v0001urto4yszayr8","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl9b2ah720006urtod8y3dh7h"},{"post_id":"cl9b2ah710003urto0hnifmkb","category_id":"cl0m014as0004a7sjg9spb2uo","_id":"cl9b2ah730009urto4krzesil"}],"PostTag":[{"post_id":"cl0m014aw0009a7sj2b3h63hr","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014ay000da7sjckfvapbw"},{"post_id":"cl0m014ao0001a7sjf9g7er5w","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014az000fa7sj88sh470o"},{"post_id":"cl0m014ar0003a7sjeq2ucet5","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014b1000ka7sj23nq9dml"},{"post_id":"cl0m014au0007a7sjbz0eec4i","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014b3000ra7sj8zo2dire"},{"post_id":"cl0m014b1000na7sj71p47rfn","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014b4000ua7sj75r2eez3"},{"post_id":"cl0m014b3000sa7sj81z3cot3","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014b5000ya7sj3k0y6tox"},{"post_id":"cl0m014aw000aa7sj0edug67o","tag_id":"cl0m014b2000qa7sj20cj0637","_id":"cl0m014b50011a7sj2n9587hc"},{"post_id":"cl0m014b4000va7sjeoiqfsox","tag_id":"cl0m014at0005a7sj1k9h04kk","_id":"cl0m014b60015a7sj5krw92te"},{"post_id":"cl0m014ay000ea7sjddkw8ook","tag_id":"cl0m014b4000xa7sj7jgmhwbm","_id":"cl0m014b60017a7sjfyzf8ob1"},{"post_id":"cl0m014az000ga7sj2fg73nhc","tag_id":"cl0m014b60013a7sj4kt6gtki","_id":"cl0m014b7001ba7sj87hmbdv8"},{"post_id":"cl0m014b1000la7sj0a3sgd9i","tag_id":"cl0m014b60013a7sj4kt6gtki","_id":"cl0m014b7001fa7sje6wqh4m9"},{"post_id":"cl0m014b5000za7sj8tdf517p","tag_id":"cl0m014b7001da7sj6p10gsj6","_id":"cl0m014b8001ga7sjew0o7887"},{"post_id":"cl67regyb0000cito20j364j7","tag_id":"cl0m014b4000xa7sj7jgmhwbm","_id":"cl67regyk0003cito7xzz2w9o"},{"post_id":"cl67regyb0000cito20j364j7","tag_id":"cl67regyd0001citohyjwesm8","_id":"cl67regym0004citocnvt4dyw"},{"post_id":"cl67regym0005cito6gfahopc","tag_id":"cl67regyn0006citoffgk5afv","_id":"cl67regyq0008cito1uyca7qe"},{"post_id":"cl67regyt000ccitohx27hiuk","tag_id":"cl67regyd0001citohyjwesm8","_id":"cl67regyu000ecitoddpy4w8e"},{"post_id":"cl67regyq0009cito1fjxf3mo","tag_id":"cl67regyt000bcitoea0j00z8","_id":"cl67regyu000gcito5iy2has0"},{"post_id":"cl6iuoslz0000zhtofbj4f06o","tag_id":"cl0m014b4000xa7sj7jgmhwbm","_id":"cl6iuosm40001zhto4ubihgbv"},{"post_id":"cl73czlfn0000ilto71j7gap4","tag_id":"cl73czlfv0003ilto3xcg8i63","_id":"cl73czlfw0005ilto1pcw5i41"},{"post_id":"cl132y9fe0000380e8e85185t","tag_id":"cl0m014b4000xa7sj7jgmhwbm","_id":"cl73dm0wn0000zlto2g7obwm6"},{"post_id":"cl9b2ah710003urto0hnifmkb","tag_id":"cl67regyd0001citohyjwesm8","_id":"cl9b2ah720005urtoh3vbertx"},{"post_id":"cl9b2ah6r0000urtof6mcc6yv","tag_id":"cl9b2ah6x0002urto4v8mhgd7","_id":"cl9b2ah730008urto9a786svj"},{"post_id":"cl9b2ah6v0001urto4yszayr8","tag_id":"cl9b2ah720007urto9eju9o9e","_id":"cl9b2ah73000aurtoffgcafuc"}],"Tag":[{"name":"JavaScript","_id":"cl0m014at0005a7sj1k9h04kk"},{"name":"程序人生","_id":"cl0m014b2000qa7sj20cj0637"},{"name":"vue","_id":"cl0m014b4000xa7sj7jgmhwbm"},{"name":"webpack","_id":"cl0m014b60013a7sj4kt6gtki"},{"name":"复盘与总结","_id":"cl0m014b7001da7sj6p10gsj6"},{"name":"性能优化","_id":"cl67regyd0001citohyjwesm8"},{"name":"计算机网络","_id":"cl67regyn0006citoffgk5afv"},{"name":"代码整洁之道","_id":"cl67regyt000bcitoea0j00z8"},{"name":"Vue","_id":"cl73czlfr0001ilto6u4a4pr3"},{"name":"Vite","_id":"cl73czlfv0003ilto3xcg8i63"},{"name":"CSS","_id":"cl9b2ah6x0002urto4v8mhgd7"},{"name":"chrome","_id":"cl9b2ah720007urto9eju9o9e"}]}}